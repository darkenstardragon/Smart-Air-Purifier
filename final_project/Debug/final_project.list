
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08009010  08009010  00019010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090a4  080090a4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080090a4  080090a4  000190a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090ac  080090ac  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090ac  080090ac  000190ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090b0  080090b0  000190b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080090b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000894  20000090  08009144  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000924  08009144  00020924  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a61b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003990  00000000  00000000  0003a6db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013e0  00000000  00000000  0003e070  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001258  00000000  00000000  0003f450  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000252f9  00000000  00000000  000406a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001301b  00000000  00000000  000659a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0e83  00000000  00000000  000789bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014983f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005680  00000000  00000000  001498bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ff8 	.word	0x08008ff8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08008ff8 	.word	0x08008ff8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 fd07 	bl	8000fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 f808 	bl	80005b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f007 fae2 	bl	8007b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_InitTick+0x54>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_InitTick+0x58>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fd1f 	bl	8001016 <HAL_SYSTICK_Config>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	e00e      	b.n	8000600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	d80a      	bhi.n	80005fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e8:	2200      	movs	r2, #0
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295
 80005f0:	f000 fce7 	bl	8000fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f4:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_InitTick+0x5c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e000      	b.n	8000600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000028 	.word	0x20000028
 800060c:	20000004 	.word	0x20000004
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_IncTick+0x20>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x24>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4413      	add	r3, r2
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_IncTick+0x24>)
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000004 	.word	0x20000004
 8000638:	200000c0 	.word	0x200000c0

0800063c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return uwTick;
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <HAL_GetTick+0x14>)
 8000642:	681b      	ldr	r3, [r3, #0]
}
 8000644:	4618      	mov	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	200000c0 	.word	0x200000c0

08000654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800065c:	f7ff ffee 	bl	800063c <HAL_GetTick>
 8000660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800066c:	d005      	beq.n	800067a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_Delay+0x40>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800067a:	bf00      	nop
 800067c:	f7ff ffde 	bl	800063c <HAL_GetTick>
 8000680:	4602      	mov	r2, r0
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	d8f7      	bhi.n	800067c <HAL_Delay+0x28>
  {
  }
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000004 	.word	0x20000004

08000698 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006a0:	2300      	movs	r3, #0
 80006a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d101      	bne.n	80006ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e033      	b.n	8000716 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d109      	bne.n	80006ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f007 fa80 	bl	8007bbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2200      	movs	r2, #0
 80006c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2200      	movs	r2, #0
 80006c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	f003 0310 	and.w	r3, r3, #16
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d118      	bne.n	8000708 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006de:	f023 0302 	bic.w	r3, r3, #2
 80006e2:	f043 0202 	orr.w	r2, r3, #2
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f000 fa92 	bl	8000c14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2200      	movs	r2, #0
 80006f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fa:	f023 0303 	bic.w	r3, r3, #3
 80006fe:	f043 0201 	orr.w	r2, r3, #1
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	641a      	str	r2, [r3, #64]	; 0x40
 8000706:	e001      	b.n	800070c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000708:	2301      	movs	r3, #1
 800070a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000714:	7bfb      	ldrb	r3, [r7, #15]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000732:	2b01      	cmp	r3, #1
 8000734:	d101      	bne.n	800073a <HAL_ADC_Start+0x1a>
 8000736:	2302      	movs	r3, #2
 8000738:	e0a5      	b.n	8000886 <HAL_ADC_Start+0x166>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2201      	movs	r2, #1
 800073e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	2b01      	cmp	r3, #1
 800074e:	d018      	beq.n	8000782 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	689a      	ldr	r2, [r3, #8]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f042 0201 	orr.w	r2, r2, #1
 800075e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000760:	4b4c      	ldr	r3, [pc, #304]	; (8000894 <HAL_ADC_Start+0x174>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a4c      	ldr	r2, [pc, #304]	; (8000898 <HAL_ADC_Start+0x178>)
 8000766:	fba2 2303 	umull	r2, r3, r2, r3
 800076a:	0c9a      	lsrs	r2, r3, #18
 800076c:	4613      	mov	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4413      	add	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000774:	e002      	b.n	800077c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	3b01      	subs	r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1f9      	bne.n	8000776 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	2b01      	cmp	r3, #1
 800078e:	d179      	bne.n	8000884 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000798:	f023 0301 	bic.w	r3, r3, #1
 800079c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d007      	beq.n	80007c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007ce:	d106      	bne.n	80007de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d4:	f023 0206 	bic.w	r2, r3, #6
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	645a      	str	r2, [r3, #68]	; 0x44
 80007dc:	e002      	b.n	80007e4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80007ec:	4b2b      	ldr	r3, [pc, #172]	; (800089c <HAL_ADC_Start+0x17c>)
 80007ee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80007f8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	f003 031f 	and.w	r3, r3, #31
 8000802:	2b00      	cmp	r3, #0
 8000804:	d12a      	bne.n	800085c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a25      	ldr	r2, [pc, #148]	; (80008a0 <HAL_ADC_Start+0x180>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d015      	beq.n	800083c <HAL_ADC_Start+0x11c>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a23      	ldr	r2, [pc, #140]	; (80008a4 <HAL_ADC_Start+0x184>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d105      	bne.n	8000826 <HAL_ADC_Start+0x106>
 800081a:	4b20      	ldr	r3, [pc, #128]	; (800089c <HAL_ADC_Start+0x17c>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f003 031f 	and.w	r3, r3, #31
 8000822:	2b00      	cmp	r3, #0
 8000824:	d00a      	beq.n	800083c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a1f      	ldr	r2, [pc, #124]	; (80008a8 <HAL_ADC_Start+0x188>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d129      	bne.n	8000884 <HAL_ADC_Start+0x164>
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <HAL_ADC_Start+0x17c>)
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f003 031f 	and.w	r3, r3, #31
 8000838:	2b0f      	cmp	r3, #15
 800083a:	d823      	bhi.n	8000884 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000846:	2b00      	cmp	r3, #0
 8000848:	d11c      	bne.n	8000884 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	689a      	ldr	r2, [r3, #8]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	e013      	b.n	8000884 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a0f      	ldr	r2, [pc, #60]	; (80008a0 <HAL_ADC_Start+0x180>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d10e      	bne.n	8000884 <HAL_ADC_Start+0x164>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000870:	2b00      	cmp	r3, #0
 8000872:	d107      	bne.n	8000884 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	689a      	ldr	r2, [r3, #8]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000882:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	20000028 	.word	0x20000028
 8000898:	431bde83 	.word	0x431bde83
 800089c:	40012300 	.word	0x40012300
 80008a0:	40012000 	.word	0x40012000
 80008a4:	40012100 	.word	0x40012100
 80008a8:	40012200 	.word	0x40012200

080008ac <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008c8:	d113      	bne.n	80008f2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008d8:	d10b      	bne.n	80008f2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f043 0220 	orr.w	r2, r3, #32
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e05c      	b.n	80009ac <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80008f2:	f7ff fea3 	bl	800063c <HAL_GetTick>
 80008f6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80008f8:	e01a      	b.n	8000930 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000900:	d016      	beq.n	8000930 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d007      	beq.n	8000918 <HAL_ADC_PollForConversion+0x6c>
 8000908:	f7ff fe98 	bl	800063c <HAL_GetTick>
 800090c:	4602      	mov	r2, r0
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	429a      	cmp	r2, r3
 8000916:	d20b      	bcs.n	8000930 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	f043 0204 	orr.w	r2, r3, #4
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800092c:	2303      	movs	r3, #3
 800092e:	e03d      	b.n	80009ac <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	2b02      	cmp	r3, #2
 800093c:	d1dd      	bne.n	80008fa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f06f 0212 	mvn.w	r2, #18
 8000946:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800095e:	2b00      	cmp	r3, #0
 8000960:	d123      	bne.n	80009aa <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000966:	2b00      	cmp	r3, #0
 8000968:	d11f      	bne.n	80009aa <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000970:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000974:	2b00      	cmp	r3, #0
 8000976:	d006      	beq.n	8000986 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000982:	2b00      	cmp	r3, #0
 8000984:	d111      	bne.n	80009aa <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d105      	bne.n	80009aa <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f043 0201 	orr.w	r2, r3, #1
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
	...

080009d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d101      	bne.n	80009ec <HAL_ADC_ConfigChannel+0x1c>
 80009e8:	2302      	movs	r3, #2
 80009ea:	e105      	b.n	8000bf8 <HAL_ADC_ConfigChannel+0x228>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2201      	movs	r2, #1
 80009f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b09      	cmp	r3, #9
 80009fa:	d925      	bls.n	8000a48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	68d9      	ldr	r1, [r3, #12]
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	4413      	add	r3, r2
 8000a10:	3b1e      	subs	r3, #30
 8000a12:	2207      	movs	r2, #7
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	43da      	mvns	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	400a      	ands	r2, r1
 8000a20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	68d9      	ldr	r1, [r3, #12]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	689a      	ldr	r2, [r3, #8]
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	4603      	mov	r3, r0
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	4403      	add	r3, r0
 8000a3a:	3b1e      	subs	r3, #30
 8000a3c:	409a      	lsls	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	430a      	orrs	r2, r1
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	e022      	b.n	8000a8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	6919      	ldr	r1, [r3, #16]
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	461a      	mov	r2, r3
 8000a56:	4613      	mov	r3, r2
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4413      	add	r3, r2
 8000a5c:	2207      	movs	r2, #7
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43da      	mvns	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	400a      	ands	r2, r1
 8000a6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6919      	ldr	r1, [r3, #16]
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	689a      	ldr	r2, [r3, #8]
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	4603      	mov	r3, r0
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	4403      	add	r3, r0
 8000a84:	409a      	lsls	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d824      	bhi.n	8000ae0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685a      	ldr	r2, [r3, #4]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	4413      	add	r3, r2
 8000aa6:	3b05      	subs	r3, #5
 8000aa8:	221f      	movs	r2, #31
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	400a      	ands	r2, r1
 8000ab6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	4613      	mov	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4413      	add	r3, r2
 8000ad0:	3b05      	subs	r3, #5
 8000ad2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	430a      	orrs	r2, r1
 8000adc:	635a      	str	r2, [r3, #52]	; 0x34
 8000ade:	e04c      	b.n	8000b7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2b0c      	cmp	r3, #12
 8000ae6:	d824      	bhi.n	8000b32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685a      	ldr	r2, [r3, #4]
 8000af2:	4613      	mov	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	3b23      	subs	r3, #35	; 0x23
 8000afa:	221f      	movs	r2, #31
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	43da      	mvns	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	400a      	ands	r2, r1
 8000b08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	4413      	add	r3, r2
 8000b22:	3b23      	subs	r3, #35	; 0x23
 8000b24:	fa00 f203 	lsl.w	r2, r0, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b30:	e023      	b.n	8000b7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	3b41      	subs	r3, #65	; 0x41
 8000b44:	221f      	movs	r2, #31
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	400a      	ands	r2, r1
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	4618      	mov	r0, r3
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	4413      	add	r3, r2
 8000b6c:	3b41      	subs	r3, #65	; 0x41
 8000b6e:	fa00 f203 	lsl.w	r2, r0, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	430a      	orrs	r2, r1
 8000b78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b7a:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <HAL_ADC_ConfigChannel+0x234>)
 8000b7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a21      	ldr	r2, [pc, #132]	; (8000c08 <HAL_ADC_ConfigChannel+0x238>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d109      	bne.n	8000b9c <HAL_ADC_ConfigChannel+0x1cc>
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b12      	cmp	r3, #18
 8000b8e:	d105      	bne.n	8000b9c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a19      	ldr	r2, [pc, #100]	; (8000c08 <HAL_ADC_ConfigChannel+0x238>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d123      	bne.n	8000bee <HAL_ADC_ConfigChannel+0x21e>
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b10      	cmp	r3, #16
 8000bac:	d003      	beq.n	8000bb6 <HAL_ADC_ConfigChannel+0x1e6>
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b11      	cmp	r3, #17
 8000bb4:	d11b      	bne.n	8000bee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b10      	cmp	r3, #16
 8000bc8:	d111      	bne.n	8000bee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <HAL_ADC_ConfigChannel+0x23c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a10      	ldr	r2, [pc, #64]	; (8000c10 <HAL_ADC_ConfigChannel+0x240>)
 8000bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd4:	0c9a      	lsrs	r2, r3, #18
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	4413      	add	r3, r2
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000be0:	e002      	b.n	8000be8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1f9      	bne.n	8000be2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	40012300 	.word	0x40012300
 8000c08:	40012000 	.word	0x40012000
 8000c0c:	20000028 	.word	0x20000028
 8000c10:	431bde83 	.word	0x431bde83

08000c14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c1c:	4b79      	ldr	r3, [pc, #484]	; (8000e04 <ADC_Init+0x1f0>)
 8000c1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	431a      	orrs	r2, r3
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	6859      	ldr	r1, [r3, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	691b      	ldr	r3, [r3, #16]
 8000c54:	021a      	lsls	r2, r3, #8
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000c6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	6859      	ldr	r1, [r3, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	6899      	ldr	r1, [r3, #8]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68da      	ldr	r2, [r3, #12]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca6:	4a58      	ldr	r2, [pc, #352]	; (8000e08 <ADC_Init+0x1f4>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d022      	beq.n	8000cf2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000cba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	6899      	ldr	r1, [r3, #8]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	689a      	ldr	r2, [r3, #8]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	6899      	ldr	r1, [r3, #8]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	430a      	orrs	r2, r1
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	e00f      	b.n	8000d12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f022 0202 	bic.w	r2, r2, #2
 8000d20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	6899      	ldr	r1, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7e1b      	ldrb	r3, [r3, #24]
 8000d2c:	005a      	lsls	r2, r3, #1
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	430a      	orrs	r2, r1
 8000d34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d01b      	beq.n	8000d78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000d5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6859      	ldr	r1, [r3, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	035a      	lsls	r2, r3, #13
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	430a      	orrs	r2, r1
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	e007      	b.n	8000d88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000d96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	051a      	lsls	r2, r3, #20
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	430a      	orrs	r2, r1
 8000dac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000dbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6899      	ldr	r1, [r3, #8]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000dca:	025a      	lsls	r2, r3, #9
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000de2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6899      	ldr	r1, [r3, #8]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	029a      	lsls	r2, r3, #10
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	609a      	str	r2, [r3, #8]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	40012300 	.word	0x40012300
 8000e08:	0f000001 	.word	0x0f000001

08000e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <__NVIC_GetPriorityGrouping+0x18>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	f003 0307 	and.w	r3, r3, #7
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db0b      	blt.n	8000e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	4907      	ldr	r1, [pc, #28]	; (8000ea8 <__NVIC_EnableIRQ+0x38>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	2001      	movs	r0, #1
 8000e92:	fa00 f202 	lsl.w	r2, r0, r2
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	; (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	; 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f78:	d301      	bcc.n	8000f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00f      	b.n	8000f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <SysTick_Config+0x40>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f86:	210f      	movs	r1, #15
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f7ff ff8e 	bl	8000eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <SysTick_Config+0x40>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f96:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <SysTick_Config+0x40>)
 8000f98:	2207      	movs	r2, #7
 8000f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	e000e010 	.word	0xe000e010

08000fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff29 	bl	8000e0c <__NVIC_SetPriorityGrouping>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd4:	f7ff ff3e 	bl	8000e54 <__NVIC_GetPriorityGrouping>
 8000fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	6978      	ldr	r0, [r7, #20]
 8000fe0:	f7ff ff8e 	bl	8000f00 <NVIC_EncodePriority>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff5d 	bl	8000eac <__NVIC_SetPriority>
}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff31 	bl	8000e70 <__NVIC_EnableIRQ>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffa2 	bl	8000f68 <SysTick_Config>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	e16b      	b.n	8001324 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	429a      	cmp	r2, r3
 8001066:	f040 815a 	bne.w	800131e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x4a>
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b12      	cmp	r3, #18
 8001078:	d123      	bne.n	80010c2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	08da      	lsrs	r2, r3, #3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3208      	adds	r2, #8
 8001082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	691a      	ldr	r2, [r3, #16]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	08da      	lsrs	r2, r3, #3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	69b9      	ldr	r1, [r7, #24]
 80010be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0203 	and.w	r2, r3, #3
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d00b      	beq.n	8001116 <HAL_GPIO_Init+0xe6>
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d007      	beq.n	8001116 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800110a:	2b11      	cmp	r3, #17
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b12      	cmp	r3, #18
 8001114:	d130      	bne.n	8001178 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	2203      	movs	r2, #3
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	68da      	ldr	r2, [r3, #12]
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800114c:	2201      	movs	r2, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	091b      	lsrs	r3, r3, #4
 8001162:	f003 0201 	and.w	r2, r3, #1
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80b4 	beq.w	800131e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b5f      	ldr	r3, [pc, #380]	; (8001338 <HAL_GPIO_Init+0x308>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a5e      	ldr	r2, [pc, #376]	; (8001338 <HAL_GPIO_Init+0x308>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b5c      	ldr	r3, [pc, #368]	; (8001338 <HAL_GPIO_Init+0x308>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d2:	4a5a      	ldr	r2, [pc, #360]	; (800133c <HAL_GPIO_Init+0x30c>)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a51      	ldr	r2, [pc, #324]	; (8001340 <HAL_GPIO_Init+0x310>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d02b      	beq.n	8001256 <HAL_GPIO_Init+0x226>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a50      	ldr	r2, [pc, #320]	; (8001344 <HAL_GPIO_Init+0x314>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d025      	beq.n	8001252 <HAL_GPIO_Init+0x222>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4f      	ldr	r2, [pc, #316]	; (8001348 <HAL_GPIO_Init+0x318>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d01f      	beq.n	800124e <HAL_GPIO_Init+0x21e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4e      	ldr	r2, [pc, #312]	; (800134c <HAL_GPIO_Init+0x31c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d019      	beq.n	800124a <HAL_GPIO_Init+0x21a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4d      	ldr	r2, [pc, #308]	; (8001350 <HAL_GPIO_Init+0x320>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d013      	beq.n	8001246 <HAL_GPIO_Init+0x216>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4c      	ldr	r2, [pc, #304]	; (8001354 <HAL_GPIO_Init+0x324>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d00d      	beq.n	8001242 <HAL_GPIO_Init+0x212>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4b      	ldr	r2, [pc, #300]	; (8001358 <HAL_GPIO_Init+0x328>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d007      	beq.n	800123e <HAL_GPIO_Init+0x20e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4a      	ldr	r2, [pc, #296]	; (800135c <HAL_GPIO_Init+0x32c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d101      	bne.n	800123a <HAL_GPIO_Init+0x20a>
 8001236:	2307      	movs	r3, #7
 8001238:	e00e      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800123a:	2308      	movs	r3, #8
 800123c:	e00c      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800123e:	2306      	movs	r3, #6
 8001240:	e00a      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001242:	2305      	movs	r3, #5
 8001244:	e008      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001246:	2304      	movs	r3, #4
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800124a:	2303      	movs	r3, #3
 800124c:	e004      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800124e:	2302      	movs	r3, #2
 8001250:	e002      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001256:	2300      	movs	r3, #0
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	f002 0203 	and.w	r2, r2, #3
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4093      	lsls	r3, r2
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001268:	4934      	ldr	r1, [pc, #208]	; (800133c <HAL_GPIO_Init+0x30c>)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001276:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <HAL_GPIO_Init+0x330>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800129a:	4a31      	ldr	r2, [pc, #196]	; (8001360 <HAL_GPIO_Init+0x330>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012a0:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <HAL_GPIO_Init+0x330>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c4:	4a26      	ldr	r2, [pc, #152]	; (8001360 <HAL_GPIO_Init+0x330>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <HAL_GPIO_Init+0x330>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ee:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <HAL_GPIO_Init+0x330>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_GPIO_Init+0x330>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001318:	4a11      	ldr	r2, [pc, #68]	; (8001360 <HAL_GPIO_Init+0x330>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3301      	adds	r3, #1
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	2b0f      	cmp	r3, #15
 8001328:	f67f ae90 	bls.w	800104c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800132c:	bf00      	nop
 800132e:	3724      	adds	r7, #36	; 0x24
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	40023800 	.word	0x40023800
 800133c:	40013800 	.word	0x40013800
 8001340:	40020000 	.word	0x40020000
 8001344:	40020400 	.word	0x40020400
 8001348:	40020800 	.word	0x40020800
 800134c:	40020c00 	.word	0x40020c00
 8001350:	40021000 	.word	0x40021000
 8001354:	40021400 	.word	0x40021400
 8001358:	40021800 	.word	0x40021800
 800135c:	40021c00 	.word	0x40021c00
 8001360:	40013c00 	.word	0x40013c00

08001364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
 8001370:	4613      	mov	r3, r2
 8001372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001374:	787b      	ldrb	r3, [r7, #1]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001380:	e003      	b.n	800138a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	041a      	lsls	r2, r3, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	619a      	str	r2, [r3, #24]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001396:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001398:	b08f      	sub	sp, #60	; 0x3c
 800139a:	af0a      	add	r7, sp, #40	; 0x28
 800139c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e054      	b.n	8001452 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d106      	bne.n	80013c8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f006 fefc 	bl	80081c0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2203      	movs	r2, #3
 80013cc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f003 fb82 	bl	8004af0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	687e      	ldr	r6, [r7, #4]
 80013f4:	466d      	mov	r5, sp
 80013f6:	f106 0410 	add.w	r4, r6, #16
 80013fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001402:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001406:	e885 0003 	stmia.w	r5, {r0, r1}
 800140a:	1d33      	adds	r3, r6, #4
 800140c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800140e:	6838      	ldr	r0, [r7, #0]
 8001410:	f003 fafc 	bl	8004a0c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2101      	movs	r1, #1
 800141a:	4618      	mov	r0, r3
 800141c:	f003 fb79 	bl	8004b12 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	687e      	ldr	r6, [r7, #4]
 8001428:	466d      	mov	r5, sp
 800142a:	f106 0410 	add.w	r4, r6, #16
 800142e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001436:	e894 0003 	ldmia.w	r4, {r0, r1}
 800143a:	e885 0003 	stmia.w	r5, {r0, r1}
 800143e:	1d33      	adds	r3, r6, #4
 8001440:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001442:	6838      	ldr	r0, [r7, #0]
 8001444:	f003 fc8c 	bl	8004d60 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800145a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800145a:	b590      	push	{r4, r7, lr}
 800145c:	b089      	sub	sp, #36	; 0x24
 800145e:	af04      	add	r7, sp, #16
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	4608      	mov	r0, r1
 8001464:	4611      	mov	r1, r2
 8001466:	461a      	mov	r2, r3
 8001468:	4603      	mov	r3, r0
 800146a:	70fb      	strb	r3, [r7, #3]
 800146c:	460b      	mov	r3, r1
 800146e:	70bb      	strb	r3, [r7, #2]
 8001470:	4613      	mov	r3, r2
 8001472:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800147a:	2b01      	cmp	r3, #1
 800147c:	d101      	bne.n	8001482 <HAL_HCD_HC_Init+0x28>
 800147e:	2302      	movs	r3, #2
 8001480:	e07f      	b.n	8001582 <HAL_HCD_HC_Init+0x128>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800148a:	78fa      	ldrb	r2, [r7, #3]
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	440b      	add	r3, r1
 8001498:	333d      	adds	r3, #61	; 0x3d
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800149e:	78fa      	ldrb	r2, [r7, #3]
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	440b      	add	r3, r1
 80014ac:	3338      	adds	r3, #56	; 0x38
 80014ae:	787a      	ldrb	r2, [r7, #1]
 80014b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80014b2:	78fa      	ldrb	r2, [r7, #3]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	440b      	add	r3, r1
 80014c0:	3340      	adds	r3, #64	; 0x40
 80014c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014c4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014c6:	78fa      	ldrb	r2, [r7, #3]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	440b      	add	r3, r1
 80014d4:	3339      	adds	r3, #57	; 0x39
 80014d6:	78fa      	ldrb	r2, [r7, #3]
 80014d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014da:	78fa      	ldrb	r2, [r7, #3]
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	440b      	add	r3, r1
 80014e8:	333f      	adds	r3, #63	; 0x3f
 80014ea:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014f0:	78fa      	ldrb	r2, [r7, #3]
 80014f2:	78bb      	ldrb	r3, [r7, #2]
 80014f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014f8:	b2d8      	uxtb	r0, r3
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	440b      	add	r3, r1
 8001506:	333a      	adds	r3, #58	; 0x3a
 8001508:	4602      	mov	r2, r0
 800150a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800150c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001510:	2b00      	cmp	r3, #0
 8001512:	da0a      	bge.n	800152a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001514:	78fa      	ldrb	r2, [r7, #3]
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	440b      	add	r3, r1
 8001522:	333b      	adds	r3, #59	; 0x3b
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
 8001528:	e009      	b.n	800153e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800152a:	78fa      	ldrb	r2, [r7, #3]
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	333b      	adds	r3, #59	; 0x3b
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800153e:	78fa      	ldrb	r2, [r7, #3]
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	440b      	add	r3, r1
 800154c:	333c      	adds	r3, #60	; 0x3c
 800154e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001552:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	787c      	ldrb	r4, [r7, #1]
 800155a:	78ba      	ldrb	r2, [r7, #2]
 800155c:	78f9      	ldrb	r1, [r7, #3]
 800155e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001560:	9302      	str	r3, [sp, #8]
 8001562:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	f897 3020 	ldrb.w	r3, [r7, #32]
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	4623      	mov	r3, r4
 8001570:	f003 fd78 	bl	8005064 <USB_HC_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001580:	7bfb      	ldrb	r3, [r7, #15]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}

0800158a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b084      	sub	sp, #16
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	460b      	mov	r3, r1
 8001594:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d101      	bne.n	80015a8 <HAL_HCD_HC_Halt+0x1e>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e00f      	b.n	80015c8 <HAL_HCD_HC_Halt+0x3e>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	78fa      	ldrb	r2, [r7, #3]
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f003 ffb2 	bl	8005522 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	4608      	mov	r0, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	70fb      	strb	r3, [r7, #3]
 80015e2:	460b      	mov	r3, r1
 80015e4:	70bb      	strb	r3, [r7, #2]
 80015e6:	4613      	mov	r3, r2
 80015e8:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80015ea:	78fa      	ldrb	r2, [r7, #3]
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	440b      	add	r3, r1
 80015f8:	333b      	adds	r3, #59	; 0x3b
 80015fa:	78ba      	ldrb	r2, [r7, #2]
 80015fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80015fe:	78fa      	ldrb	r2, [r7, #3]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	440b      	add	r3, r1
 800160c:	333f      	adds	r3, #63	; 0x3f
 800160e:	787a      	ldrb	r2, [r7, #1]
 8001610:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001612:	7c3b      	ldrb	r3, [r7, #16]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10a      	bne.n	800162e <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001618:	78fa      	ldrb	r2, [r7, #3]
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	440b      	add	r3, r1
 8001626:	3342      	adds	r3, #66	; 0x42
 8001628:	2203      	movs	r2, #3
 800162a:	701a      	strb	r2, [r3, #0]
 800162c:	e009      	b.n	8001642 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800162e:	78fa      	ldrb	r2, [r7, #3]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	440b      	add	r3, r1
 800163c:	3342      	adds	r3, #66	; 0x42
 800163e:	2202      	movs	r2, #2
 8001640:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001642:	787b      	ldrb	r3, [r7, #1]
 8001644:	2b03      	cmp	r3, #3
 8001646:	f200 80d6 	bhi.w	80017f6 <HAL_HCD_HC_SubmitRequest+0x226>
 800164a:	a201      	add	r2, pc, #4	; (adr r2, 8001650 <HAL_HCD_HC_SubmitRequest+0x80>)
 800164c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001650:	08001661 	.word	0x08001661
 8001654:	080017e1 	.word	0x080017e1
 8001658:	080016cd 	.word	0x080016cd
 800165c:	08001757 	.word	0x08001757
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001660:	7c3b      	ldrb	r3, [r7, #16]
 8001662:	2b01      	cmp	r3, #1
 8001664:	f040 80c9 	bne.w	80017fa <HAL_HCD_HC_SubmitRequest+0x22a>
 8001668:	78bb      	ldrb	r3, [r7, #2]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f040 80c5 	bne.w	80017fa <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001670:	8b3b      	ldrh	r3, [r7, #24]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d109      	bne.n	800168a <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001676:	78fa      	ldrb	r2, [r7, #3]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	440b      	add	r3, r1
 8001684:	3351      	adds	r3, #81	; 0x51
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800168a:	78fa      	ldrb	r2, [r7, #3]
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	440b      	add	r3, r1
 8001698:	3351      	adds	r3, #81	; 0x51
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10a      	bne.n	80016b6 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016a0:	78fa      	ldrb	r2, [r7, #3]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	3342      	adds	r3, #66	; 0x42
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016b4:	e0a1      	b.n	80017fa <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016b6:	78fa      	ldrb	r2, [r7, #3]
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	440b      	add	r3, r1
 80016c4:	3342      	adds	r3, #66	; 0x42
 80016c6:	2202      	movs	r2, #2
 80016c8:	701a      	strb	r2, [r3, #0]
      break;
 80016ca:	e096      	b.n	80017fa <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80016cc:	78bb      	ldrb	r3, [r7, #2]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d120      	bne.n	8001714 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016d2:	78fa      	ldrb	r2, [r7, #3]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	3351      	adds	r3, #81	; 0x51
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10a      	bne.n	80016fe <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016e8:	78fa      	ldrb	r2, [r7, #3]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	440b      	add	r3, r1
 80016f6:	3342      	adds	r3, #66	; 0x42
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80016fc:	e07e      	b.n	80017fc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016fe:	78fa      	ldrb	r2, [r7, #3]
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	440b      	add	r3, r1
 800170c:	3342      	adds	r3, #66	; 0x42
 800170e:	2202      	movs	r2, #2
 8001710:	701a      	strb	r2, [r3, #0]
      break;
 8001712:	e073      	b.n	80017fc <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001714:	78fa      	ldrb	r2, [r7, #3]
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	440b      	add	r3, r1
 8001722:	3350      	adds	r3, #80	; 0x50
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10a      	bne.n	8001740 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800172a:	78fa      	ldrb	r2, [r7, #3]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	3342      	adds	r3, #66	; 0x42
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
      break;
 800173e:	e05d      	b.n	80017fc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001740:	78fa      	ldrb	r2, [r7, #3]
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	440b      	add	r3, r1
 800174e:	3342      	adds	r3, #66	; 0x42
 8001750:	2202      	movs	r2, #2
 8001752:	701a      	strb	r2, [r3, #0]
      break;
 8001754:	e052      	b.n	80017fc <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001756:	78bb      	ldrb	r3, [r7, #2]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d120      	bne.n	800179e <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800175c:	78fa      	ldrb	r2, [r7, #3]
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	440b      	add	r3, r1
 800176a:	3351      	adds	r3, #81	; 0x51
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10a      	bne.n	8001788 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	440b      	add	r3, r1
 8001780:	3342      	adds	r3, #66	; 0x42
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001786:	e039      	b.n	80017fc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001788:	78fa      	ldrb	r2, [r7, #3]
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	440b      	add	r3, r1
 8001796:	3342      	adds	r3, #66	; 0x42
 8001798:	2202      	movs	r2, #2
 800179a:	701a      	strb	r2, [r3, #0]
      break;
 800179c:	e02e      	b.n	80017fc <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800179e:	78fa      	ldrb	r2, [r7, #3]
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	440b      	add	r3, r1
 80017ac:	3350      	adds	r3, #80	; 0x50
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10a      	bne.n	80017ca <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017b4:	78fa      	ldrb	r2, [r7, #3]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	3342      	adds	r3, #66	; 0x42
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
      break;
 80017c8:	e018      	b.n	80017fc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ca:	78fa      	ldrb	r2, [r7, #3]
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	440b      	add	r3, r1
 80017d8:	3342      	adds	r3, #66	; 0x42
 80017da:	2202      	movs	r2, #2
 80017dc:	701a      	strb	r2, [r3, #0]
      break;
 80017de:	e00d      	b.n	80017fc <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017e0:	78fa      	ldrb	r2, [r7, #3]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	440b      	add	r3, r1
 80017ee:	3342      	adds	r3, #66	; 0x42
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
      break;
 80017f4:	e002      	b.n	80017fc <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80017f6:	bf00      	nop
 80017f8:	e000      	b.n	80017fc <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80017fa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017fc:	78fa      	ldrb	r2, [r7, #3]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	440b      	add	r3, r1
 800180a:	3344      	adds	r3, #68	; 0x44
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001810:	78fa      	ldrb	r2, [r7, #3]
 8001812:	8b39      	ldrh	r1, [r7, #24]
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4403      	add	r3, r0
 8001820:	3348      	adds	r3, #72	; 0x48
 8001822:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001824:	78fa      	ldrb	r2, [r7, #3]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	335c      	adds	r3, #92	; 0x5c
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001838:	78fa      	ldrb	r2, [r7, #3]
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	334c      	adds	r3, #76	; 0x4c
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	3339      	adds	r3, #57	; 0x39
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	335d      	adds	r3, #93	; 0x5d
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6818      	ldr	r0, [r3, #0]
 8001878:	78fa      	ldrb	r2, [r7, #3]
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	3338      	adds	r3, #56	; 0x38
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	18d1      	adds	r1, r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	f003 fcf2 	bl	8005278 <USB_HC_StartXfer>
 8001894:	4603      	mov	r3, r0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop

080018a0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 fa0f 	bl	8004cda <USB_GetMode>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b01      	cmp	r3, #1
 80018c0:	f040 80f1 	bne.w	8001aa6 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f003 f9f3 	bl	8004cb4 <USB_ReadInterrupts>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80e7 	beq.w	8001aa4 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 f9ea 	bl	8004cb4 <USB_ReadInterrupts>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018ea:	d104      	bne.n	80018f6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 f9da 	bl	8004cb4 <USB_ReadInterrupts>
 8001900:	4603      	mov	r3, r0
 8001902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800190a:	d104      	bne.n	8001916 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001914:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f003 f9ca 	bl	8004cb4 <USB_ReadInterrupts>
 8001920:	4603      	mov	r3, r0
 8001922:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001926:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800192a:	d104      	bne.n	8001936 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001934:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f003 f9ba 	bl	8004cb4 <USB_ReadInterrupts>
 8001940:	4603      	mov	r3, r0
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b02      	cmp	r3, #2
 8001948:	d103      	bne.n	8001952 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2202      	movs	r2, #2
 8001950:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f003 f9ac 	bl	8004cb4 <USB_ReadInterrupts>
 800195c:	4603      	mov	r3, r0
 800195e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001962:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001966:	d117      	bne.n	8001998 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001976:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800197a:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f006 fc9d 	bl	80082bc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2101      	movs	r1, #1
 8001988:	4618      	mov	r0, r3
 800198a:	f003 faa5 	bl	8004ed8 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001996:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f003 f989 	bl	8004cb4 <USB_ReadInterrupts>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ac:	d102      	bne.n	80019b4 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f001 f8c8 	bl	8002b44 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 f97b 	bl	8004cb4 <USB_ReadInterrupts>
 80019be:	4603      	mov	r3, r0
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d106      	bne.n	80019d6 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f006 fc5b 	bl	8008284 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2208      	movs	r2, #8
 80019d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f003 f96a 	bl	8004cb4 <USB_ReadInterrupts>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019ea:	d138      	bne.n	8001a5e <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f003 fd85 	bl	8005500 <USB_HC_ReadInterrupt>
 80019f6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	e025      	b.n	8001a4a <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f003 030f 	and.w	r3, r3, #15
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d018      	beq.n	8001a44 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	015a      	lsls	r2, r3, #5
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4413      	add	r3, r2
 8001a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a28:	d106      	bne.n	8001a38 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f8cf 	bl	8001bd4 <HCD_HC_IN_IRQHandler>
 8001a36:	e005      	b.n	8001a44 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 fc5f 	bl	8002302 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d3d4      	bcc.n	80019fe <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 f926 	bl	8004cb4 <USB_ReadInterrupts>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f003 0310 	and.w	r3, r3, #16
 8001a6e:	2b10      	cmp	r3, #16
 8001a70:	d101      	bne.n	8001a76 <HAL_HCD_IRQHandler+0x1d6>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <HAL_HCD_IRQHandler+0x1d8>
 8001a76:	2300      	movs	r3, #0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d014      	beq.n	8001aa6 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699a      	ldr	r2, [r3, #24]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0210 	bic.w	r2, r2, #16
 8001a8a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 ffad 	bl	80029ec <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	699a      	ldr	r2, [r3, #24]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 0210 	orr.w	r2, r2, #16
 8001aa0:	619a      	str	r2, [r3, #24]
 8001aa2:	e000      	b.n	8001aa6 <HAL_HCD_IRQHandler+0x206>
      return;
 8001aa4:	bf00      	nop
    }
  }
}
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_HCD_Start+0x16>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e013      	b.n	8001aea <HAL_HCD_Start+0x3e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f002 fffd 	bl	8004ace <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 fa60 	bl	8004fa0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_HCD_Stop+0x16>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e00d      	b.n	8001b24 <HAL_HCD_Stop+0x32>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f003 fe3f 	bl	8005798 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f003 fa07 	bl	8004f4c <USB_ResetPort>
 8001b3e:	4603      	mov	r3, r0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b54:	78fa      	ldrb	r2, [r7, #3]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	335c      	adds	r3, #92	; 0x5c
 8001b64:	781b      	ldrb	r3, [r3, #0]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b7e:	78fa      	ldrb	r2, [r7, #3]
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	440b      	add	r3, r1
 8001b8c:	334c      	adds	r3, #76	; 0x4c
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 fa49 	bl	8005040 <USB_GetCurrentFrame>
 8001bae:	4603      	mov	r3, r0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 fa24 	bl	8005012 <USB_GetHostSpeed>
 8001bca:	4603      	mov	r3, r0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	015a      	lsls	r2, r3, #5
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d119      	bne.n	8001c38 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	015a      	lsls	r2, r3, #5
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c10:	461a      	mov	r2, r3
 8001c12:	2304      	movs	r3, #4
 8001c14:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	015a      	lsls	r2, r3, #5
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	0151      	lsls	r1, r2, #5
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	440a      	add	r2, r1
 8001c2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	60d3      	str	r3, [r2, #12]
 8001c36:	e095      	b.n	8001d64 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	015a      	lsls	r2, r3, #5
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 0320 	and.w	r3, r3, #32
 8001c4a:	2b20      	cmp	r3, #32
 8001c4c:	d109      	bne.n	8001c62 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2320      	movs	r3, #32
 8001c5e:	6093      	str	r3, [r2, #8]
 8001c60:	e080      	b.n	8001d64 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	015a      	lsls	r2, r3, #5
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4413      	add	r3, r2
 8001c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d134      	bne.n	8001ce2 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	015a      	lsls	r2, r3, #5
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4413      	add	r3, r2
 8001c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	0151      	lsls	r1, r2, #5
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	440a      	add	r2, r1
 8001c8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c92:	f043 0302 	orr.w	r3, r3, #2
 8001c96:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	440b      	add	r3, r1
 8001ca6:	335d      	adds	r3, #93	; 0x5d
 8001ca8:	2205      	movs	r2, #5
 8001caa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	015a      	lsls	r2, r3, #5
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb8:	461a      	mov	r2, r3
 8001cba:	2310      	movs	r3, #16
 8001cbc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	015a      	lsls	r2, r3, #5
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cca:	461a      	mov	r2, r3
 8001ccc:	2308      	movs	r3, #8
 8001cce:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	4611      	mov	r1, r2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f003 fc21 	bl	8005522 <USB_HC_Halt>
 8001ce0:	e040      	b.n	8001d64 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf8:	d134      	bne.n	8001d64 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	0151      	lsls	r1, r2, #5
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	440a      	add	r2, r1
 8001d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 fbfc 	bl	8005522 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	015a      	lsls	r2, r3, #5
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4413      	add	r3, r2
 8001d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d36:	461a      	mov	r2, r3
 8001d38:	2310      	movs	r3, #16
 8001d3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	440b      	add	r3, r1
 8001d4a:	335d      	adds	r3, #93	; 0x5d
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	015a      	lsls	r2, r3, #5
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d62:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	015a      	lsls	r2, r3, #5
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d7a:	d122      	bne.n	8001dc2 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	015a      	lsls	r2, r3, #5
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	0151      	lsls	r1, r2, #5
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	440a      	add	r2, r1
 8001d92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d96:	f043 0302 	orr.w	r3, r3, #2
 8001d9a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	4611      	mov	r1, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f003 fbbb 	bl	8005522 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	015a      	lsls	r2, r3, #5
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4413      	add	r3, r2
 8001db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db8:	461a      	mov	r2, r3
 8001dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dbe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001dc0:	e29b      	b.n	80022fa <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	f040 80c1 	bne.w	8001f5c <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d01b      	beq.n	8001e1a <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	3348      	adds	r3, #72	; 0x48
 8001df2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	0159      	lsls	r1, r3, #5
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e06:	1ad1      	subs	r1, r2, r3
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4403      	add	r3, r0
 8001e16:	334c      	adds	r3, #76	; 0x4c
 8001e18:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	440b      	add	r3, r1
 8001e28:	335d      	adds	r3, #93	; 0x5d
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	440b      	add	r3, r1
 8001e3c:	3358      	adds	r3, #88	; 0x58
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	015a      	lsls	r2, r3, #5
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4e:	461a      	mov	r2, r3
 8001e50:	2301      	movs	r3, #1
 8001e52:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	440b      	add	r3, r1
 8001e62:	333f      	adds	r3, #63	; 0x3f
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00a      	beq.n	8001e80 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	440b      	add	r3, r1
 8001e78:	333f      	adds	r3, #63	; 0x3f
 8001e7a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d121      	bne.n	8001ec4 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	0151      	lsls	r1, r2, #5
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	440a      	add	r2, r1
 8001e96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e9a:	f043 0302 	orr.w	r3, r3, #2
 8001e9e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 fb39 	bl	8005522 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	2310      	movs	r3, #16
 8001ec0:	6093      	str	r3, [r2, #8]
 8001ec2:	e034      	b.n	8001f2e <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	440b      	add	r3, r1
 8001ed2:	333f      	adds	r3, #63	; 0x3f
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d129      	bne.n	8001f2e <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	0151      	lsls	r1, r2, #5
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	440a      	add	r2, r1
 8001ef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ef4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ef8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	440b      	add	r3, r1
 8001f08:	335c      	adds	r3, #92	; 0x5c
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	b2d8      	uxtb	r0, r3
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	335c      	adds	r3, #92	; 0x5c
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4601      	mov	r1, r0
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f006 f9d5 	bl	80082d8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	440b      	add	r3, r1
 8001f3c:	3350      	adds	r3, #80	; 0x50
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	f083 0301 	eor.w	r3, r3, #1
 8001f44:	b2d8      	uxtb	r0, r3
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	3350      	adds	r3, #80	; 0x50
 8001f56:	4602      	mov	r2, r0
 8001f58:	701a      	strb	r2, [r3, #0]
}
 8001f5a:	e1ce      	b.n	80022fa <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	f040 80f1 	bne.w	8002156 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	0151      	lsls	r1, r2, #5
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	440a      	add	r2, r1
 8001f8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f8e:	f023 0302 	bic.w	r3, r3, #2
 8001f92:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	440b      	add	r3, r1
 8001fa2:	335d      	adds	r3, #93	; 0x5d
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d10a      	bne.n	8001fc0 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	440b      	add	r3, r1
 8001fb8:	335c      	adds	r3, #92	; 0x5c
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
 8001fbe:	e0b0      	b.n	8002122 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	440b      	add	r3, r1
 8001fce:	335d      	adds	r3, #93	; 0x5d
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b05      	cmp	r3, #5
 8001fd4:	d10a      	bne.n	8001fec <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	440b      	add	r3, r1
 8001fe4:	335c      	adds	r3, #92	; 0x5c
 8001fe6:	2205      	movs	r2, #5
 8001fe8:	701a      	strb	r2, [r3, #0]
 8001fea:	e09a      	b.n	8002122 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	440b      	add	r3, r1
 8001ffa:	335d      	adds	r3, #93	; 0x5d
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d00a      	beq.n	8002018 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	335d      	adds	r3, #93	; 0x5d
 8002012:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002014:	2b08      	cmp	r3, #8
 8002016:	d156      	bne.n	80020c6 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	440b      	add	r3, r1
 8002026:	3358      	adds	r3, #88	; 0x58
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	1c59      	adds	r1, r3, #1
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4403      	add	r3, r0
 800203a:	3358      	adds	r3, #88	; 0x58
 800203c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	440b      	add	r3, r1
 800204c:	3358      	adds	r3, #88	; 0x58
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b03      	cmp	r3, #3
 8002052:	d914      	bls.n	800207e <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	440b      	add	r3, r1
 8002062:	3358      	adds	r3, #88	; 0x58
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	440b      	add	r3, r1
 8002076:	335c      	adds	r3, #92	; 0x5c
 8002078:	2204      	movs	r2, #4
 800207a:	701a      	strb	r2, [r3, #0]
 800207c:	e009      	b.n	8002092 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	440b      	add	r3, r1
 800208c:	335c      	adds	r3, #92	; 0x5c
 800208e:	2202      	movs	r2, #2
 8002090:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020a8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020b0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020be:	461a      	mov	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	e02d      	b.n	8002122 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	440b      	add	r3, r1
 80020d4:	335d      	adds	r3, #93	; 0x5d
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d122      	bne.n	8002122 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	440b      	add	r3, r1
 80020ea:	335c      	adds	r3, #92	; 0x5c
 80020ec:	2202      	movs	r2, #2
 80020ee:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002106:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800210e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	015a      	lsls	r2, r3, #5
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4413      	add	r3, r2
 8002118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211c:	461a      	mov	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4413      	add	r3, r2
 800212a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212e:	461a      	mov	r2, r3
 8002130:	2302      	movs	r3, #2
 8002132:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	b2d8      	uxtb	r0, r3
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	440b      	add	r3, r1
 8002146:	335c      	adds	r3, #92	; 0x5c
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	4601      	mov	r1, r0
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f006 f8c2 	bl	80082d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002154:	e0d1      	b.n	80022fa <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4413      	add	r3, r2
 800215e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002168:	2b80      	cmp	r3, #128	; 0x80
 800216a:	d13e      	bne.n	80021ea <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	015a      	lsls	r2, r3, #5
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4413      	add	r3, r2
 8002174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	0151      	lsls	r1, r2, #5
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	440a      	add	r2, r1
 8002182:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002186:	f043 0302 	orr.w	r3, r3, #2
 800218a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	440b      	add	r3, r1
 800219a:	3358      	adds	r3, #88	; 0x58
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	1c59      	adds	r1, r3, #1
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4403      	add	r3, r0
 80021ae:	3358      	adds	r3, #88	; 0x58
 80021b0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	440b      	add	r3, r1
 80021c0:	335d      	adds	r3, #93	; 0x5d
 80021c2:	2206      	movs	r2, #6
 80021c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f003 f9a6 	bl	8005522 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e2:	461a      	mov	r2, r3
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	6093      	str	r3, [r2, #8]
}
 80021e8:	e087      	b.n	80022fa <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d17c      	bne.n	80022fa <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	440b      	add	r3, r1
 800220e:	333f      	adds	r3, #63	; 0x3f
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b03      	cmp	r3, #3
 8002214:	d122      	bne.n	800225c <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	440b      	add	r3, r1
 8002224:	3358      	adds	r3, #88	; 0x58
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4413      	add	r3, r2
 8002232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	0151      	lsls	r1, r2, #5
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	440a      	add	r2, r1
 8002240:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002244:	f043 0302 	orr.w	r3, r3, #2
 8002248:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	4611      	mov	r1, r2
 8002254:	4618      	mov	r0, r3
 8002256:	f003 f964 	bl	8005522 <USB_HC_Halt>
 800225a:	e045      	b.n	80022e8 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	440b      	add	r3, r1
 800226a:	333f      	adds	r3, #63	; 0x3f
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	440b      	add	r3, r1
 8002280:	333f      	adds	r3, #63	; 0x3f
 8002282:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002284:	2b02      	cmp	r3, #2
 8002286:	d12f      	bne.n	80022e8 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	440b      	add	r3, r1
 8002296:	3358      	adds	r3, #88	; 0x58
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d121      	bne.n	80022e8 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	335d      	adds	r3, #93	; 0x5d
 80022b4:	2203      	movs	r2, #3
 80022b6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	0151      	lsls	r1, r2, #5
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	440a      	add	r2, r1
 80022ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022d2:	f043 0302 	orr.w	r3, r3, #2
 80022d6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	4611      	mov	r1, r2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f003 f91d 	bl	8005522 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	015a      	lsls	r2, r3, #5
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f4:	461a      	mov	r2, r3
 80022f6:	2310      	movs	r3, #16
 80022f8:	6093      	str	r3, [r2, #8]
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4413      	add	r3, r2
 8002324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	2b04      	cmp	r3, #4
 8002330:	d119      	bne.n	8002366 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	461a      	mov	r2, r3
 8002340:	2304      	movs	r3, #4
 8002342:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	015a      	lsls	r2, r3, #5
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4413      	add	r3, r2
 800234c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	0151      	lsls	r1, r2, #5
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	440a      	add	r2, r1
 800235a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800235e:	f043 0302 	orr.w	r3, r3, #2
 8002362:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002364:	e33e      	b.n	80029e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	015a      	lsls	r2, r3, #5
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4413      	add	r3, r2
 800236e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0320 	and.w	r3, r3, #32
 8002378:	2b20      	cmp	r3, #32
 800237a:	d141      	bne.n	8002400 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002388:	461a      	mov	r2, r3
 800238a:	2320      	movs	r3, #32
 800238c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	440b      	add	r3, r1
 800239c:	333d      	adds	r3, #61	; 0x3d
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	f040 831f 	bne.w	80029e4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	333d      	adds	r3, #61	; 0x3d
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	440b      	add	r3, r1
 80023c8:	335c      	adds	r3, #92	; 0x5c
 80023ca:	2202      	movs	r2, #2
 80023cc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	0151      	lsls	r1, r2, #5
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	440a      	add	r2, r1
 80023e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023e8:	f043 0302 	orr.w	r3, r3, #2
 80023ec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f003 f892 	bl	8005522 <USB_HC_Halt>
}
 80023fe:	e2f1      	b.n	80029e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4413      	add	r3, r2
 8002408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002412:	2b40      	cmp	r3, #64	; 0x40
 8002414:	d13f      	bne.n	8002496 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	440b      	add	r3, r1
 8002424:	335d      	adds	r3, #93	; 0x5d
 8002426:	2204      	movs	r2, #4
 8002428:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	440b      	add	r3, r1
 8002438:	333d      	adds	r3, #61	; 0x3d
 800243a:	2201      	movs	r2, #1
 800243c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	440b      	add	r3, r1
 800244c:	3358      	adds	r3, #88	; 0x58
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4413      	add	r3, r2
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	0151      	lsls	r1, r2, #5
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	440a      	add	r2, r1
 8002468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f003 f850 	bl	8005522 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4413      	add	r3, r2
 800248a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248e:	461a      	mov	r2, r3
 8002490:	2340      	movs	r3, #64	; 0x40
 8002492:	6093      	str	r3, [r2, #8]
}
 8002494:	e2a6      	b.n	80029e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4413      	add	r3, r2
 800249e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ac:	d122      	bne.n	80024f4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	0151      	lsls	r1, r2, #5
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	440a      	add	r2, r1
 80024c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	4611      	mov	r1, r2
 80024d8:	4618      	mov	r0, r3
 80024da:	f003 f822 	bl	8005522 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ea:	461a      	mov	r2, r3
 80024ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024f0:	6093      	str	r3, [r2, #8]
}
 80024f2:	e277      	b.n	80029e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b01      	cmp	r3, #1
 8002508:	d135      	bne.n	8002576 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	440b      	add	r3, r1
 8002518:	3358      	adds	r3, #88	; 0x58
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4413      	add	r3, r2
 8002526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	0151      	lsls	r1, r2, #5
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	440a      	add	r2, r1
 8002534:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f002 ffea 	bl	8005522 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4413      	add	r3, r2
 8002556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255a:	461a      	mov	r2, r3
 800255c:	2301      	movs	r3, #1
 800255e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	440b      	add	r3, r1
 800256e:	335d      	adds	r3, #93	; 0x5d
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
}
 8002574:	e236      	b.n	80029e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4413      	add	r3, r2
 800257e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b08      	cmp	r3, #8
 800258a:	d12b      	bne.n	80025e4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	461a      	mov	r2, r3
 800259a:	2308      	movs	r3, #8
 800259c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	0151      	lsls	r1, r2, #5
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	440a      	add	r2, r1
 80025b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025b8:	f043 0302 	orr.w	r3, r3, #2
 80025bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f002 ffaa 	bl	8005522 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	440b      	add	r3, r1
 80025dc:	335d      	adds	r3, #93	; 0x5d
 80025de:	2205      	movs	r2, #5
 80025e0:	701a      	strb	r2, [r3, #0]
}
 80025e2:	e1ff      	b.n	80029e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b10      	cmp	r3, #16
 80025f8:	d155      	bne.n	80026a6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	440b      	add	r3, r1
 8002608:	3358      	adds	r3, #88	; 0x58
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	440b      	add	r3, r1
 800261c:	335d      	adds	r3, #93	; 0x5d
 800261e:	2203      	movs	r2, #3
 8002620:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	440b      	add	r3, r1
 8002630:	333d      	adds	r3, #61	; 0x3d
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d114      	bne.n	8002662 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	440b      	add	r3, r1
 8002646:	333c      	adds	r3, #60	; 0x3c
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	440b      	add	r3, r1
 800265c:	333d      	adds	r3, #61	; 0x3d
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4413      	add	r3, r2
 800266a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	0151      	lsls	r1, r2, #5
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	440a      	add	r2, r1
 8002678:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800267c:	f043 0302 	orr.w	r3, r3, #2
 8002680:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f002 ff48 	bl	8005522 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4413      	add	r3, r2
 800269a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269e:	461a      	mov	r2, r3
 80026a0:	2310      	movs	r3, #16
 80026a2:	6093      	str	r3, [r2, #8]
}
 80026a4:	e19e      	b.n	80029e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b8:	2b80      	cmp	r3, #128	; 0x80
 80026ba:	d12b      	bne.n	8002714 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	0151      	lsls	r1, r2, #5
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	440a      	add	r2, r1
 80026d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026d6:	f043 0302 	orr.w	r3, r3, #2
 80026da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f002 ff1b 	bl	8005522 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	440b      	add	r3, r1
 80026fa:	335d      	adds	r3, #93	; 0x5d
 80026fc:	2206      	movs	r2, #6
 80026fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	461a      	mov	r2, r3
 800270e:	2380      	movs	r3, #128	; 0x80
 8002710:	6093      	str	r3, [r2, #8]
}
 8002712:	e167      	b.n	80029e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272a:	d135      	bne.n	8002798 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4413      	add	r3, r2
 8002734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	0151      	lsls	r1, r2, #5
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	440a      	add	r2, r1
 8002742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002746:	f043 0302 	orr.w	r3, r3, #2
 800274a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f002 fee3 	bl	8005522 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002768:	461a      	mov	r2, r3
 800276a:	2310      	movs	r3, #16
 800276c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4413      	add	r3, r2
 8002776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277a:	461a      	mov	r2, r3
 800277c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002780:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	440b      	add	r3, r1
 8002790:	335d      	adds	r3, #93	; 0x5d
 8002792:	2208      	movs	r2, #8
 8002794:	701a      	strb	r2, [r3, #0]
}
 8002796:	e125      	b.n	80029e4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	f040 811a 	bne.w	80029e4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	0151      	lsls	r1, r2, #5
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	440a      	add	r2, r1
 80027c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ca:	f023 0302 	bic.w	r3, r3, #2
 80027ce:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	440b      	add	r3, r1
 80027de:	335d      	adds	r3, #93	; 0x5d
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d137      	bne.n	8002856 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	440b      	add	r3, r1
 80027f4:	335c      	adds	r3, #92	; 0x5c
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	440b      	add	r3, r1
 8002808:	333f      	adds	r3, #63	; 0x3f
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d00b      	beq.n	8002828 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	333f      	adds	r3, #63	; 0x3f
 8002820:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002822:	2b03      	cmp	r3, #3
 8002824:	f040 80c5 	bne.w	80029b2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	440b      	add	r3, r1
 8002836:	3351      	adds	r3, #81	; 0x51
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	f083 0301 	eor.w	r3, r3, #1
 800283e:	b2d8      	uxtb	r0, r3
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	3351      	adds	r3, #81	; 0x51
 8002850:	4602      	mov	r2, r0
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	e0ad      	b.n	80029b2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	440b      	add	r3, r1
 8002864:	335d      	adds	r3, #93	; 0x5d
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b03      	cmp	r3, #3
 800286a:	d10a      	bne.n	8002882 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	440b      	add	r3, r1
 800287a:	335c      	adds	r3, #92	; 0x5c
 800287c:	2202      	movs	r2, #2
 800287e:	701a      	strb	r2, [r3, #0]
 8002880:	e097      	b.n	80029b2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	440b      	add	r3, r1
 8002890:	335d      	adds	r3, #93	; 0x5d
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b04      	cmp	r3, #4
 8002896:	d10a      	bne.n	80028ae <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	440b      	add	r3, r1
 80028a6:	335c      	adds	r3, #92	; 0x5c
 80028a8:	2202      	movs	r2, #2
 80028aa:	701a      	strb	r2, [r3, #0]
 80028ac:	e081      	b.n	80029b2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	440b      	add	r3, r1
 80028bc:	335d      	adds	r3, #93	; 0x5d
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b05      	cmp	r3, #5
 80028c2:	d10a      	bne.n	80028da <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	440b      	add	r3, r1
 80028d2:	335c      	adds	r3, #92	; 0x5c
 80028d4:	2205      	movs	r2, #5
 80028d6:	701a      	strb	r2, [r3, #0]
 80028d8:	e06b      	b.n	80029b2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	440b      	add	r3, r1
 80028e8:	335d      	adds	r3, #93	; 0x5d
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b06      	cmp	r3, #6
 80028ee:	d00a      	beq.n	8002906 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	440b      	add	r3, r1
 80028fe:	335d      	adds	r3, #93	; 0x5d
 8002900:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002902:	2b08      	cmp	r3, #8
 8002904:	d155      	bne.n	80029b2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	440b      	add	r3, r1
 8002914:	3358      	adds	r3, #88	; 0x58
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	1c59      	adds	r1, r3, #1
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4403      	add	r3, r0
 8002928:	3358      	adds	r3, #88	; 0x58
 800292a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	440b      	add	r3, r1
 800293a:	3358      	adds	r3, #88	; 0x58
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b03      	cmp	r3, #3
 8002940:	d914      	bls.n	800296c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	440b      	add	r3, r1
 8002950:	3358      	adds	r3, #88	; 0x58
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	440b      	add	r3, r1
 8002964:	335c      	adds	r3, #92	; 0x5c
 8002966:	2204      	movs	r2, #4
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e009      	b.n	8002980 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	440b      	add	r3, r1
 800297a:	335c      	adds	r3, #92	; 0x5c
 800297c:	2202      	movs	r2, #2
 800297e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4413      	add	r3, r2
 8002988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002996:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800299e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ac:	461a      	mov	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029be:	461a      	mov	r2, r3
 80029c0:	2302      	movs	r3, #2
 80029c2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	b2d8      	uxtb	r0, r3
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	440b      	add	r3, r1
 80029d6:	335c      	adds	r3, #92	; 0x5c
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	4601      	mov	r1, r0
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f005 fc7a 	bl	80082d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029e4:	bf00      	nop
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08a      	sub	sp, #40	; 0x28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	0c5b      	lsrs	r3, r3, #17
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a20:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d003      	beq.n	8002a30 <HCD_RXQLVL_IRQHandler+0x44>
 8002a28:	2b05      	cmp	r3, #5
 8002a2a:	f000 8082 	beq.w	8002b32 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a2e:	e083      	b.n	8002b38 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d07f      	beq.n	8002b36 <HCD_RXQLVL_IRQHandler+0x14a>
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	440b      	add	r3, r1
 8002a44:	3344      	adds	r3, #68	; 0x44
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d074      	beq.n	8002b36 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3344      	adds	r3, #68	; 0x44
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	b292      	uxth	r2, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	f002 f8fb 	bl	8004c62 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	440b      	add	r3, r1
 8002a7a:	3344      	adds	r3, #68	; 0x44
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	18d1      	adds	r1, r2, r3
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4403      	add	r3, r0
 8002a90:	3344      	adds	r3, #68	; 0x44
 8002a92:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	334c      	adds	r3, #76	; 0x4c
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	18d1      	adds	r1, r2, r3
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4403      	add	r3, r0
 8002ab8:	334c      	adds	r3, #76	; 0x4c
 8002aba:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <HCD_RXQLVL_IRQHandler+0x154>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d031      	beq.n	8002b36 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ae8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002af0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afe:	461a      	mov	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	440b      	add	r3, r1
 8002b12:	3350      	adds	r3, #80	; 0x50
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	f083 0301 	eor.w	r3, r3, #1
 8002b1a:	b2d8      	uxtb	r0, r3
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	440b      	add	r3, r1
 8002b2a:	3350      	adds	r3, #80	; 0x50
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	701a      	strb	r2, [r3, #0]
      break;
 8002b30:	e001      	b.n	8002b36 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002b32:	bf00      	nop
 8002b34:	e000      	b.n	8002b38 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002b36:	bf00      	nop
  }
}
 8002b38:	bf00      	nop
 8002b3a:	3728      	adds	r7, #40	; 0x28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	1ff80000 	.word	0x1ff80000

08002b44 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b70:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d113      	bne.n	8002ba4 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d10a      	bne.n	8002b9c <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002b94:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f005 fb82 	bl	80082a0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f043 0302 	orr.w	r3, r3, #2
 8002ba2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d147      	bne.n	8002c3e <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f043 0308 	orr.w	r3, r3, #8
 8002bb4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d129      	bne.n	8002c14 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d113      	bne.n	8002bf0 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002bce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bd2:	d106      	bne.n	8002be2 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2102      	movs	r1, #2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f002 f97c 	bl	8004ed8 <USB_InitFSLSPClkSel>
 8002be0:	e011      	b.n	8002c06 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2101      	movs	r1, #1
 8002be8:	4618      	mov	r0, r3
 8002bea:	f002 f975 	bl	8004ed8 <USB_InitFSLSPClkSel>
 8002bee:	e00a      	b.n	8002c06 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d106      	bne.n	8002c06 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c04:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f005 fb74 	bl	80082f4 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f005 fb47 	bl	80082a0 <HAL_HCD_Connect_Callback>
 8002c12:	e014      	b.n	8002c3e <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f005 fb7b 	bl	8008310 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002c28:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c2c:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699a      	ldr	r2, [r3, #24]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c3c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f003 0320 	and.w	r3, r3, #32
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d103      	bne.n	8002c50 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f043 0320 	orr.w	r3, r3, #32
 8002c4e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c56:	461a      	mov	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	6013      	str	r3, [r2, #0]
}
 8002c5c:	bf00      	nop
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e10f      	b.n	8002e96 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f004 ffda 	bl	8007c44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2224      	movs	r2, #36	; 0x24
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0201 	bic.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ca8:	f001 f9ac 	bl	8004004 <HAL_RCC_GetPCLK1Freq>
 8002cac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4a7b      	ldr	r2, [pc, #492]	; (8002ea0 <HAL_I2C_Init+0x23c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d807      	bhi.n	8002cc8 <HAL_I2C_Init+0x64>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4a7a      	ldr	r2, [pc, #488]	; (8002ea4 <HAL_I2C_Init+0x240>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	bf94      	ite	ls
 8002cc0:	2301      	movls	r3, #1
 8002cc2:	2300      	movhi	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	e006      	b.n	8002cd6 <HAL_I2C_Init+0x72>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4a77      	ldr	r2, [pc, #476]	; (8002ea8 <HAL_I2C_Init+0x244>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	bf94      	ite	ls
 8002cd0:	2301      	movls	r3, #1
 8002cd2:	2300      	movhi	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e0db      	b.n	8002e96 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4a72      	ldr	r2, [pc, #456]	; (8002eac <HAL_I2C_Init+0x248>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	0c9b      	lsrs	r3, r3, #18
 8002ce8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	4a64      	ldr	r2, [pc, #400]	; (8002ea0 <HAL_I2C_Init+0x23c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d802      	bhi.n	8002d18 <HAL_I2C_Init+0xb4>
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	3301      	adds	r3, #1
 8002d16:	e009      	b.n	8002d2c <HAL_I2C_Init+0xc8>
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d1e:	fb02 f303 	mul.w	r3, r2, r3
 8002d22:	4a63      	ldr	r2, [pc, #396]	; (8002eb0 <HAL_I2C_Init+0x24c>)
 8002d24:	fba2 2303 	umull	r2, r3, r2, r3
 8002d28:	099b      	lsrs	r3, r3, #6
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	430b      	orrs	r3, r1
 8002d32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4956      	ldr	r1, [pc, #344]	; (8002ea0 <HAL_I2C_Init+0x23c>)
 8002d48:	428b      	cmp	r3, r1
 8002d4a:	d80d      	bhi.n	8002d68 <HAL_I2C_Init+0x104>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1e59      	subs	r1, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	bf38      	it	cc
 8002d64:	2304      	movcc	r3, #4
 8002d66:	e04f      	b.n	8002e08 <HAL_I2C_Init+0x1a4>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d111      	bne.n	8002d94 <HAL_I2C_Init+0x130>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1e58      	subs	r0, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	440b      	add	r3, r1
 8002d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d82:	3301      	adds	r3, #1
 8002d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e012      	b.n	8002dba <HAL_I2C_Init+0x156>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1e58      	subs	r0, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6859      	ldr	r1, [r3, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	0099      	lsls	r1, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002daa:	3301      	adds	r3, #1
 8002dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_I2C_Init+0x15e>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e022      	b.n	8002e08 <HAL_I2C_Init+0x1a4>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10e      	bne.n	8002de8 <HAL_I2C_Init+0x184>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1e58      	subs	r0, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6859      	ldr	r1, [r3, #4]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	440b      	add	r3, r1
 8002dd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ddc:	3301      	adds	r3, #1
 8002dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de6:	e00f      	b.n	8002e08 <HAL_I2C_Init+0x1a4>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1e58      	subs	r0, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	0099      	lsls	r1, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	6809      	ldr	r1, [r1, #0]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69da      	ldr	r2, [r3, #28]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6911      	ldr	r1, [r2, #16]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68d2      	ldr	r2, [r2, #12]
 8002e42:	4311      	orrs	r1, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	000186a0 	.word	0x000186a0
 8002ea4:	001e847f 	.word	0x001e847f
 8002ea8:	003d08ff 	.word	0x003d08ff
 8002eac:	431bde83 	.word	0x431bde83
 8002eb0:	10624dd3 	.word	0x10624dd3

08002eb4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e128      	b.n	8003118 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d109      	bne.n	8002ee6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a90      	ldr	r2, [pc, #576]	; (8003120 <HAL_I2S_Init+0x26c>)
 8002ede:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f004 fef7 	bl	8007cd4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002efc:	f023 030f 	bic.w	r3, r3, #15
 8002f00:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2202      	movs	r2, #2
 8002f08:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d060      	beq.n	8002fd4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f1a:	2310      	movs	r3, #16
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	e001      	b.n	8002f24 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f20:	2320      	movs	r3, #32
 8002f22:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d802      	bhi.n	8002f32 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f32:	2001      	movs	r0, #1
 8002f34:	f001 f970 	bl	8004218 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f38:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f42:	d125      	bne.n	8002f90 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d010      	beq.n	8002f6e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	461a      	mov	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f68:	3305      	adds	r3, #5
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	e01f      	b.n	8002fae <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	461a      	mov	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8a:	3305      	adds	r3, #5
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	e00e      	b.n	8002fae <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002faa:	3305      	adds	r3, #5
 8002fac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4a5c      	ldr	r2, [pc, #368]	; (8003124 <HAL_I2S_Init+0x270>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	08db      	lsrs	r3, r3, #3
 8002fb8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	085b      	lsrs	r3, r3, #1
 8002fca:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	021b      	lsls	r3, r3, #8
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	e003      	b.n	8002fdc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d902      	bls.n	8002fe8 <HAL_I2S_Init+0x134>
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	2bff      	cmp	r3, #255	; 0xff
 8002fe6:	d907      	bls.n	8002ff8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fec:	f043 0210 	orr.w	r2, r3, #16
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e08f      	b.n	8003118 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	ea42 0103 	orr.w	r1, r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	430a      	orrs	r2, r1
 800300a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003016:	f023 030f 	bic.w	r3, r3, #15
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6851      	ldr	r1, [r2, #4]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6892      	ldr	r2, [r2, #8]
 8003022:	4311      	orrs	r1, r2
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	68d2      	ldr	r2, [r2, #12]
 8003028:	4311      	orrs	r1, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6992      	ldr	r2, [r2, #24]
 800302e:	430a      	orrs	r2, r1
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800303a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d161      	bne.n	8003108 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a38      	ldr	r2, [pc, #224]	; (8003128 <HAL_I2S_Init+0x274>)
 8003048:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a37      	ldr	r2, [pc, #220]	; (800312c <HAL_I2S_Init+0x278>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d101      	bne.n	8003058 <HAL_I2S_Init+0x1a4>
 8003054:	4b36      	ldr	r3, [pc, #216]	; (8003130 <HAL_I2S_Init+0x27c>)
 8003056:	e001      	b.n	800305c <HAL_I2S_Init+0x1a8>
 8003058:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	4932      	ldr	r1, [pc, #200]	; (800312c <HAL_I2S_Init+0x278>)
 8003064:	428a      	cmp	r2, r1
 8003066:	d101      	bne.n	800306c <HAL_I2S_Init+0x1b8>
 8003068:	4a31      	ldr	r2, [pc, #196]	; (8003130 <HAL_I2S_Init+0x27c>)
 800306a:	e001      	b.n	8003070 <HAL_I2S_Init+0x1bc>
 800306c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003070:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003074:	f023 030f 	bic.w	r3, r3, #15
 8003078:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a2b      	ldr	r2, [pc, #172]	; (800312c <HAL_I2S_Init+0x278>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d101      	bne.n	8003088 <HAL_I2S_Init+0x1d4>
 8003084:	4b2a      	ldr	r3, [pc, #168]	; (8003130 <HAL_I2S_Init+0x27c>)
 8003086:	e001      	b.n	800308c <HAL_I2S_Init+0x1d8>
 8003088:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800308c:	2202      	movs	r2, #2
 800308e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a25      	ldr	r2, [pc, #148]	; (800312c <HAL_I2S_Init+0x278>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d101      	bne.n	800309e <HAL_I2S_Init+0x1ea>
 800309a:	4b25      	ldr	r3, [pc, #148]	; (8003130 <HAL_I2S_Init+0x27c>)
 800309c:	e001      	b.n	80030a2 <HAL_I2S_Init+0x1ee>
 800309e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ae:	d003      	beq.n	80030b8 <HAL_I2S_Init+0x204>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d103      	bne.n	80030c0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80030b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	e001      	b.n	80030c4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80030c0:	2300      	movs	r3, #0
 80030c2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	b299      	uxth	r1, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80030da:	4303      	orrs	r3, r0
 80030dc:	b29b      	uxth	r3, r3
 80030de:	430b      	orrs	r3, r1
 80030e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80030e2:	4313      	orrs	r3, r2
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	897b      	ldrh	r3, [r7, #10]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030f0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a0d      	ldr	r2, [pc, #52]	; (800312c <HAL_I2S_Init+0x278>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d101      	bne.n	8003100 <HAL_I2S_Init+0x24c>
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <HAL_I2S_Init+0x27c>)
 80030fe:	e001      	b.n	8003104 <HAL_I2S_Init+0x250>
 8003100:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003104:	897a      	ldrh	r2, [r7, #10]
 8003106:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3720      	adds	r7, #32
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	0800322b 	.word	0x0800322b
 8003124:	cccccccd 	.word	0xcccccccd
 8003128:	08003341 	.word	0x08003341
 800312c:	40003800 	.word	0x40003800
 8003130:	40003400 	.word	0x40003400

08003134 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	881a      	ldrh	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	1c9a      	adds	r2, r3, #2
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10e      	bne.n	80031c4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031b4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff ffb8 	bl	8003134 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80031c4:	bf00      	nop
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	b292      	uxth	r2, r2
 80031e0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e6:	1c9a      	adds	r2, r3, #2
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10e      	bne.n	8003222 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003212:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff ff93 	bl	8003148 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b086      	sub	sp, #24
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b04      	cmp	r3, #4
 8003244:	d13a      	bne.n	80032bc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b01      	cmp	r3, #1
 800324e:	d109      	bne.n	8003264 <I2S_IRQHandler+0x3a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325a:	2b40      	cmp	r3, #64	; 0x40
 800325c:	d102      	bne.n	8003264 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff ffb4 	bl	80031cc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326a:	2b40      	cmp	r3, #64	; 0x40
 800326c:	d126      	bne.n	80032bc <I2S_IRQHandler+0x92>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0320 	and.w	r3, r3, #32
 8003278:	2b20      	cmp	r3, #32
 800327a:	d11f      	bne.n	80032bc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800328a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	f043 0202 	orr.w	r2, r3, #2
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff ff50 	bl	800315c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d136      	bne.n	8003336 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d109      	bne.n	80032e6 <I2S_IRQHandler+0xbc>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032dc:	2b80      	cmp	r3, #128	; 0x80
 80032de:	d102      	bne.n	80032e6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff ff45 	bl	8003170 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d122      	bne.n	8003336 <I2S_IRQHandler+0x10c>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b20      	cmp	r3, #32
 80032fc:	d11b      	bne.n	8003336 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800330c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003328:	f043 0204 	orr.w	r2, r3, #4
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7ff ff13 	bl	800315c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003336:	bf00      	nop
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4aa2      	ldr	r2, [pc, #648]	; (80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d101      	bne.n	800335e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800335a:	4ba2      	ldr	r3, [pc, #648]	; (80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800335c:	e001      	b.n	8003362 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800335e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a9b      	ldr	r2, [pc, #620]	; (80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d101      	bne.n	800337c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003378:	4b9a      	ldr	r3, [pc, #616]	; (80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800337a:	e001      	b.n	8003380 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800337c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800338c:	d004      	beq.n	8003398 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	f040 8099 	bne.w	80034ca <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d107      	bne.n	80033b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f925 	bl	80035fc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d107      	bne.n	80033cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f9c8 	bl	800375c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d2:	2b40      	cmp	r3, #64	; 0x40
 80033d4:	d13a      	bne.n	800344c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d035      	beq.n	800344c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a7e      	ldr	r2, [pc, #504]	; (80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d101      	bne.n	80033ee <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80033ea:	4b7e      	ldr	r3, [pc, #504]	; (80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033ec:	e001      	b.n	80033f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80033ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4979      	ldr	r1, [pc, #484]	; (80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033fa:	428b      	cmp	r3, r1
 80033fc:	d101      	bne.n	8003402 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80033fe:	4b79      	ldr	r3, [pc, #484]	; (80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003400:	e001      	b.n	8003406 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003402:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003406:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800340a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800341a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800341c:	2300      	movs	r3, #0
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	f043 0202 	orr.w	r2, r3, #2
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff fe88 	bl	800315c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b08      	cmp	r3, #8
 8003454:	f040 80be 	bne.w	80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80b8 	beq.w	80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003472:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a59      	ldr	r2, [pc, #356]	; (80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d101      	bne.n	8003482 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800347e:	4b59      	ldr	r3, [pc, #356]	; (80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003480:	e001      	b.n	8003486 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003482:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4954      	ldr	r1, [pc, #336]	; (80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800348e:	428b      	cmp	r3, r1
 8003490:	d101      	bne.n	8003496 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003492:	4b54      	ldr	r3, [pc, #336]	; (80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003494:	e001      	b.n	800349a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003496:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800349a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800349e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034a0:	2300      	movs	r3, #0
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	60bb      	str	r3, [r7, #8]
 80034ac:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	f043 0204 	orr.w	r2, r3, #4
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff fe4a 	bl	800315c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034c8:	e084      	b.n	80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d107      	bne.n	80034e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f8be 	bl	8003660 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d107      	bne.n	80034fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f8fd 	bl	80036f8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003504:	2b40      	cmp	r3, #64	; 0x40
 8003506:	d12f      	bne.n	8003568 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b00      	cmp	r3, #0
 8003510:	d02a      	beq.n	8003568 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003520:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a2e      	ldr	r2, [pc, #184]	; (80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d101      	bne.n	8003530 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800352c:	4b2d      	ldr	r3, [pc, #180]	; (80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800352e:	e001      	b.n	8003534 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003530:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4929      	ldr	r1, [pc, #164]	; (80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800353c:	428b      	cmp	r3, r1
 800353e:	d101      	bne.n	8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003540:	4b28      	ldr	r3, [pc, #160]	; (80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003542:	e001      	b.n	8003548 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003544:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003548:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800354c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	f043 0202 	orr.w	r2, r3, #2
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff fdfa 	bl	800315c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b08      	cmp	r3, #8
 8003570:	d131      	bne.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f003 0320 	and.w	r3, r3, #32
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02c      	beq.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a17      	ldr	r2, [pc, #92]	; (80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d101      	bne.n	800358a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003586:	4b17      	ldr	r3, [pc, #92]	; (80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003588:	e001      	b.n	800358e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800358a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4912      	ldr	r1, [pc, #72]	; (80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003596:	428b      	cmp	r3, r1
 8003598:	d101      	bne.n	800359e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800359a:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800359c:	e001      	b.n	80035a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800359e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035b6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c4:	f043 0204 	orr.w	r2, r3, #4
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff fdc5 	bl	800315c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035d2:	e000      	b.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035d4:	bf00      	nop
}
 80035d6:	bf00      	nop
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40003800 	.word	0x40003800
 80035e4:	40003400 	.word	0x40003400

080035e8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	1c99      	adds	r1, r3, #2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6251      	str	r1, [r2, #36]	; 0x24
 800360e:	881a      	ldrh	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d113      	bne.n	8003656 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800363c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d106      	bne.n	8003656 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff ffc9 	bl	80035e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	1c99      	adds	r1, r3, #2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6251      	str	r1, [r2, #36]	; 0x24
 8003672:	8819      	ldrh	r1, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <I2SEx_TxISR_I2SExt+0x90>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d101      	bne.n	8003682 <I2SEx_TxISR_I2SExt+0x22>
 800367e:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <I2SEx_TxISR_I2SExt+0x94>)
 8003680:	e001      	b.n	8003686 <I2SEx_TxISR_I2SExt+0x26>
 8003682:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003686:	460a      	mov	r2, r1
 8003688:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d121      	bne.n	80036e6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a12      	ldr	r2, [pc, #72]	; (80036f0 <I2SEx_TxISR_I2SExt+0x90>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d101      	bne.n	80036b0 <I2SEx_TxISR_I2SExt+0x50>
 80036ac:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <I2SEx_TxISR_I2SExt+0x94>)
 80036ae:	e001      	b.n	80036b4 <I2SEx_TxISR_I2SExt+0x54>
 80036b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	490d      	ldr	r1, [pc, #52]	; (80036f0 <I2SEx_TxISR_I2SExt+0x90>)
 80036bc:	428b      	cmp	r3, r1
 80036be:	d101      	bne.n	80036c4 <I2SEx_TxISR_I2SExt+0x64>
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <I2SEx_TxISR_I2SExt+0x94>)
 80036c2:	e001      	b.n	80036c8 <I2SEx_TxISR_I2SExt+0x68>
 80036c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d106      	bne.n	80036e6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7ff ff81 	bl	80035e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40003800 	.word	0x40003800
 80036f4:	40003400 	.word	0x40003400

080036f8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68d8      	ldr	r0, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	1c99      	adds	r1, r3, #2
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003710:	b282      	uxth	r2, r0
 8003712:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d113      	bne.n	8003754 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800373a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff ff4a 	bl	80035e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003754:	bf00      	nop
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a20      	ldr	r2, [pc, #128]	; (80037ec <I2SEx_RxISR_I2SExt+0x90>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d101      	bne.n	8003772 <I2SEx_RxISR_I2SExt+0x16>
 800376e:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <I2SEx_RxISR_I2SExt+0x94>)
 8003770:	e001      	b.n	8003776 <I2SEx_RxISR_I2SExt+0x1a>
 8003772:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003776:	68d8      	ldr	r0, [r3, #12]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	1c99      	adds	r1, r3, #2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003782:	b282      	uxth	r2, r0
 8003784:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800378a:	b29b      	uxth	r3, r3
 800378c:	3b01      	subs	r3, #1
 800378e:	b29a      	uxth	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d121      	bne.n	80037e2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a12      	ldr	r2, [pc, #72]	; (80037ec <I2SEx_RxISR_I2SExt+0x90>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d101      	bne.n	80037ac <I2SEx_RxISR_I2SExt+0x50>
 80037a8:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <I2SEx_RxISR_I2SExt+0x94>)
 80037aa:	e001      	b.n	80037b0 <I2SEx_RxISR_I2SExt+0x54>
 80037ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	490d      	ldr	r1, [pc, #52]	; (80037ec <I2SEx_RxISR_I2SExt+0x90>)
 80037b8:	428b      	cmp	r3, r1
 80037ba:	d101      	bne.n	80037c0 <I2SEx_RxISR_I2SExt+0x64>
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <I2SEx_RxISR_I2SExt+0x94>)
 80037be:	e001      	b.n	80037c4 <I2SEx_RxISR_I2SExt+0x68>
 80037c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037c8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d106      	bne.n	80037e2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff ff03 	bl	80035e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40003800 	.word	0x40003800
 80037f0:	40003400 	.word	0x40003400

080037f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e22d      	b.n	8003c62 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d075      	beq.n	80038fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003812:	4ba3      	ldr	r3, [pc, #652]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b04      	cmp	r3, #4
 800381c:	d00c      	beq.n	8003838 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800381e:	4ba0      	ldr	r3, [pc, #640]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003826:	2b08      	cmp	r3, #8
 8003828:	d112      	bne.n	8003850 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800382a:	4b9d      	ldr	r3, [pc, #628]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003836:	d10b      	bne.n	8003850 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003838:	4b99      	ldr	r3, [pc, #612]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d05b      	beq.n	80038fc <HAL_RCC_OscConfig+0x108>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d157      	bne.n	80038fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e208      	b.n	8003c62 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003858:	d106      	bne.n	8003868 <HAL_RCC_OscConfig+0x74>
 800385a:	4b91      	ldr	r3, [pc, #580]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a90      	ldr	r2, [pc, #576]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	e01d      	b.n	80038a4 <HAL_RCC_OscConfig+0xb0>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003870:	d10c      	bne.n	800388c <HAL_RCC_OscConfig+0x98>
 8003872:	4b8b      	ldr	r3, [pc, #556]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a8a      	ldr	r2, [pc, #552]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	4b88      	ldr	r3, [pc, #544]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a87      	ldr	r2, [pc, #540]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	e00b      	b.n	80038a4 <HAL_RCC_OscConfig+0xb0>
 800388c:	4b84      	ldr	r3, [pc, #528]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a83      	ldr	r2, [pc, #524]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	4b81      	ldr	r3, [pc, #516]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a80      	ldr	r2, [pc, #512]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 800389e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d013      	beq.n	80038d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ac:	f7fc fec6 	bl	800063c <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b4:	f7fc fec2 	bl	800063c <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b64      	cmp	r3, #100	; 0x64
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e1cd      	b.n	8003c62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c6:	4b76      	ldr	r3, [pc, #472]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f0      	beq.n	80038b4 <HAL_RCC_OscConfig+0xc0>
 80038d2:	e014      	b.n	80038fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d4:	f7fc feb2 	bl	800063c <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038dc:	f7fc feae 	bl	800063c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b64      	cmp	r3, #100	; 0x64
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e1b9      	b.n	8003c62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ee:	4b6c      	ldr	r3, [pc, #432]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0xe8>
 80038fa:	e000      	b.n	80038fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d063      	beq.n	80039d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800390a:	4b65      	ldr	r3, [pc, #404]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00b      	beq.n	800392e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003916:	4b62      	ldr	r3, [pc, #392]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800391e:	2b08      	cmp	r3, #8
 8003920:	d11c      	bne.n	800395c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003922:	4b5f      	ldr	r3, [pc, #380]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d116      	bne.n	800395c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392e:	4b5c      	ldr	r3, [pc, #368]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d005      	beq.n	8003946 <HAL_RCC_OscConfig+0x152>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d001      	beq.n	8003946 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e18d      	b.n	8003c62 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003946:	4b56      	ldr	r3, [pc, #344]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	4952      	ldr	r1, [pc, #328]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395a:	e03a      	b.n	80039d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d020      	beq.n	80039a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003964:	4b4f      	ldr	r3, [pc, #316]	; (8003aa4 <HAL_RCC_OscConfig+0x2b0>)
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396a:	f7fc fe67 	bl	800063c <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003972:	f7fc fe63 	bl	800063c <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e16e      	b.n	8003c62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003984:	4b46      	ldr	r3, [pc, #280]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003990:	4b43      	ldr	r3, [pc, #268]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	4940      	ldr	r1, [pc, #256]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	600b      	str	r3, [r1, #0]
 80039a4:	e015      	b.n	80039d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039a6:	4b3f      	ldr	r3, [pc, #252]	; (8003aa4 <HAL_RCC_OscConfig+0x2b0>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7fc fe46 	bl	800063c <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039b4:	f7fc fe42 	bl	800063c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e14d      	b.n	8003c62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c6:	4b36      	ldr	r3, [pc, #216]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d030      	beq.n	8003a40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d016      	beq.n	8003a14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039e6:	4b30      	ldr	r3, [pc, #192]	; (8003aa8 <HAL_RCC_OscConfig+0x2b4>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ec:	f7fc fe26 	bl	800063c <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039f4:	f7fc fe22 	bl	800063c <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e12d      	b.n	8003c62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a06:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCC_OscConfig+0x200>
 8003a12:	e015      	b.n	8003a40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a14:	4b24      	ldr	r3, [pc, #144]	; (8003aa8 <HAL_RCC_OscConfig+0x2b4>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1a:	f7fc fe0f 	bl	800063c <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a22:	f7fc fe0b 	bl	800063c <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e116      	b.n	8003c62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a34:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1f0      	bne.n	8003a22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80a0 	beq.w	8003b8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a52:	4b13      	ldr	r3, [pc, #76]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10f      	bne.n	8003a7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	4a0e      	ldr	r2, [pc, #56]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a6e:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7e:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <HAL_RCC_OscConfig+0x2b8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d121      	bne.n	8003ace <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a8a:	4b08      	ldr	r3, [pc, #32]	; (8003aac <HAL_RCC_OscConfig+0x2b8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a07      	ldr	r2, [pc, #28]	; (8003aac <HAL_RCC_OscConfig+0x2b8>)
 8003a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a96:	f7fc fdd1 	bl	800063c <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9c:	e011      	b.n	8003ac2 <HAL_RCC_OscConfig+0x2ce>
 8003a9e:	bf00      	nop
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	42470000 	.word	0x42470000
 8003aa8:	42470e80 	.word	0x42470e80
 8003aac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab0:	f7fc fdc4 	bl	800063c <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e0cf      	b.n	8003c62 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac2:	4b6a      	ldr	r3, [pc, #424]	; (8003c6c <HAL_RCC_OscConfig+0x478>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d106      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x2f0>
 8003ad6:	4b66      	ldr	r3, [pc, #408]	; (8003c70 <HAL_RCC_OscConfig+0x47c>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ada:	4a65      	ldr	r2, [pc, #404]	; (8003c70 <HAL_RCC_OscConfig+0x47c>)
 8003adc:	f043 0301 	orr.w	r3, r3, #1
 8003ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae2:	e01c      	b.n	8003b1e <HAL_RCC_OscConfig+0x32a>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b05      	cmp	r3, #5
 8003aea:	d10c      	bne.n	8003b06 <HAL_RCC_OscConfig+0x312>
 8003aec:	4b60      	ldr	r3, [pc, #384]	; (8003c70 <HAL_RCC_OscConfig+0x47c>)
 8003aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af0:	4a5f      	ldr	r2, [pc, #380]	; (8003c70 <HAL_RCC_OscConfig+0x47c>)
 8003af2:	f043 0304 	orr.w	r3, r3, #4
 8003af6:	6713      	str	r3, [r2, #112]	; 0x70
 8003af8:	4b5d      	ldr	r3, [pc, #372]	; (8003c70 <HAL_RCC_OscConfig+0x47c>)
 8003afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afc:	4a5c      	ldr	r2, [pc, #368]	; (8003c70 <HAL_RCC_OscConfig+0x47c>)
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	6713      	str	r3, [r2, #112]	; 0x70
 8003b04:	e00b      	b.n	8003b1e <HAL_RCC_OscConfig+0x32a>
 8003b06:	4b5a      	ldr	r3, [pc, #360]	; (8003c70 <HAL_RCC_OscConfig+0x47c>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0a:	4a59      	ldr	r2, [pc, #356]	; (8003c70 <HAL_RCC_OscConfig+0x47c>)
 8003b0c:	f023 0301 	bic.w	r3, r3, #1
 8003b10:	6713      	str	r3, [r2, #112]	; 0x70
 8003b12:	4b57      	ldr	r3, [pc, #348]	; (8003c70 <HAL_RCC_OscConfig+0x47c>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	4a56      	ldr	r2, [pc, #344]	; (8003c70 <HAL_RCC_OscConfig+0x47c>)
 8003b18:	f023 0304 	bic.w	r3, r3, #4
 8003b1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d015      	beq.n	8003b52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b26:	f7fc fd89 	bl	800063c <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2c:	e00a      	b.n	8003b44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b2e:	f7fc fd85 	bl	800063c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e08e      	b.n	8003c62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b44:	4b4a      	ldr	r3, [pc, #296]	; (8003c70 <HAL_RCC_OscConfig+0x47c>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0ee      	beq.n	8003b2e <HAL_RCC_OscConfig+0x33a>
 8003b50:	e014      	b.n	8003b7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b52:	f7fc fd73 	bl	800063c <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b58:	e00a      	b.n	8003b70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b5a:	f7fc fd6f 	bl	800063c <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e078      	b.n	8003c62 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b70:	4b3f      	ldr	r3, [pc, #252]	; (8003c70 <HAL_RCC_OscConfig+0x47c>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1ee      	bne.n	8003b5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b7c:	7dfb      	ldrb	r3, [r7, #23]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d105      	bne.n	8003b8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b82:	4b3b      	ldr	r3, [pc, #236]	; (8003c70 <HAL_RCC_OscConfig+0x47c>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	4a3a      	ldr	r2, [pc, #232]	; (8003c70 <HAL_RCC_OscConfig+0x47c>)
 8003b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d064      	beq.n	8003c60 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b96:	4b36      	ldr	r3, [pc, #216]	; (8003c70 <HAL_RCC_OscConfig+0x47c>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d05c      	beq.n	8003c5c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d141      	bne.n	8003c2e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003baa:	4b32      	ldr	r3, [pc, #200]	; (8003c74 <HAL_RCC_OscConfig+0x480>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb0:	f7fc fd44 	bl	800063c <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7fc fd40 	bl	800063c <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e04b      	b.n	8003c62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bca:	4b29      	ldr	r3, [pc, #164]	; (8003c70 <HAL_RCC_OscConfig+0x47c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69da      	ldr	r2, [r3, #28]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	019b      	lsls	r3, r3, #6
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	085b      	lsrs	r3, r3, #1
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	041b      	lsls	r3, r3, #16
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	061b      	lsls	r3, r3, #24
 8003bfa:	491d      	ldr	r1, [pc, #116]	; (8003c70 <HAL_RCC_OscConfig+0x47c>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c00:	4b1c      	ldr	r3, [pc, #112]	; (8003c74 <HAL_RCC_OscConfig+0x480>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c06:	f7fc fd19 	bl	800063c <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c0e:	f7fc fd15 	bl	800063c <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e020      	b.n	8003c62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c20:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <HAL_RCC_OscConfig+0x47c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCC_OscConfig+0x41a>
 8003c2c:	e018      	b.n	8003c60 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2e:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <HAL_RCC_OscConfig+0x480>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7fc fd02 	bl	800063c <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c3c:	f7fc fcfe 	bl	800063c <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e009      	b.n	8003c62 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4e:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <HAL_RCC_OscConfig+0x47c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x448>
 8003c5a:	e001      	b.n	8003c60 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40007000 	.word	0x40007000
 8003c70:	40023800 	.word	0x40023800
 8003c74:	42470060 	.word	0x42470060

08003c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0ca      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c8c:	4b67      	ldr	r3, [pc, #412]	; (8003e2c <HAL_RCC_ClockConfig+0x1b4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 030f 	and.w	r3, r3, #15
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d90c      	bls.n	8003cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9a:	4b64      	ldr	r3, [pc, #400]	; (8003e2c <HAL_RCC_ClockConfig+0x1b4>)
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca2:	4b62      	ldr	r3, [pc, #392]	; (8003e2c <HAL_RCC_ClockConfig+0x1b4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0b6      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d020      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ccc:	4b58      	ldr	r3, [pc, #352]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	4a57      	ldr	r2, [pc, #348]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ce4:	4b52      	ldr	r3, [pc, #328]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4a51      	ldr	r2, [pc, #324]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003cea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf0:	4b4f      	ldr	r3, [pc, #316]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	494c      	ldr	r1, [pc, #304]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d044      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d16:	4b46      	ldr	r3, [pc, #280]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d119      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e07d      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d003      	beq.n	8003d36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d36:	4b3e      	ldr	r3, [pc, #248]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e06d      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d46:	4b3a      	ldr	r3, [pc, #232]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e065      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d56:	4b36      	ldr	r3, [pc, #216]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f023 0203 	bic.w	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	4933      	ldr	r1, [pc, #204]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d68:	f7fc fc68 	bl	800063c <HAL_GetTick>
 8003d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d70:	f7fc fc64 	bl	800063c <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e04d      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d86:	4b2a      	ldr	r3, [pc, #168]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 020c 	and.w	r2, r3, #12
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d1eb      	bne.n	8003d70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d98:	4b24      	ldr	r3, [pc, #144]	; (8003e2c <HAL_RCC_ClockConfig+0x1b4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 030f 	and.w	r3, r3, #15
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d20c      	bcs.n	8003dc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b21      	ldr	r3, [pc, #132]	; (8003e2c <HAL_RCC_ClockConfig+0x1b4>)
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dae:	4b1f      	ldr	r3, [pc, #124]	; (8003e2c <HAL_RCC_ClockConfig+0x1b4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e030      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dcc:	4b18      	ldr	r3, [pc, #96]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4915      	ldr	r1, [pc, #84]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dea:	4b11      	ldr	r3, [pc, #68]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	490d      	ldr	r1, [pc, #52]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dfe:	f000 f81d 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 8003e02:	4601      	mov	r1, r0
 8003e04:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	091b      	lsrs	r3, r3, #4
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	5cd3      	ldrb	r3, [r2, r3]
 8003e12:	fa21 f303 	lsr.w	r3, r1, r3
 8003e16:	4a08      	ldr	r2, [pc, #32]	; (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	f7fc fbca 	bl	80005b4 <HAL_InitTick>

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40023c00 	.word	0x40023c00
 8003e30:	40023800 	.word	0x40023800
 8003e34:	08009058 	.word	0x08009058
 8003e38:	20000028 	.word	0x20000028

08003e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	607b      	str	r3, [r7, #4]
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e52:	4b63      	ldr	r3, [pc, #396]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d007      	beq.n	8003e6e <HAL_RCC_GetSysClockFreq+0x32>
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d008      	beq.n	8003e74 <HAL_RCC_GetSysClockFreq+0x38>
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f040 80b4 	bne.w	8003fd0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e68:	4b5e      	ldr	r3, [pc, #376]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e6a:	60bb      	str	r3, [r7, #8]
       break;
 8003e6c:	e0b3      	b.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e6e:	4b5e      	ldr	r3, [pc, #376]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003e70:	60bb      	str	r3, [r7, #8]
      break;
 8003e72:	e0b0      	b.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e74:	4b5a      	ldr	r3, [pc, #360]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e7e:	4b58      	ldr	r3, [pc, #352]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d04a      	beq.n	8003f20 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e8a:	4b55      	ldr	r3, [pc, #340]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	099b      	lsrs	r3, r3, #6
 8003e90:	f04f 0400 	mov.w	r4, #0
 8003e94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	ea03 0501 	and.w	r5, r3, r1
 8003ea0:	ea04 0602 	and.w	r6, r4, r2
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	4632      	mov	r2, r6
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	f04f 0400 	mov.w	r4, #0
 8003eb0:	0154      	lsls	r4, r2, #5
 8003eb2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003eb6:	014b      	lsls	r3, r1, #5
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4622      	mov	r2, r4
 8003ebc:	1b49      	subs	r1, r1, r5
 8003ebe:	eb62 0206 	sbc.w	r2, r2, r6
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	f04f 0400 	mov.w	r4, #0
 8003eca:	0194      	lsls	r4, r2, #6
 8003ecc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ed0:	018b      	lsls	r3, r1, #6
 8003ed2:	1a5b      	subs	r3, r3, r1
 8003ed4:	eb64 0402 	sbc.w	r4, r4, r2
 8003ed8:	f04f 0100 	mov.w	r1, #0
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	00e2      	lsls	r2, r4, #3
 8003ee2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ee6:	00d9      	lsls	r1, r3, #3
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4614      	mov	r4, r2
 8003eec:	195b      	adds	r3, r3, r5
 8003eee:	eb44 0406 	adc.w	r4, r4, r6
 8003ef2:	f04f 0100 	mov.w	r1, #0
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	0262      	lsls	r2, r4, #9
 8003efc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f00:	0259      	lsls	r1, r3, #9
 8003f02:	460b      	mov	r3, r1
 8003f04:	4614      	mov	r4, r2
 8003f06:	4618      	mov	r0, r3
 8003f08:	4621      	mov	r1, r4
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f04f 0400 	mov.w	r4, #0
 8003f10:	461a      	mov	r2, r3
 8003f12:	4623      	mov	r3, r4
 8003f14:	f7fc f9ac 	bl	8000270 <__aeabi_uldivmod>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	e049      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f20:	4b2f      	ldr	r3, [pc, #188]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	099b      	lsrs	r3, r3, #6
 8003f26:	f04f 0400 	mov.w	r4, #0
 8003f2a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	ea03 0501 	and.w	r5, r3, r1
 8003f36:	ea04 0602 	and.w	r6, r4, r2
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	4632      	mov	r2, r6
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	f04f 0400 	mov.w	r4, #0
 8003f46:	0154      	lsls	r4, r2, #5
 8003f48:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f4c:	014b      	lsls	r3, r1, #5
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4622      	mov	r2, r4
 8003f52:	1b49      	subs	r1, r1, r5
 8003f54:	eb62 0206 	sbc.w	r2, r2, r6
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	f04f 0400 	mov.w	r4, #0
 8003f60:	0194      	lsls	r4, r2, #6
 8003f62:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f66:	018b      	lsls	r3, r1, #6
 8003f68:	1a5b      	subs	r3, r3, r1
 8003f6a:	eb64 0402 	sbc.w	r4, r4, r2
 8003f6e:	f04f 0100 	mov.w	r1, #0
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	00e2      	lsls	r2, r4, #3
 8003f78:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f7c:	00d9      	lsls	r1, r3, #3
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4614      	mov	r4, r2
 8003f82:	195b      	adds	r3, r3, r5
 8003f84:	eb44 0406 	adc.w	r4, r4, r6
 8003f88:	f04f 0100 	mov.w	r1, #0
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	02a2      	lsls	r2, r4, #10
 8003f92:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f96:	0299      	lsls	r1, r3, #10
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4614      	mov	r4, r2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f04f 0400 	mov.w	r4, #0
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	4623      	mov	r3, r4
 8003faa:	f7fc f961 	bl	8000270 <__aeabi_uldivmod>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	460c      	mov	r4, r1
 8003fb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fb4:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	0c1b      	lsrs	r3, r3, #16
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fcc:	60bb      	str	r3, [r7, #8]
      break;
 8003fce:	e002      	b.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fd0:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003fd2:	60bb      	str	r3, [r7, #8]
      break;
 8003fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	00f42400 	.word	0x00f42400
 8003fe8:	007a1200 	.word	0x007a1200

08003fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ff0:	4b03      	ldr	r3, [pc, #12]	; (8004000 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	20000028 	.word	0x20000028

08004004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004008:	f7ff fff0 	bl	8003fec <HAL_RCC_GetHCLKFreq>
 800400c:	4601      	mov	r1, r0
 800400e:	4b05      	ldr	r3, [pc, #20]	; (8004024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	0a9b      	lsrs	r3, r3, #10
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	4a03      	ldr	r2, [pc, #12]	; (8004028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800401a:	5cd3      	ldrb	r3, [r2, r3]
 800401c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004020:	4618      	mov	r0, r3
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40023800 	.word	0x40023800
 8004028:	08009068 	.word	0x08009068

0800402c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004030:	f7ff ffdc 	bl	8003fec <HAL_RCC_GetHCLKFreq>
 8004034:	4601      	mov	r1, r0
 8004036:	4b05      	ldr	r3, [pc, #20]	; (800404c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	0b5b      	lsrs	r3, r3, #13
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	4a03      	ldr	r2, [pc, #12]	; (8004050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004042:	5cd3      	ldrb	r3, [r2, r3]
 8004044:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004048:	4618      	mov	r0, r3
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40023800 	.word	0x40023800
 8004050:	08009068 	.word	0x08009068

08004054 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d105      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004078:	2b00      	cmp	r3, #0
 800407a:	d035      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800407c:	4b62      	ldr	r3, [pc, #392]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004082:	f7fc fadb 	bl	800063c <HAL_GetTick>
 8004086:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004088:	e008      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800408a:	f7fc fad7 	bl	800063c <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e0b0      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800409c:	4b5b      	ldr	r3, [pc, #364]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1f0      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	019a      	lsls	r2, r3, #6
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	071b      	lsls	r3, r3, #28
 80040b4:	4955      	ldr	r1, [pc, #340]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040bc:	4b52      	ldr	r3, [pc, #328]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040c2:	f7fc fabb 	bl	800063c <HAL_GetTick>
 80040c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040ca:	f7fc fab7 	bl	800063c <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e090      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040dc:	4b4b      	ldr	r3, [pc, #300]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 8083 	beq.w	80041fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	4b44      	ldr	r3, [pc, #272]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	4a43      	ldr	r2, [pc, #268]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004104:	6413      	str	r3, [r2, #64]	; 0x40
 8004106:	4b41      	ldr	r3, [pc, #260]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004112:	4b3f      	ldr	r3, [pc, #252]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a3e      	ldr	r2, [pc, #248]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800411e:	f7fc fa8d 	bl	800063c <HAL_GetTick>
 8004122:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004124:	e008      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004126:	f7fc fa89 	bl	800063c <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e062      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004138:	4b35      	ldr	r3, [pc, #212]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0f0      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004144:	4b31      	ldr	r3, [pc, #196]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d02f      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	429a      	cmp	r2, r3
 8004160:	d028      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004162:	4b2a      	ldr	r3, [pc, #168]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800416c:	4b29      	ldr	r3, [pc, #164]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800416e:	2201      	movs	r2, #1
 8004170:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004172:	4b28      	ldr	r3, [pc, #160]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004178:	4a24      	ldr	r2, [pc, #144]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800417e:	4b23      	ldr	r3, [pc, #140]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b01      	cmp	r3, #1
 8004188:	d114      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800418a:	f7fc fa57 	bl	800063c <HAL_GetTick>
 800418e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004190:	e00a      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004192:	f7fc fa53 	bl	800063c <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e02a      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a8:	4b18      	ldr	r3, [pc, #96]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0ee      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041c0:	d10d      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80041c2:	4b12      	ldr	r3, [pc, #72]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80041d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d6:	490d      	ldr	r1, [pc, #52]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	608b      	str	r3, [r1, #8]
 80041dc:	e005      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 80041de:	4b0b      	ldr	r3, [pc, #44]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	4a0a      	ldr	r2, [pc, #40]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041e4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041e8:	6093      	str	r3, [r2, #8]
 80041ea:	4b08      	ldr	r3, [pc, #32]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f6:	4905      	ldr	r1, [pc, #20]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	42470068 	.word	0x42470068
 800420c:	40023800 	.word	0x40023800
 8004210:	40007000 	.word	0x40007000
 8004214:	42470e40 	.word	0x42470e40

08004218 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d13d      	bne.n	80042b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004236:	4b22      	ldr	r3, [pc, #136]	; (80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800423e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d004      	beq.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004246:	2b01      	cmp	r3, #1
 8004248:	d12f      	bne.n	80042aa <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800424a:	4b1e      	ldr	r3, [pc, #120]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800424c:	617b      	str	r3, [r7, #20]
          break;
 800424e:	e02f      	b.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004250:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800425c:	d108      	bne.n	8004270 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800425e:	4b18      	ldr	r3, [pc, #96]	; (80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004266:	4a18      	ldr	r2, [pc, #96]	; (80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004268:	fbb2 f3f3 	udiv	r3, r2, r3
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	e007      	b.n	8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004270:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004278:	4a14      	ldr	r2, [pc, #80]	; (80042cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800427a:	fbb2 f3f3 	udiv	r3, r2, r3
 800427e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004280:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004286:	099b      	lsrs	r3, r3, #6
 8004288:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	fb02 f303 	mul.w	r3, r2, r3
 8004292:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004294:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800429a:	0f1b      	lsrs	r3, r3, #28
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a6:	617b      	str	r3, [r7, #20]
          break;
 80042a8:	e002      	b.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]
          break;
 80042ae:	bf00      	nop
        }
      }
      break;
 80042b0:	bf00      	nop
    }
  }
  return frequency;
 80042b2:	697b      	ldr	r3, [r7, #20]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	371c      	adds	r7, #28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	40023800 	.word	0x40023800
 80042c4:	00bb8000 	.word	0x00bb8000
 80042c8:	007a1200 	.word	0x007a1200
 80042cc:	00f42400 	.word	0x00f42400

080042d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e056      	b.n	8004390 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d106      	bne.n	8004302 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f003 fd51 	bl	8007da4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2202      	movs	r2, #2
 8004306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004318:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	ea42 0103 	orr.w	r1, r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	0c1b      	lsrs	r3, r3, #16
 8004360:	f003 0104 	and.w	r1, r3, #4
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	69da      	ldr	r2, [r3, #28]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800437e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e03f      	b.n	800442a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f003 fd38 	bl	8007e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2224      	movs	r2, #36	; 0x24
 80043c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f90b 	bl	80045f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b088      	sub	sp, #32
 8004436:	af02      	add	r7, sp, #8
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	603b      	str	r3, [r7, #0]
 800443e:	4613      	mov	r3, r2
 8004440:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b20      	cmp	r3, #32
 8004450:	f040 8083 	bne.w	800455a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <HAL_UART_Transmit+0x2e>
 800445a:	88fb      	ldrh	r3, [r7, #6]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e07b      	b.n	800455c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_UART_Transmit+0x40>
 800446e:	2302      	movs	r3, #2
 8004470:	e074      	b.n	800455c <HAL_UART_Transmit+0x12a>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2221      	movs	r2, #33	; 0x21
 8004484:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004488:	f7fc f8d8 	bl	800063c <HAL_GetTick>
 800448c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	88fa      	ldrh	r2, [r7, #6]
 8004492:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	88fa      	ldrh	r2, [r7, #6]
 8004498:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800449a:	e042      	b.n	8004522 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b2:	d122      	bne.n	80044fa <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2200      	movs	r2, #0
 80044bc:	2180      	movs	r1, #128	; 0x80
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 f850 	bl	8004564 <UART_WaitOnFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e046      	b.n	800455c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044e0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d103      	bne.n	80044f2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	3302      	adds	r3, #2
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	e017      	b.n	8004522 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	3301      	adds	r3, #1
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	e013      	b.n	8004522 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2200      	movs	r2, #0
 8004502:	2180      	movs	r1, #128	; 0x80
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 f82d 	bl	8004564 <UART_WaitOnFlagUntilTimeout>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e023      	b.n	800455c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	60ba      	str	r2, [r7, #8]
 800451a:	781a      	ldrb	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1b7      	bne.n	800449c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	2200      	movs	r2, #0
 8004534:	2140      	movs	r1, #64	; 0x40
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f814 	bl	8004564 <UART_WaitOnFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e00a      	b.n	800455c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	e000      	b.n	800455c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800455a:	2302      	movs	r3, #2
  }
}
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	4613      	mov	r3, r2
 8004572:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004574:	e02c      	b.n	80045d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457c:	d028      	beq.n	80045d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d007      	beq.n	8004594 <UART_WaitOnFlagUntilTimeout+0x30>
 8004584:	f7fc f85a 	bl	800063c <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	429a      	cmp	r2, r3
 8004592:	d21d      	bcs.n	80045d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695a      	ldr	r2, [r3, #20]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0201 	bic.w	r2, r2, #1
 80045b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e00f      	b.n	80045f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4013      	ands	r3, r2
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	429a      	cmp	r2, r3
 80045de:	bf0c      	ite	eq
 80045e0:	2301      	moveq	r3, #1
 80045e2:	2300      	movne	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d0c3      	beq.n	8004576 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f8:	b5b0      	push	{r4, r5, r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004638:	f023 030c 	bic.w	r3, r3, #12
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	68f9      	ldr	r1, [r7, #12]
 8004642:	430b      	orrs	r3, r1
 8004644:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699a      	ldr	r2, [r3, #24]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004664:	f040 80e4 	bne.w	8004830 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4aab      	ldr	r2, [pc, #684]	; (800491c <UART_SetConfig+0x324>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d004      	beq.n	800467c <UART_SetConfig+0x84>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4aaa      	ldr	r2, [pc, #680]	; (8004920 <UART_SetConfig+0x328>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d16c      	bne.n	8004756 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800467c:	f7ff fcd6 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 8004680:	4602      	mov	r2, r0
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	009a      	lsls	r2, r3, #2
 800468a:	441a      	add	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	fbb2 f3f3 	udiv	r3, r2, r3
 8004696:	4aa3      	ldr	r2, [pc, #652]	; (8004924 <UART_SetConfig+0x32c>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	011c      	lsls	r4, r3, #4
 80046a0:	f7ff fcc4 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 80046a4:	4602      	mov	r2, r0
 80046a6:	4613      	mov	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	009a      	lsls	r2, r3, #2
 80046ae:	441a      	add	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	fbb2 f5f3 	udiv	r5, r2, r3
 80046ba:	f7ff fcb7 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 80046be:	4602      	mov	r2, r0
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	009a      	lsls	r2, r3, #2
 80046c8:	441a      	add	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d4:	4a93      	ldr	r2, [pc, #588]	; (8004924 <UART_SetConfig+0x32c>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	2264      	movs	r2, #100	; 0x64
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	1aeb      	subs	r3, r5, r3
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	3332      	adds	r3, #50	; 0x32
 80046e8:	4a8e      	ldr	r2, [pc, #568]	; (8004924 <UART_SetConfig+0x32c>)
 80046ea:	fba2 2303 	umull	r2, r3, r2, r3
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046f6:	441c      	add	r4, r3
 80046f8:	f7ff fc98 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 80046fc:	4602      	mov	r2, r0
 80046fe:	4613      	mov	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	009a      	lsls	r2, r3, #2
 8004706:	441a      	add	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004712:	f7ff fc8b 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 8004716:	4602      	mov	r2, r0
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	009a      	lsls	r2, r3, #2
 8004720:	441a      	add	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	fbb2 f3f3 	udiv	r3, r2, r3
 800472c:	4a7d      	ldr	r2, [pc, #500]	; (8004924 <UART_SetConfig+0x32c>)
 800472e:	fba2 2303 	umull	r2, r3, r2, r3
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	2264      	movs	r2, #100	; 0x64
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	1aeb      	subs	r3, r5, r3
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	3332      	adds	r3, #50	; 0x32
 8004740:	4a78      	ldr	r2, [pc, #480]	; (8004924 <UART_SetConfig+0x32c>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	f003 0207 	and.w	r2, r3, #7
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4422      	add	r2, r4
 8004752:	609a      	str	r2, [r3, #8]
 8004754:	e154      	b.n	8004a00 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004756:	f7ff fc55 	bl	8004004 <HAL_RCC_GetPCLK1Freq>
 800475a:	4602      	mov	r2, r0
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	009a      	lsls	r2, r3, #2
 8004764:	441a      	add	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004770:	4a6c      	ldr	r2, [pc, #432]	; (8004924 <UART_SetConfig+0x32c>)
 8004772:	fba2 2303 	umull	r2, r3, r2, r3
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	011c      	lsls	r4, r3, #4
 800477a:	f7ff fc43 	bl	8004004 <HAL_RCC_GetPCLK1Freq>
 800477e:	4602      	mov	r2, r0
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	009a      	lsls	r2, r3, #2
 8004788:	441a      	add	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	fbb2 f5f3 	udiv	r5, r2, r3
 8004794:	f7ff fc36 	bl	8004004 <HAL_RCC_GetPCLK1Freq>
 8004798:	4602      	mov	r2, r0
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	009a      	lsls	r2, r3, #2
 80047a2:	441a      	add	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ae:	4a5d      	ldr	r2, [pc, #372]	; (8004924 <UART_SetConfig+0x32c>)
 80047b0:	fba2 2303 	umull	r2, r3, r2, r3
 80047b4:	095b      	lsrs	r3, r3, #5
 80047b6:	2264      	movs	r2, #100	; 0x64
 80047b8:	fb02 f303 	mul.w	r3, r2, r3
 80047bc:	1aeb      	subs	r3, r5, r3
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	3332      	adds	r3, #50	; 0x32
 80047c2:	4a58      	ldr	r2, [pc, #352]	; (8004924 <UART_SetConfig+0x32c>)
 80047c4:	fba2 2303 	umull	r2, r3, r2, r3
 80047c8:	095b      	lsrs	r3, r3, #5
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047d0:	441c      	add	r4, r3
 80047d2:	f7ff fc17 	bl	8004004 <HAL_RCC_GetPCLK1Freq>
 80047d6:	4602      	mov	r2, r0
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	009a      	lsls	r2, r3, #2
 80047e0:	441a      	add	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	fbb2 f5f3 	udiv	r5, r2, r3
 80047ec:	f7ff fc0a 	bl	8004004 <HAL_RCC_GetPCLK1Freq>
 80047f0:	4602      	mov	r2, r0
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	009a      	lsls	r2, r3, #2
 80047fa:	441a      	add	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	fbb2 f3f3 	udiv	r3, r2, r3
 8004806:	4a47      	ldr	r2, [pc, #284]	; (8004924 <UART_SetConfig+0x32c>)
 8004808:	fba2 2303 	umull	r2, r3, r2, r3
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	2264      	movs	r2, #100	; 0x64
 8004810:	fb02 f303 	mul.w	r3, r2, r3
 8004814:	1aeb      	subs	r3, r5, r3
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	3332      	adds	r3, #50	; 0x32
 800481a:	4a42      	ldr	r2, [pc, #264]	; (8004924 <UART_SetConfig+0x32c>)
 800481c:	fba2 2303 	umull	r2, r3, r2, r3
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	f003 0207 	and.w	r2, r3, #7
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4422      	add	r2, r4
 800482c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800482e:	e0e7      	b.n	8004a00 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a39      	ldr	r2, [pc, #228]	; (800491c <UART_SetConfig+0x324>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d004      	beq.n	8004844 <UART_SetConfig+0x24c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a38      	ldr	r2, [pc, #224]	; (8004920 <UART_SetConfig+0x328>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d171      	bne.n	8004928 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004844:	f7ff fbf2 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 8004848:	4602      	mov	r2, r0
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	009a      	lsls	r2, r3, #2
 8004852:	441a      	add	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	fbb2 f3f3 	udiv	r3, r2, r3
 800485e:	4a31      	ldr	r2, [pc, #196]	; (8004924 <UART_SetConfig+0x32c>)
 8004860:	fba2 2303 	umull	r2, r3, r2, r3
 8004864:	095b      	lsrs	r3, r3, #5
 8004866:	011c      	lsls	r4, r3, #4
 8004868:	f7ff fbe0 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 800486c:	4602      	mov	r2, r0
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	009a      	lsls	r2, r3, #2
 8004876:	441a      	add	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004882:	f7ff fbd3 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 8004886:	4602      	mov	r2, r0
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	009a      	lsls	r2, r3, #2
 8004890:	441a      	add	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	4a21      	ldr	r2, [pc, #132]	; (8004924 <UART_SetConfig+0x32c>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	2264      	movs	r2, #100	; 0x64
 80048a6:	fb02 f303 	mul.w	r3, r2, r3
 80048aa:	1aeb      	subs	r3, r5, r3
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	3332      	adds	r3, #50	; 0x32
 80048b0:	4a1c      	ldr	r2, [pc, #112]	; (8004924 <UART_SetConfig+0x32c>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048bc:	441c      	add	r4, r3
 80048be:	f7ff fbb5 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 80048c2:	4602      	mov	r2, r0
 80048c4:	4613      	mov	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	009a      	lsls	r2, r3, #2
 80048cc:	441a      	add	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	fbb2 f5f3 	udiv	r5, r2, r3
 80048d8:	f7ff fba8 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 80048dc:	4602      	mov	r2, r0
 80048de:	4613      	mov	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	009a      	lsls	r2, r3, #2
 80048e6:	441a      	add	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f2:	4a0c      	ldr	r2, [pc, #48]	; (8004924 <UART_SetConfig+0x32c>)
 80048f4:	fba2 2303 	umull	r2, r3, r2, r3
 80048f8:	095b      	lsrs	r3, r3, #5
 80048fa:	2264      	movs	r2, #100	; 0x64
 80048fc:	fb02 f303 	mul.w	r3, r2, r3
 8004900:	1aeb      	subs	r3, r5, r3
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	3332      	adds	r3, #50	; 0x32
 8004906:	4a07      	ldr	r2, [pc, #28]	; (8004924 <UART_SetConfig+0x32c>)
 8004908:	fba2 2303 	umull	r2, r3, r2, r3
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	f003 020f 	and.w	r2, r3, #15
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4422      	add	r2, r4
 8004918:	609a      	str	r2, [r3, #8]
 800491a:	e071      	b.n	8004a00 <UART_SetConfig+0x408>
 800491c:	40011000 	.word	0x40011000
 8004920:	40011400 	.word	0x40011400
 8004924:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004928:	f7ff fb6c 	bl	8004004 <HAL_RCC_GetPCLK1Freq>
 800492c:	4602      	mov	r2, r0
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	009a      	lsls	r2, r3, #2
 8004936:	441a      	add	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004942:	4a31      	ldr	r2, [pc, #196]	; (8004a08 <UART_SetConfig+0x410>)
 8004944:	fba2 2303 	umull	r2, r3, r2, r3
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	011c      	lsls	r4, r3, #4
 800494c:	f7ff fb5a 	bl	8004004 <HAL_RCC_GetPCLK1Freq>
 8004950:	4602      	mov	r2, r0
 8004952:	4613      	mov	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	009a      	lsls	r2, r3, #2
 800495a:	441a      	add	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	fbb2 f5f3 	udiv	r5, r2, r3
 8004966:	f7ff fb4d 	bl	8004004 <HAL_RCC_GetPCLK1Freq>
 800496a:	4602      	mov	r2, r0
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	009a      	lsls	r2, r3, #2
 8004974:	441a      	add	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004980:	4a21      	ldr	r2, [pc, #132]	; (8004a08 <UART_SetConfig+0x410>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	2264      	movs	r2, #100	; 0x64
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	1aeb      	subs	r3, r5, r3
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	3332      	adds	r3, #50	; 0x32
 8004994:	4a1c      	ldr	r2, [pc, #112]	; (8004a08 <UART_SetConfig+0x410>)
 8004996:	fba2 2303 	umull	r2, r3, r2, r3
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049a0:	441c      	add	r4, r3
 80049a2:	f7ff fb2f 	bl	8004004 <HAL_RCC_GetPCLK1Freq>
 80049a6:	4602      	mov	r2, r0
 80049a8:	4613      	mov	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	009a      	lsls	r2, r3, #2
 80049b0:	441a      	add	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	fbb2 f5f3 	udiv	r5, r2, r3
 80049bc:	f7ff fb22 	bl	8004004 <HAL_RCC_GetPCLK1Freq>
 80049c0:	4602      	mov	r2, r0
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	009a      	lsls	r2, r3, #2
 80049ca:	441a      	add	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d6:	4a0c      	ldr	r2, [pc, #48]	; (8004a08 <UART_SetConfig+0x410>)
 80049d8:	fba2 2303 	umull	r2, r3, r2, r3
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	2264      	movs	r2, #100	; 0x64
 80049e0:	fb02 f303 	mul.w	r3, r2, r3
 80049e4:	1aeb      	subs	r3, r5, r3
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	3332      	adds	r3, #50	; 0x32
 80049ea:	4a07      	ldr	r2, [pc, #28]	; (8004a08 <UART_SetConfig+0x410>)
 80049ec:	fba2 2303 	umull	r2, r3, r2, r3
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	f003 020f 	and.w	r2, r3, #15
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4422      	add	r2, r4
 80049fc:	609a      	str	r2, [r3, #8]
}
 80049fe:	e7ff      	b.n	8004a00 <UART_SetConfig+0x408>
 8004a00:	bf00      	nop
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bdb0      	pop	{r4, r5, r7, pc}
 8004a08:	51eb851f 	.word	0x51eb851f

08004a0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b084      	sub	sp, #16
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	f107 001c 	add.w	r0, r7, #28
 8004a1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d122      	bne.n	8004a6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d105      	bne.n	8004a5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f94a 	bl	8004cf8 <USB_CoreReset>
 8004a64:	4603      	mov	r3, r0
 8004a66:	73fb      	strb	r3, [r7, #15]
 8004a68:	e01a      	b.n	8004aa0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f93e 	bl	8004cf8 <USB_CoreReset>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d106      	bne.n	8004a94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
 8004a92:	e005      	b.n	8004aa0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d10b      	bne.n	8004abe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f043 0206 	orr.w	r2, r3, #6
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f043 0220 	orr.w	r2, r3, #32
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aca:	b004      	add	sp, #16
 8004acc:	4770      	bx	lr

08004ace <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f043 0201 	orr.w	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f023 0201 	bic.w	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d106      	bne.n	8004b3e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	60da      	str	r2, [r3, #12]
 8004b3c:	e00b      	b.n	8004b56 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b3e:	78fb      	ldrb	r3, [r7, #3]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d106      	bne.n	8004b52 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	60da      	str	r2, [r3, #12]
 8004b50:	e001      	b.n	8004b56 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e003      	b.n	8004b5e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004b56:	2032      	movs	r0, #50	; 0x32
 8004b58:	f7fb fd7c 	bl	8000654 <HAL_Delay>

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	019b      	lsls	r3, r3, #6
 8004b7a:	f043 0220 	orr.w	r2, r3, #32
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3301      	adds	r3, #1
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4a09      	ldr	r2, [pc, #36]	; (8004bb0 <USB_FlushTxFifo+0x48>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d901      	bls.n	8004b94 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e006      	b.n	8004ba2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d0f0      	beq.n	8004b82 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	00030d40 	.word	0x00030d40

08004bb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2210      	movs	r2, #16
 8004bc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4a09      	ldr	r2, [pc, #36]	; (8004bf4 <USB_FlushRxFifo+0x40>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d901      	bls.n	8004bd8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e006      	b.n	8004be6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b10      	cmp	r3, #16
 8004be2:	d0f0      	beq.n	8004bc6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	00030d40 	.word	0x00030d40

08004bf8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b089      	sub	sp, #36	; 0x24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	4611      	mov	r1, r2
 8004c04:	461a      	mov	r2, r3
 8004c06:	460b      	mov	r3, r1
 8004c08:	71fb      	strb	r3, [r7, #7]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004c16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d11a      	bne.n	8004c54 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c1e:	88bb      	ldrh	r3, [r7, #4]
 8004c20:	3303      	adds	r3, #3
 8004c22:	089b      	lsrs	r3, r3, #2
 8004c24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c26:	2300      	movs	r3, #0
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	e00f      	b.n	8004c4c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
 8004c2e:	031a      	lsls	r2, r3, #12
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c38:	461a      	mov	r2, r3
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	3304      	adds	r3, #4
 8004c44:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	61bb      	str	r3, [r7, #24]
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d3eb      	bcc.n	8004c2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3724      	adds	r7, #36	; 0x24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b089      	sub	sp, #36	; 0x24
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004c78:	88fb      	ldrh	r3, [r7, #6]
 8004c7a:	3303      	adds	r3, #3
 8004c7c:	089b      	lsrs	r3, r3, #2
 8004c7e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004c80:	2300      	movs	r3, #0
 8004c82:	61bb      	str	r3, [r7, #24]
 8004c84:	e00b      	b.n	8004c9e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	601a      	str	r2, [r3, #0]
    pDest++;
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	3304      	adds	r3, #4
 8004c96:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d3ef      	bcc.n	8004c86 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004ca6:	69fb      	ldr	r3, [r7, #28]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3724      	adds	r7, #36	; 0x24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	3301      	adds	r3, #1
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4a13      	ldr	r2, [pc, #76]	; (8004d5c <USB_CoreReset+0x64>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d901      	bls.n	8004d16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e01b      	b.n	8004d4e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	daf2      	bge.n	8004d04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f043 0201 	orr.w	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3301      	adds	r3, #1
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4a09      	ldr	r2, [pc, #36]	; (8004d5c <USB_CoreReset+0x64>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d901      	bls.n	8004d40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e006      	b.n	8004d4e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d0f0      	beq.n	8004d2e <USB_CoreReset+0x36>

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	00030d40 	.word	0x00030d40

08004d60 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d60:	b084      	sub	sp, #16
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b084      	sub	sp, #16
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	f107 001c 	add.w	r0, r7, #28
 8004d6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	2300      	movs	r3, #0
 8004d80:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d018      	beq.n	8004de4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d10a      	bne.n	8004dce <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dc6:	f043 0304 	orr.w	r3, r3, #4
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	e014      	b.n	8004df8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ddc:	f023 0304 	bic.w	r3, r3, #4
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	e009      	b.n	8004df8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004df2:	f023 0304 	bic.w	r3, r3, #4
 8004df6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004df8:	2110      	movs	r1, #16
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7ff feb4 	bl	8004b68 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff fed7 	bl	8004bb4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	e015      	b.n	8004e38 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e18:	461a      	mov	r2, r3
 8004e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e1e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	3301      	adds	r3, #1
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d3e5      	bcc.n	8004e0c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004e40:	2101      	movs	r1, #1
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f8ac 	bl	8004fa0 <USB_DriveVbus>

  HAL_Delay(200U);
 8004e48:	20c8      	movs	r0, #200	; 0xc8
 8004e4a:	f7fb fc03 	bl	8000654 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f04f 32ff 	mov.w	r2, #4294967295
 8004e5a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00b      	beq.n	8004e80 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e6e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a14      	ldr	r2, [pc, #80]	; (8004ec4 <USB_HostInit+0x164>)
 8004e74:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a13      	ldr	r2, [pc, #76]	; (8004ec8 <USB_HostInit+0x168>)
 8004e7a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004e7e:	e009      	b.n	8004e94 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2280      	movs	r2, #128	; 0x80
 8004e84:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a10      	ldr	r2, [pc, #64]	; (8004ecc <USB_HostInit+0x16c>)
 8004e8a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a10      	ldr	r2, [pc, #64]	; (8004ed0 <USB_HostInit+0x170>)
 8004e90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d105      	bne.n	8004ea6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f043 0210 	orr.w	r2, r3, #16
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699a      	ldr	r2, [r3, #24]
 8004eaa:	4b0a      	ldr	r3, [pc, #40]	; (8004ed4 <USB_HostInit+0x174>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ebe:	b004      	add	sp, #16
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	01000200 	.word	0x01000200
 8004ec8:	00e00300 	.word	0x00e00300
 8004ecc:	00600080 	.word	0x00600080
 8004ed0:	004000e0 	.word	0x004000e0
 8004ed4:	a3200008 	.word	0xa3200008

08004ed8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ef6:	f023 0303 	bic.w	r3, r3, #3
 8004efa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	78fb      	ldrb	r3, [r7, #3]
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	68f9      	ldr	r1, [r7, #12]
 8004f0c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f10:	4313      	orrs	r3, r2
 8004f12:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d107      	bne.n	8004f2a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f20:	461a      	mov	r2, r3
 8004f22:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004f26:	6053      	str	r3, [r2, #4]
 8004f28:	e009      	b.n	8004f3e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d106      	bne.n	8004f3e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f36:	461a      	mov	r2, r3
 8004f38:	f241 7370 	movw	r3, #6000	; 0x1770
 8004f3c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f6c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f7a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004f7c:	2064      	movs	r0, #100	; 0x64
 8004f7e:	f7fb fb69 	bl	8000654 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f8e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004f90:	200a      	movs	r0, #10
 8004f92:	f7fb fb5f 	bl	8000654 <HAL_Delay>

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004fc4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d109      	bne.n	8004fe4 <USB_DriveVbus+0x44>
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d106      	bne.n	8004fe4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004fde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004fe2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fee:	d109      	bne.n	8005004 <USB_DriveVbus+0x64>
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ffe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005002:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005012:	b480      	push	{r7}
 8005014:	b085      	sub	sp, #20
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	0c5b      	lsrs	r3, r3, #17
 8005030:	f003 0303 	and.w	r3, r3, #3
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	b29b      	uxth	r3, r3
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
	...

08005064 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	4608      	mov	r0, r1
 800506e:	4611      	mov	r1, r2
 8005070:	461a      	mov	r2, r3
 8005072:	4603      	mov	r3, r0
 8005074:	70fb      	strb	r3, [r7, #3]
 8005076:	460b      	mov	r3, r1
 8005078:	70bb      	strb	r3, [r7, #2]
 800507a:	4613      	mov	r3, r2
 800507c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005086:	78fb      	ldrb	r3, [r7, #3]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4413      	add	r3, r2
 800508e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005092:	461a      	mov	r2, r3
 8005094:	f04f 33ff 	mov.w	r3, #4294967295
 8005098:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800509a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d87e      	bhi.n	80051a0 <USB_HC_Init+0x13c>
 80050a2:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <USB_HC_Init+0x44>)
 80050a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a8:	080050b9 	.word	0x080050b9
 80050ac:	08005163 	.word	0x08005163
 80050b0:	080050b9 	.word	0x080050b9
 80050b4:	08005125 	.word	0x08005125
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c4:	461a      	mov	r2, r3
 80050c6:	f240 439d 	movw	r3, #1181	; 0x49d
 80050ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80050cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	da10      	bge.n	80050f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80050d4:	78fb      	ldrb	r3, [r7, #3]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	78fa      	ldrb	r2, [r7, #3]
 80050e4:	0151      	lsls	r1, r2, #5
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	440a      	add	r2, r1
 80050ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80050f4:	e057      	b.n	80051a6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d051      	beq.n	80051a6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005102:	78fb      	ldrb	r3, [r7, #3]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	4413      	add	r3, r2
 800510a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	78fa      	ldrb	r2, [r7, #3]
 8005112:	0151      	lsls	r1, r2, #5
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	440a      	add	r2, r1
 8005118:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800511c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005120:	60d3      	str	r3, [r2, #12]
      break;
 8005122:	e040      	b.n	80051a6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005124:	78fb      	ldrb	r3, [r7, #3]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	4413      	add	r3, r2
 800512c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005130:	461a      	mov	r2, r3
 8005132:	f240 639d 	movw	r3, #1693	; 0x69d
 8005136:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005138:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800513c:	2b00      	cmp	r3, #0
 800513e:	da34      	bge.n	80051aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	4413      	add	r3, r2
 8005148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	78fa      	ldrb	r2, [r7, #3]
 8005150:	0151      	lsls	r1, r2, #5
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	440a      	add	r2, r1
 8005156:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800515a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800515e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005160:	e023      	b.n	80051aa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005162:	78fb      	ldrb	r3, [r7, #3]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	4413      	add	r3, r2
 800516a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516e:	461a      	mov	r2, r3
 8005170:	f240 2325 	movw	r3, #549	; 0x225
 8005174:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005176:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800517a:	2b00      	cmp	r3, #0
 800517c:	da17      	bge.n	80051ae <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800517e:	78fb      	ldrb	r3, [r7, #3]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4413      	add	r3, r2
 8005186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	78fa      	ldrb	r2, [r7, #3]
 800518e:	0151      	lsls	r1, r2, #5
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	440a      	add	r2, r1
 8005194:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005198:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800519c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800519e:	e006      	b.n	80051ae <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	75fb      	strb	r3, [r7, #23]
      break;
 80051a4:	e004      	b.n	80051b0 <USB_HC_Init+0x14c>
      break;
 80051a6:	bf00      	nop
 80051a8:	e002      	b.n	80051b0 <USB_HC_Init+0x14c>
      break;
 80051aa:	bf00      	nop
 80051ac:	e000      	b.n	80051b0 <USB_HC_Init+0x14c>
      break;
 80051ae:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	2101      	movs	r1, #1
 80051c0:	fa01 f303 	lsl.w	r3, r1, r3
 80051c4:	68b9      	ldr	r1, [r7, #8]
 80051c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051ca:	4313      	orrs	r3, r2
 80051cc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80051da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	da03      	bge.n	80051ea <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80051e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	e001      	b.n	80051ee <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80051ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d103      	bne.n	80051fe <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80051f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	e001      	b.n	8005202 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005202:	787b      	ldrb	r3, [r7, #1]
 8005204:	059b      	lsls	r3, r3, #22
 8005206:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800520a:	78bb      	ldrb	r3, [r7, #2]
 800520c:	02db      	lsls	r3, r3, #11
 800520e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005212:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005214:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005218:	049b      	lsls	r3, r3, #18
 800521a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800521e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005220:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005222:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005226:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	0159      	lsls	r1, r3, #5
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	440b      	add	r3, r1
 8005234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005238:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800523e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005240:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005244:	2b03      	cmp	r3, #3
 8005246:	d10f      	bne.n	8005268 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4413      	add	r3, r2
 8005250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	78fa      	ldrb	r2, [r7, #3]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	440a      	add	r2, r1
 800525e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005262:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005266:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005268:	7dfb      	ldrb	r3, [r7, #23]
}
 800526a:	4618      	mov	r0, r3
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop

08005278 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08c      	sub	sp, #48	; 0x30
 800527c:	af02      	add	r7, sp, #8
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	4613      	mov	r3, r2
 8005284:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	785b      	ldrb	r3, [r3, #1]
 800528e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005294:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d028      	beq.n	80052f4 <USB_HC_StartXfer+0x7c>
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	791b      	ldrb	r3, [r3, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d124      	bne.n	80052f4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10b      	bne.n	80052c8 <USB_HC_StartXfer+0x50>
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	795b      	ldrb	r3, [r3, #5]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d107      	bne.n	80052c8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	4619      	mov	r1, r3
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 fa2e 	bl	8005720 <USB_DoPing>
      return HAL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	e112      	b.n	80054ee <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80052c8:	79fb      	ldrb	r3, [r7, #7]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d112      	bne.n	80052f4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	0151      	lsls	r1, r2, #5
 80052e0:	6a3a      	ldr	r2, [r7, #32]
 80052e2:	440a      	add	r2, r1
 80052e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052e8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80052ec:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2200      	movs	r2, #0
 80052f2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d018      	beq.n	800532e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	8912      	ldrh	r2, [r2, #8]
 8005304:	4413      	add	r3, r2
 8005306:	3b01      	subs	r3, #1
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	8912      	ldrh	r2, [r2, #8]
 800530c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005310:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005312:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005314:	8b7b      	ldrh	r3, [r7, #26]
 8005316:	429a      	cmp	r2, r3
 8005318:	d90b      	bls.n	8005332 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800531a:	8b7b      	ldrh	r3, [r7, #26]
 800531c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800531e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	8912      	ldrh	r2, [r2, #8]
 8005324:	fb02 f203 	mul.w	r2, r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	611a      	str	r2, [r3, #16]
 800532c:	e001      	b.n	8005332 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800532e:	2301      	movs	r3, #1
 8005330:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	78db      	ldrb	r3, [r3, #3]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d006      	beq.n	8005348 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800533a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	8912      	ldrh	r2, [r2, #8]
 8005340:	fb02 f203 	mul.w	r2, r2, r3
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005350:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005352:	04d9      	lsls	r1, r3, #19
 8005354:	4b68      	ldr	r3, [pc, #416]	; (80054f8 <USB_HC_StartXfer+0x280>)
 8005356:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005358:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	7a9b      	ldrb	r3, [r3, #10]
 800535e:	075b      	lsls	r3, r3, #29
 8005360:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005364:	69f9      	ldr	r1, [r7, #28]
 8005366:	0148      	lsls	r0, r1, #5
 8005368:	6a39      	ldr	r1, [r7, #32]
 800536a:	4401      	add	r1, r0
 800536c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005370:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005372:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005374:	79fb      	ldrb	r3, [r7, #7]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d009      	beq.n	800538e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	68d9      	ldr	r1, [r3, #12]
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	4413      	add	r3, r2
 8005386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538a:	460a      	mov	r2, r1
 800538c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	bf0c      	ite	eq
 800539e:	2301      	moveq	r3, #1
 80053a0:	2300      	movne	r3, #0
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	69fa      	ldr	r2, [r7, #28]
 80053b6:	0151      	lsls	r1, r2, #5
 80053b8:	6a3a      	ldr	r2, [r7, #32]
 80053ba:	440a      	add	r2, r1
 80053bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80053c4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	7e7b      	ldrb	r3, [r7, #25]
 80053d6:	075b      	lsls	r3, r3, #29
 80053d8:	69f9      	ldr	r1, [r7, #28]
 80053da:	0148      	lsls	r0, r1, #5
 80053dc:	6a39      	ldr	r1, [r7, #32]
 80053de:	4401      	add	r1, r0
 80053e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80053e4:	4313      	orrs	r3, r2
 80053e6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a41      	ldr	r2, [pc, #260]	; (80054fc <USB_HC_StartXfer+0x284>)
 80053f8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053fa:	4b40      	ldr	r3, [pc, #256]	; (80054fc <USB_HC_StartXfer+0x284>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005402:	4a3e      	ldr	r2, [pc, #248]	; (80054fc <USB_HC_StartXfer+0x284>)
 8005404:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	78db      	ldrb	r3, [r3, #3]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d006      	beq.n	800541c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800540e:	4b3b      	ldr	r3, [pc, #236]	; (80054fc <USB_HC_StartXfer+0x284>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005416:	4a39      	ldr	r2, [pc, #228]	; (80054fc <USB_HC_StartXfer+0x284>)
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	e005      	b.n	8005428 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800541c:	4b37      	ldr	r3, [pc, #220]	; (80054fc <USB_HC_StartXfer+0x284>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005424:	4a35      	ldr	r2, [pc, #212]	; (80054fc <USB_HC_StartXfer+0x284>)
 8005426:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005428:	4b34      	ldr	r3, [pc, #208]	; (80054fc <USB_HC_StartXfer+0x284>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005430:	4a32      	ldr	r2, [pc, #200]	; (80054fc <USB_HC_StartXfer+0x284>)
 8005432:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	4413      	add	r3, r2
 800543c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005440:	461a      	mov	r2, r3
 8005442:	4b2e      	ldr	r3, [pc, #184]	; (80054fc <USB_HC_StartXfer+0x284>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d14e      	bne.n	80054ec <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	78db      	ldrb	r3, [r3, #3]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d14a      	bne.n	80054ec <USB_HC_StartXfer+0x274>
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d046      	beq.n	80054ec <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	79db      	ldrb	r3, [r3, #7]
 8005462:	2b03      	cmp	r3, #3
 8005464:	d830      	bhi.n	80054c8 <USB_HC_StartXfer+0x250>
 8005466:	a201      	add	r2, pc, #4	; (adr r2, 800546c <USB_HC_StartXfer+0x1f4>)
 8005468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546c:	0800547d 	.word	0x0800547d
 8005470:	080054a1 	.word	0x080054a1
 8005474:	0800547d 	.word	0x0800547d
 8005478:	080054a1 	.word	0x080054a1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	3303      	adds	r3, #3
 8005482:	089b      	lsrs	r3, r3, #2
 8005484:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005486:	8afa      	ldrh	r2, [r7, #22]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	b29b      	uxth	r3, r3
 800548e:	429a      	cmp	r2, r3
 8005490:	d91c      	bls.n	80054cc <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f043 0220 	orr.w	r2, r3, #32
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	619a      	str	r2, [r3, #24]
          }
          break;
 800549e:	e015      	b.n	80054cc <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	3303      	adds	r3, #3
 80054a6:	089b      	lsrs	r3, r3, #2
 80054a8:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80054aa:	8afa      	ldrh	r2, [r7, #22]
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d90a      	bls.n	80054d0 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	619a      	str	r2, [r3, #24]
          }
          break;
 80054c6:	e003      	b.n	80054d0 <USB_HC_StartXfer+0x258>

        default:
          break;
 80054c8:	bf00      	nop
 80054ca:	e002      	b.n	80054d2 <USB_HC_StartXfer+0x25a>
          break;
 80054cc:	bf00      	nop
 80054ce:	e000      	b.n	80054d2 <USB_HC_StartXfer+0x25a>
          break;
 80054d0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	68d9      	ldr	r1, [r3, #12]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	785a      	ldrb	r2, [r3, #1]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	b298      	uxth	r0, r3
 80054e0:	2300      	movs	r3, #0
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	4603      	mov	r3, r0
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f7ff fb86 	bl	8004bf8 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3728      	adds	r7, #40	; 0x28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	1ff80000 	.word	0x1ff80000
 80054fc:	200000ac 	.word	0x200000ac

08005500 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	b29b      	uxth	r3, r3
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005522:	b480      	push	{r7}
 8005524:	b087      	sub	sp, #28
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	460b      	mov	r3, r1
 800552c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005532:	78fb      	ldrb	r3, [r7, #3]
 8005534:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	4413      	add	r3, r2
 8005542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	0c9b      	lsrs	r3, r3, #18
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <USB_HC_Halt+0x3a>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b02      	cmp	r3, #2
 800555a:	d16c      	bne.n	8005636 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4413      	add	r3, r2
 8005564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	0151      	lsls	r1, r2, #5
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	440a      	add	r2, r1
 8005572:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005576:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800557a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d143      	bne.n	8005610 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	4413      	add	r3, r2
 8005590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	440a      	add	r2, r1
 800559e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	0151      	lsls	r1, r2, #5
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	440a      	add	r2, r1
 80055be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	0151      	lsls	r1, r2, #5
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	440a      	add	r2, r1
 80055de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055e6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	3301      	adds	r3, #1
 80055ec:	617b      	str	r3, [r7, #20]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055f4:	d81d      	bhi.n	8005632 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800560c:	d0ec      	beq.n	80055e8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800560e:	e080      	b.n	8005712 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	4413      	add	r3, r2
 8005618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	0151      	lsls	r1, r2, #5
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	440a      	add	r2, r1
 8005626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800562a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800562e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005630:	e06f      	b.n	8005712 <USB_HC_Halt+0x1f0>
          break;
 8005632:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005634:	e06d      	b.n	8005712 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	4413      	add	r3, r2
 800563e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	0151      	lsls	r1, r2, #5
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	440a      	add	r2, r1
 800564c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005650:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005654:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d143      	bne.n	80056ee <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	4413      	add	r3, r2
 800566e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	0151      	lsls	r1, r2, #5
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	440a      	add	r2, r1
 800567c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005680:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005684:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	4413      	add	r3, r2
 800568e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	440a      	add	r2, r1
 800569c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056a4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	0151      	lsls	r1, r2, #5
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	440a      	add	r2, r1
 80056bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056c4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	3301      	adds	r3, #1
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056d2:	d81d      	bhi.n	8005710 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056ea:	d0ec      	beq.n	80056c6 <USB_HC_Halt+0x1a4>
 80056ec:	e011      	b.n	8005712 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	0151      	lsls	r1, r2, #5
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	440a      	add	r2, r1
 8005704:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005708:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	e000      	b.n	8005712 <USB_HC_Halt+0x1f0>
          break;
 8005710:	bf00      	nop
    }
  }

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	371c      	adds	r7, #28
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005734:	2301      	movs	r3, #1
 8005736:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	04da      	lsls	r2, r3, #19
 800573c:	4b15      	ldr	r3, [pc, #84]	; (8005794 <USB_DoPing+0x74>)
 800573e:	4013      	ands	r3, r2
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	0151      	lsls	r1, r2, #5
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	440a      	add	r2, r1
 8005748:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800574c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005750:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	4413      	add	r3, r2
 800575a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005768:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005770:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	4413      	add	r3, r2
 800577a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577e:	461a      	mov	r2, r3
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	1ff80000 	.word	0x1ff80000

08005798 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff f9a1 	bl	8004af0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80057ae:	2110      	movs	r1, #16
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7ff f9d9 	bl	8004b68 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff f9fc 	bl	8004bb4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80057bc:	2300      	movs	r3, #0
 80057be:	613b      	str	r3, [r7, #16]
 80057c0:	e01f      	b.n	8005802 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057e8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f6:	461a      	mov	r2, r3
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	3301      	adds	r3, #1
 8005800:	613b      	str	r3, [r7, #16]
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	2b0f      	cmp	r3, #15
 8005806:	d9dc      	bls.n	80057c2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005808:	2300      	movs	r3, #0
 800580a:	613b      	str	r3, [r7, #16]
 800580c:	e034      	b.n	8005878 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4413      	add	r3, r2
 8005816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005824:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800582c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005834:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4413      	add	r3, r2
 800583e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005842:	461a      	mov	r2, r3
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	3301      	adds	r3, #1
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005854:	d80c      	bhi.n	8005870 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4413      	add	r3, r2
 800585e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800586c:	d0ec      	beq.n	8005848 <USB_StopHost+0xb0>
 800586e:	e000      	b.n	8005872 <USB_StopHost+0xda>
        break;
 8005870:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	3301      	adds	r3, #1
 8005876:	613b      	str	r3, [r7, #16]
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	2b0f      	cmp	r3, #15
 800587c:	d9c7      	bls.n	800580e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005884:	461a      	mov	r2, r3
 8005886:	f04f 33ff 	mov.w	r3, #4294967295
 800588a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f04f 32ff 	mov.w	r2, #4294967295
 8005892:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff f91a 	bl	8004ace <USB_EnableGlobalInt>

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80058a4:	b590      	push	{r4, r7, lr}
 80058a6:	b089      	sub	sp, #36	; 0x24
 80058a8:	af04      	add	r7, sp, #16
 80058aa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 80058ac:	2302      	movs	r3, #2
 80058ae:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 80058b0:	2301      	movs	r3, #1
 80058b2:	2202      	movs	r2, #2
 80058b4:	2102      	movs	r1, #2
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fc3a 	bl	8006130 <USBH_FindInterface>
 80058bc:	4603      	mov	r3, r0
 80058be:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 80058c0:	7bbb      	ldrb	r3, [r7, #14]
 80058c2:	2bff      	cmp	r3, #255	; 0xff
 80058c4:	f000 812a 	beq.w	8005b1c <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80058c8:	7bbb      	ldrb	r3, [r7, #14]
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 fc13 	bl	80060f8 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80058d8:	2050      	movs	r0, #80	; 0x50
 80058da:	f002 ff6f 	bl	80087bc <malloc>
 80058de:	4603      	mov	r3, r0
 80058e0:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80058ec:	7bbb      	ldrb	r3, [r7, #14]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	211a      	movs	r1, #26
 80058f2:	fb01 f303 	mul.w	r3, r1, r3
 80058f6:	4413      	add	r3, r2
 80058f8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	b25b      	sxtb	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	da15      	bge.n	8005930 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005904:	7bbb      	ldrb	r3, [r7, #14]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	211a      	movs	r1, #26
 800590a:	fb01 f303 	mul.w	r3, r1, r3
 800590e:	4413      	add	r3, r2
 8005910:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005914:	781a      	ldrb	r2, [r3, #0]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800591a:	7bbb      	ldrb	r3, [r7, #14]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	211a      	movs	r1, #26
 8005920:	fb01 f303 	mul.w	r3, r1, r3
 8005924:	4413      	add	r3, r2
 8005926:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800592a:	881a      	ldrh	r2, [r3, #0]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	785b      	ldrb	r3, [r3, #1]
 8005934:	4619      	mov	r1, r3
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f001 fd21 	bl	800737e <USBH_AllocPipe>
 800593c:	4603      	mov	r3, r0
 800593e:	461a      	mov	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	7819      	ldrb	r1, [r3, #0]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	7858      	ldrb	r0, [r3, #1]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	8952      	ldrh	r2, [r2, #10]
 800595c:	9202      	str	r2, [sp, #8]
 800595e:	2203      	movs	r2, #3
 8005960:	9201      	str	r2, [sp, #4]
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	4623      	mov	r3, r4
 8005966:	4602      	mov	r2, r0
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f001 fcd9 	bl	8007320 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2200      	movs	r2, #0
 8005974:	4619      	mov	r1, r3
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f002 fe46 	bl	8008608 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800597c:	2300      	movs	r3, #0
 800597e:	2200      	movs	r2, #0
 8005980:	210a      	movs	r1, #10
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fbd4 	bl	8006130 <USBH_FindInterface>
 8005988:	4603      	mov	r3, r0
 800598a:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800598c:	7bbb      	ldrb	r3, [r7, #14]
 800598e:	2bff      	cmp	r3, #255	; 0xff
 8005990:	f000 80c4 	beq.w	8005b1c <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005994:	7bbb      	ldrb	r3, [r7, #14]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	211a      	movs	r1, #26
 800599a:	fb01 f303 	mul.w	r3, r1, r3
 800599e:	4413      	add	r3, r2
 80059a0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	b25b      	sxtb	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	da16      	bge.n	80059da <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80059ac:	7bbb      	ldrb	r3, [r7, #14]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	211a      	movs	r1, #26
 80059b2:	fb01 f303 	mul.w	r3, r1, r3
 80059b6:	4413      	add	r3, r2
 80059b8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80059bc:	781a      	ldrb	r2, [r3, #0]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80059c2:	7bbb      	ldrb	r3, [r7, #14]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	211a      	movs	r1, #26
 80059c8:	fb01 f303 	mul.w	r3, r1, r3
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80059d2:	881a      	ldrh	r2, [r3, #0]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	835a      	strh	r2, [r3, #26]
 80059d8:	e015      	b.n	8005a06 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80059da:	7bbb      	ldrb	r3, [r7, #14]
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	211a      	movs	r1, #26
 80059e0:	fb01 f303 	mul.w	r3, r1, r3
 80059e4:	4413      	add	r3, r2
 80059e6:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80059ea:	781a      	ldrb	r2, [r3, #0]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80059f0:	7bbb      	ldrb	r3, [r7, #14]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	211a      	movs	r1, #26
 80059f6:	fb01 f303 	mul.w	r3, r1, r3
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005a00:	881a      	ldrh	r2, [r3, #0]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005a06:	7bbb      	ldrb	r3, [r7, #14]
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	211a      	movs	r1, #26
 8005a0c:	fb01 f303 	mul.w	r3, r1, r3
 8005a10:	4413      	add	r3, r2
 8005a12:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	b25b      	sxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	da16      	bge.n	8005a4c <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005a1e:	7bbb      	ldrb	r3, [r7, #14]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	211a      	movs	r1, #26
 8005a24:	fb01 f303 	mul.w	r3, r1, r3
 8005a28:	4413      	add	r3, r2
 8005a2a:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005a2e:	781a      	ldrb	r2, [r3, #0]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005a34:	7bbb      	ldrb	r3, [r7, #14]
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	211a      	movs	r1, #26
 8005a3a:	fb01 f303 	mul.w	r3, r1, r3
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005a44:	881a      	ldrh	r2, [r3, #0]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	835a      	strh	r2, [r3, #26]
 8005a4a:	e015      	b.n	8005a78 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005a4c:	7bbb      	ldrb	r3, [r7, #14]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	211a      	movs	r1, #26
 8005a52:	fb01 f303 	mul.w	r3, r1, r3
 8005a56:	4413      	add	r3, r2
 8005a58:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005a5c:	781a      	ldrb	r2, [r3, #0]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005a62:	7bbb      	ldrb	r3, [r7, #14]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	211a      	movs	r1, #26
 8005a68:	fb01 f303 	mul.w	r3, r1, r3
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005a72:	881a      	ldrh	r2, [r3, #0]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	7b9b      	ldrb	r3, [r3, #14]
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f001 fc7d 	bl	800737e <USBH_AllocPipe>
 8005a84:	4603      	mov	r3, r0
 8005a86:	461a      	mov	r2, r3
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	7bdb      	ldrb	r3, [r3, #15]
 8005a90:	4619      	mov	r1, r3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f001 fc73 	bl	800737e <USBH_AllocPipe>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	7b59      	ldrb	r1, [r3, #13]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	7b98      	ldrb	r0, [r3, #14]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	8b12      	ldrh	r2, [r2, #24]
 8005ab8:	9202      	str	r2, [sp, #8]
 8005aba:	2202      	movs	r2, #2
 8005abc:	9201      	str	r2, [sp, #4]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	4623      	mov	r3, r4
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f001 fc2b 	bl	8007320 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	7b19      	ldrb	r1, [r3, #12]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	7bd8      	ldrb	r0, [r3, #15]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	8b52      	ldrh	r2, [r2, #26]
 8005ae2:	9202      	str	r2, [sp, #8]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	9201      	str	r2, [sp, #4]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	4623      	mov	r3, r4
 8005aec:	4602      	mov	r2, r0
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f001 fc16 	bl	8007320 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	7b5b      	ldrb	r3, [r3, #13]
 8005b00:	2200      	movs	r2, #0
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f002 fd7f 	bl	8008608 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	7b1b      	ldrb	r3, [r3, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	4619      	mov	r1, r3
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f002 fd78 	bl	8008608 <USBH_LL_SetToggle>
      status = USBH_OK;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd90      	pop	{r4, r7, pc}

08005b26 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b084      	sub	sp, #16
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00e      	beq.n	8005b5e <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	4619      	mov	r1, r3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f001 fc09 	bl	800735e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	4619      	mov	r1, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f001 fc31 	bl	80073ba <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	7b1b      	ldrb	r3, [r3, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00e      	beq.n	8005b84 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	7b1b      	ldrb	r3, [r3, #12]
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f001 fbf6 	bl	800735e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	7b1b      	ldrb	r3, [r3, #12]
 8005b76:	4619      	mov	r1, r3
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f001 fc1e 	bl	80073ba <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	7b5b      	ldrb	r3, [r3, #13]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00e      	beq.n	8005baa <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	7b5b      	ldrb	r3, [r3, #13]
 8005b90:	4619      	mov	r1, r3
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f001 fbe3 	bl	800735e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	7b5b      	ldrb	r3, [r3, #13]
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f001 fc0b 	bl	80073ba <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00b      	beq.n	8005bce <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f002 fe04 	bl	80087cc <free>
    phost->pActiveClass->pData = 0U;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005bca:	2200      	movs	r2, #0
 8005bcc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005be0:	2302      	movs	r3, #2
 8005be2:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	3340      	adds	r3, #64	; 0x40
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f8b2 	bl	8005d5e <GetLineCoding>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d105      	bne.n	8005c10 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005c0a:	2102      	movs	r1, #2
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	4798      	blx	r3
  }
  return status;
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005c24:	2301      	movs	r3, #1
 8005c26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d877      	bhi.n	8005d30 <USBH_CDC_Process+0x114>
 8005c40:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <USBH_CDC_Process+0x2c>)
 8005c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c46:	bf00      	nop
 8005c48:	08005c5d 	.word	0x08005c5d
 8005c4c:	08005c63 	.word	0x08005c63
 8005c50:	08005c93 	.word	0x08005c93
 8005c54:	08005d07 	.word	0x08005d07
 8005c58:	08005d15 	.word	0x08005d15
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8005c60:	e06d      	b.n	8005d3e <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c66:	4619      	mov	r1, r3
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f897 	bl	8005d9c <SetLineCoding>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005c72:	7bbb      	ldrb	r3, [r7, #14]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d104      	bne.n	8005c82 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005c80:	e058      	b.n	8005d34 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8005c82:	7bbb      	ldrb	r3, [r7, #14]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d055      	beq.n	8005d34 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2204      	movs	r2, #4
 8005c8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005c90:	e050      	b.n	8005d34 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	3340      	adds	r3, #64	; 0x40
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f860 	bl	8005d5e <GetLineCoding>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005ca2:	7bbb      	ldrb	r3, [r7, #14]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d126      	bne.n	8005cf6 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cba:	791b      	ldrb	r3, [r3, #4]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d13b      	bne.n	8005d38 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cca:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d133      	bne.n	8005d38 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cda:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d12b      	bne.n	8005d38 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce8:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d124      	bne.n	8005d38 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f95a 	bl	8005fa8 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005cf4:	e020      	b.n	8005d38 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8005cf6:	7bbb      	ldrb	r3, [r7, #14]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d01d      	beq.n	8005d38 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2204      	movs	r2, #4
 8005d00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005d04:	e018      	b.n	8005d38 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f867 	bl	8005dda <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f8dc 	bl	8005eca <CDC_ProcessReception>
    break;
 8005d12:	e014      	b.n	8005d3e <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005d14:	2100      	movs	r1, #0
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fece 	bl	8006ab8 <USBH_ClrFeature>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8005d20:	7bbb      	ldrb	r3, [r7, #14]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10a      	bne.n	8005d3c <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8005d2e:	e005      	b.n	8005d3c <USBH_CDC_Process+0x120>

  default:
    break;
 8005d30:	bf00      	nop
 8005d32:	e004      	b.n	8005d3e <USBH_CDC_Process+0x122>
    break;
 8005d34:	bf00      	nop
 8005d36:	e002      	b.n	8005d3e <USBH_CDC_Process+0x122>
    break;
 8005d38:	bf00      	nop
 8005d3a:	e000      	b.n	8005d3e <USBH_CDC_Process+0x122>
    break;
 8005d3c:	bf00      	nop

  }

  return status;
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b082      	sub	sp, #8
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	22a1      	movs	r2, #161	; 0xa1
 8005d6c:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2221      	movs	r2, #33	; 0x21
 8005d72:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2207      	movs	r2, #7
 8005d84:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2207      	movs	r2, #7
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f001 f873 	bl	8006e78 <USBH_CtlReq>
 8005d92:	4603      	mov	r3, r0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2221      	movs	r2, #33	; 0x21
 8005daa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2220      	movs	r2, #32
 8005db0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2207      	movs	r2, #7
 8005dc2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2207      	movs	r2, #7
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f001 f854 	bl	8006e78 <USBH_CtlReq>
 8005dd0:	4603      	mov	r3, r0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b086      	sub	sp, #24
 8005dde:	af02      	add	r7, sp, #8
 8005de0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005dec:	2300      	movs	r3, #0
 8005dee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d002      	beq.n	8005e00 <CDC_ProcessTransmission+0x26>
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d025      	beq.n	8005e4a <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8005dfe:	e060      	b.n	8005ec2 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	8b12      	ldrh	r2, [r2, #24]
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d90c      	bls.n	8005e26 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	69d9      	ldr	r1, [r3, #28]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8b1a      	ldrh	r2, [r3, #24]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	7b58      	ldrb	r0, [r3, #13]
 8005e18:	2301      	movs	r3, #1
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f001 fa3b 	bl	800729a <USBH_BulkSendData>
 8005e24:	e00c      	b.n	8005e40 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	7b58      	ldrb	r0, [r3, #13]
 8005e34:	2301      	movs	r3, #1
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	4603      	mov	r3, r0
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f001 fa2d 	bl	800729a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005e48:	e03b      	b.n	8005ec2 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	7b5b      	ldrb	r3, [r3, #13]
 8005e4e:	4619      	mov	r1, r3
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f002 fbaf 	bl	80085b4 <USBH_LL_GetURBState>
 8005e56:	4603      	mov	r3, r0
 8005e58:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8005e5a:	7afb      	ldrb	r3, [r7, #11]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d128      	bne.n	8005eb2 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	8b12      	ldrh	r2, [r2, #24]
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d90e      	bls.n	8005e8a <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	8b12      	ldrh	r2, [r2, #24]
 8005e74:	1a9a      	subs	r2, r3, r2
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	8b12      	ldrh	r2, [r2, #24]
 8005e82:	441a      	add	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	61da      	str	r2, [r3, #28]
 8005e88:	e002      	b.n	8005e90 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d004      	beq.n	8005ea2 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005ea0:	e00e      	b.n	8005ec0 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f868 	bl	8005f80 <USBH_CDC_TransmitCallback>
    break;
 8005eb0:	e006      	b.n	8005ec0 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8005eb2:	7afb      	ldrb	r3, [r7, #11]
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d103      	bne.n	8005ec0 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005ec0:	bf00      	nop
  }
}
 8005ec2:	bf00      	nop
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b086      	sub	sp, #24
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005edc:	2300      	movs	r3, #0
 8005ede:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d002      	beq.n	8005ef0 <CDC_ProcessReception+0x26>
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d00e      	beq.n	8005f0c <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8005eee:	e043      	b.n	8005f78 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	6a19      	ldr	r1, [r3, #32]
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	8b5a      	ldrh	r2, [r3, #26]
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	7b1b      	ldrb	r3, [r3, #12]
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f001 f9f1 	bl	80072e4 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2204      	movs	r2, #4
 8005f06:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005f0a:	e035      	b.n	8005f78 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	7b1b      	ldrb	r3, [r3, #12]
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f002 fb4e 	bl	80085b4 <USBH_LL_GetURBState>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8005f1c:	7cfb      	ldrb	r3, [r7, #19]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d129      	bne.n	8005f76 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	7b1b      	ldrb	r3, [r3, #12]
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f002 fab1 	bl	8008490 <USBH_LL_GetLastXferSize>
 8005f2e:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d016      	beq.n	8005f68 <CDC_ProcessReception+0x9e>
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	8b5b      	ldrh	r3, [r3, #26]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d910      	bls.n	8005f68 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	1ad2      	subs	r2, r2, r3
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	6a1a      	ldr	r2, [r3, #32]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	441a      	add	r2, r3
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2203      	movs	r2, #3
 8005f62:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005f66:	e006      	b.n	8005f76 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f80f 	bl	8005f94 <USBH_CDC_ReceiveCallback>
    break;
 8005f76:	bf00      	nop
  }
}
 8005f78:	bf00      	nop
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]

}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]

}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]

}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e019      	b.n	8006008 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	79fa      	ldrb	r2, [r7, #7]
 8005fd8:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 f80f 	bl	8006010 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f002 f993 	bl	800832c <USBH_LL_Init>

  return USBH_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800601c:	e008      	b.n	8006030 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	32e0      	adds	r2, #224	; 0xe0
 8006024:	2100      	movs	r1, #0
 8006026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3301      	adds	r3, #1
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b0e      	cmp	r3, #14
 8006034:	d9f3      	bls.n	800601e <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	e009      	b.n	8006050 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	4413      	add	r3, r2
 8006042:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006046:	2200      	movs	r2, #0
 8006048:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3301      	adds	r3, #1
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006056:	d3f1      	bcc.n	800603c <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2240      	movs	r2, #64	; 0x40
 800607c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b085      	sub	sp, #20
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80060ac:	2300      	movs	r3, #0
 80060ae:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d017      	beq.n	80060e6 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10f      	bne.n	80060e0 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060c6:	1c59      	adds	r1, r3, #1
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	33dc      	adds	r3, #220	; 0xdc
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	73fb      	strb	r3, [r7, #15]
 80060de:	e004      	b.n	80060ea <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80060e0:	2302      	movs	r3, #2
 80060e2:	73fb      	strb	r3, [r7, #15]
 80060e4:	e001      	b.n	80060ea <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80060e6:	2302      	movs	r3, #2
 80060e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800610e:	78fa      	ldrb	r2, [r7, #3]
 8006110:	429a      	cmp	r2, r3
 8006112:	d204      	bcs.n	800611e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	78fa      	ldrb	r2, [r7, #3]
 8006118:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800611c:	e001      	b.n	8006122 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800611e:	2302      	movs	r3, #2
 8006120:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006122:	7bfb      	ldrb	r3, [r7, #15]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	4608      	mov	r0, r1
 800613a:	4611      	mov	r1, r2
 800613c:	461a      	mov	r2, r3
 800613e:	4603      	mov	r3, r0
 8006140:	70fb      	strb	r3, [r7, #3]
 8006142:	460b      	mov	r3, r1
 8006144:	70bb      	strb	r3, [r7, #2]
 8006146:	4613      	mov	r3, r2
 8006148:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800614e:	2300      	movs	r3, #0
 8006150:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006158:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800615a:	e025      	b.n	80061a8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800615c:	7dfb      	ldrb	r3, [r7, #23]
 800615e:	221a      	movs	r2, #26
 8006160:	fb02 f303 	mul.w	r3, r2, r3
 8006164:	3308      	adds	r3, #8
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4413      	add	r3, r2
 800616a:	3302      	adds	r3, #2
 800616c:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	795b      	ldrb	r3, [r3, #5]
 8006172:	78fa      	ldrb	r2, [r7, #3]
 8006174:	429a      	cmp	r2, r3
 8006176:	d002      	beq.n	800617e <USBH_FindInterface+0x4e>
 8006178:	78fb      	ldrb	r3, [r7, #3]
 800617a:	2bff      	cmp	r3, #255	; 0xff
 800617c:	d111      	bne.n	80061a2 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006182:	78ba      	ldrb	r2, [r7, #2]
 8006184:	429a      	cmp	r2, r3
 8006186:	d002      	beq.n	800618e <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006188:	78bb      	ldrb	r3, [r7, #2]
 800618a:	2bff      	cmp	r3, #255	; 0xff
 800618c:	d109      	bne.n	80061a2 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006192:	787a      	ldrb	r2, [r7, #1]
 8006194:	429a      	cmp	r2, r3
 8006196:	d002      	beq.n	800619e <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006198:	787b      	ldrb	r3, [r7, #1]
 800619a:	2bff      	cmp	r3, #255	; 0xff
 800619c:	d101      	bne.n	80061a2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800619e:	7dfb      	ldrb	r3, [r7, #23]
 80061a0:	e006      	b.n	80061b0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80061a2:	7dfb      	ldrb	r3, [r7, #23]
 80061a4:	3301      	adds	r3, #1
 80061a6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80061a8:	7dfb      	ldrb	r3, [r7, #23]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d9d6      	bls.n	800615c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80061ae:	23ff      	movs	r3, #255	; 0xff
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f002 f8ed 	bl	80083a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80061ca:	2101      	movs	r1, #1
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f002 fa04 	bl	80085da <USBH_LL_DriverVBUS>

  return USBH_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b088      	sub	sp, #32
 80061e0:	af04      	add	r7, sp, #16
 80061e2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80061e4:	2302      	movs	r3, #2
 80061e6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 faec 	bl	80067ca <USBH_IsPortEnabled>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10c      	bne.n	8006212 <USBH_Process+0x36>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d007      	beq.n	8006212 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b03      	cmp	r3, #3
 800620a:	d002      	beq.n	8006212 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2203      	movs	r2, #3
 8006210:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b0b      	cmp	r3, #11
 800621a:	f200 814c 	bhi.w	80064b6 <USBH_Process+0x2da>
 800621e:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <USBH_Process+0x48>)
 8006220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006224:	08006255 	.word	0x08006255
 8006228:	08006277 	.word	0x08006277
 800622c:	0800628b 	.word	0x0800628b
 8006230:	08006491 	.word	0x08006491
 8006234:	080064b7 	.word	0x080064b7
 8006238:	08006319 	.word	0x08006319
 800623c:	08006447 	.word	0x08006447
 8006240:	08006349 	.word	0x08006349
 8006244:	08006369 	.word	0x08006369
 8006248:	08006389 	.word	0x08006389
 800624c:	080063b7 	.word	0x080063b7
 8006250:	08006479 	.word	0x08006479
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 812c 	beq.w	80064ba <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006268:	20c8      	movs	r0, #200	; 0xc8
 800626a:	f002 fa00 	bl	800866e <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f002 f8f3 	bl	800845a <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006274:	e121      	b.n	80064ba <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800627c:	2b01      	cmp	r3, #1
 800627e:	f040 811e 	bne.w	80064be <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2202      	movs	r2, #2
 8006286:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006288:	e119      	b.n	80064be <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800628a:	2064      	movs	r0, #100	; 0x64
 800628c:	f002 f9ef 	bl	800866e <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f002 f8bd 	bl	8008410 <USBH_LL_GetSpeed>
 8006296:	4603      	mov	r3, r0
 8006298:	461a      	mov	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2205      	movs	r2, #5
 80062a4:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80062a6:	2100      	movs	r1, #0
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f001 f868 	bl	800737e <USBH_AllocPipe>
 80062ae:	4603      	mov	r3, r0
 80062b0:	461a      	mov	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80062b6:	2180      	movs	r1, #128	; 0x80
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f001 f860 	bl	800737e <USBH_AllocPipe>
 80062be:	4603      	mov	r3, r0
 80062c0:	461a      	mov	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	7919      	ldrb	r1, [r3, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80062da:	b292      	uxth	r2, r2
 80062dc:	9202      	str	r2, [sp, #8]
 80062de:	2200      	movs	r2, #0
 80062e0:	9201      	str	r2, [sp, #4]
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	4603      	mov	r3, r0
 80062e6:	2280      	movs	r2, #128	; 0x80
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f001 f819 	bl	8007320 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	7959      	ldrb	r1, [r3, #5]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006302:	b292      	uxth	r2, r2
 8006304:	9202      	str	r2, [sp, #8]
 8006306:	2200      	movs	r2, #0
 8006308:	9201      	str	r2, [sp, #4]
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	4603      	mov	r3, r0
 800630e:	2200      	movs	r2, #0
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f001 f805 	bl	8007320 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006316:	e0e3      	b.n	80064e0 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f8e7 	bl	80064ec <USBH_HandleEnum>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	f040 80ce 	bne.w	80064c2 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006334:	2b01      	cmp	r3, #1
 8006336:	d103      	bne.n	8006340 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2208      	movs	r2, #8
 800633c:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800633e:	e0c0      	b.n	80064c2 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2207      	movs	r2, #7
 8006344:	701a      	strb	r2, [r3, #0]
    break;
 8006346:	e0bc      	b.n	80064c2 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 80b9 	beq.w	80064c6 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800635a:	2101      	movs	r1, #1
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2208      	movs	r2, #8
 8006364:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006366:	e0ae      	b.n	80064c6 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800636e:	b29b      	uxth	r3, r3
 8006370:	4619      	mov	r1, r3
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fb59 	bl	8006a2a <USBH_SetCfg>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	f040 80a5 	bne.w	80064ca <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2209      	movs	r2, #9
 8006384:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006386:	e0a0      	b.n	80064ca <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00b      	beq.n	80063ae <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006396:	2101      	movs	r1, #1
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fb69 	bl	8006a70 <USBH_SetFeature>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f040 8094 	bne.w	80064ce <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	220a      	movs	r2, #10
 80063aa:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80063ac:	e08f      	b.n	80064ce <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	220a      	movs	r2, #10
 80063b2:	701a      	strb	r2, [r3, #0]
    break;
 80063b4:	e08b      	b.n	80064ce <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 8088 	beq.w	80064d2 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80063ca:	2300      	movs	r3, #0
 80063cc:	73fb      	strb	r3, [r7, #15]
 80063ce:	e017      	b.n	8006400 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	33dc      	adds	r3, #220	; 0xdc
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	791a      	ldrb	r2, [r3, #4]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d108      	bne.n	80063fa <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	33dc      	adds	r3, #220	; 0xdc
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	3301      	adds	r3, #1
 80063fe:	73fb      	strb	r3, [r7, #15]
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0e4      	beq.n	80063d0 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800640c:	2b00      	cmp	r3, #0
 800640e:	d016      	beq.n	800643e <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	4798      	blx	r3
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d109      	bne.n	8006436 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2206      	movs	r2, #6
 8006426:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800642e:	2103      	movs	r1, #3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006434:	e04d      	b.n	80064d2 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	220d      	movs	r2, #13
 800643a:	701a      	strb	r2, [r3, #0]
    break;
 800643c:	e049      	b.n	80064d2 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	220d      	movs	r2, #13
 8006442:	701a      	strb	r2, [r3, #0]
    break;
 8006444:	e045      	b.n	80064d2 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00f      	beq.n	8006470 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	4798      	blx	r3
 800645c:	4603      	mov	r3, r0
 800645e:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d136      	bne.n	80064d6 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	220b      	movs	r2, #11
 800646c:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800646e:	e032      	b.n	80064d6 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	220d      	movs	r2, #13
 8006474:	701a      	strb	r2, [r3, #0]
    break;
 8006476:	e02e      	b.n	80064d6 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800647e:	2b00      	cmp	r3, #0
 8006480:	d02b      	beq.n	80064da <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	4798      	blx	r3
    }
    break;
 800648e:	e024      	b.n	80064da <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7ff fdbd 	bl	8006010 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01e      	beq.n	80064de <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80064b4:	e013      	b.n	80064de <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 80064b6:	bf00      	nop
 80064b8:	e012      	b.n	80064e0 <USBH_Process+0x304>
    break;
 80064ba:	bf00      	nop
 80064bc:	e010      	b.n	80064e0 <USBH_Process+0x304>
    break;
 80064be:	bf00      	nop
 80064c0:	e00e      	b.n	80064e0 <USBH_Process+0x304>
    break;
 80064c2:	bf00      	nop
 80064c4:	e00c      	b.n	80064e0 <USBH_Process+0x304>
    break;
 80064c6:	bf00      	nop
 80064c8:	e00a      	b.n	80064e0 <USBH_Process+0x304>
    break;
 80064ca:	bf00      	nop
 80064cc:	e008      	b.n	80064e0 <USBH_Process+0x304>
    break;
 80064ce:	bf00      	nop
 80064d0:	e006      	b.n	80064e0 <USBH_Process+0x304>
    break;
 80064d2:	bf00      	nop
 80064d4:	e004      	b.n	80064e0 <USBH_Process+0x304>
    break;
 80064d6:	bf00      	nop
 80064d8:	e002      	b.n	80064e0 <USBH_Process+0x304>
    break;
 80064da:	bf00      	nop
 80064dc:	e000      	b.n	80064e0 <USBH_Process+0x304>
    break;
 80064de:	bf00      	nop
  }
 return USBH_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop

080064ec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af04      	add	r7, sp, #16
 80064f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80064f4:	2301      	movs	r3, #1
 80064f6:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	785b      	ldrb	r3, [r3, #1]
 80064fc:	2b07      	cmp	r3, #7
 80064fe:	f200 80f8 	bhi.w	80066f2 <USBH_HandleEnum+0x206>
 8006502:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <USBH_HandleEnum+0x1c>)
 8006504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006508:	08006529 	.word	0x08006529
 800650c:	0800659b 	.word	0x0800659b
 8006510:	080065b3 	.word	0x080065b3
 8006514:	08006629 	.word	0x08006629
 8006518:	0800663f 	.word	0x0800663f
 800651c:	0800665b 	.word	0x0800665b
 8006520:	0800668f 	.word	0x0800668f
 8006524:	080066c3 	.word	0x080066c3
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8006528:	2108      	movs	r1, #8
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f9ad 	bl	800688a <USBH_Get_DevDesc>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	f040 80df 	bne.w	80066f6 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	7919      	ldrb	r1, [r3, #4]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800655c:	b292      	uxth	r2, r2
 800655e:	9202      	str	r2, [sp, #8]
 8006560:	2200      	movs	r2, #0
 8006562:	9201      	str	r2, [sp, #4]
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	4603      	mov	r3, r0
 8006568:	2280      	movs	r2, #128	; 0x80
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fed8 	bl	8007320 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	7959      	ldrb	r1, [r3, #5]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006584:	b292      	uxth	r2, r2
 8006586:	9202      	str	r2, [sp, #8]
 8006588:	2200      	movs	r2, #0
 800658a:	9201      	str	r2, [sp, #4]
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	4603      	mov	r3, r0
 8006590:	2200      	movs	r2, #0
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fec4 	bl	8007320 <USBH_OpenPipe>

    }
    break;
 8006598:	e0ad      	b.n	80066f6 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800659a:	2112      	movs	r1, #18
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f974 	bl	800688a <USBH_Get_DevDesc>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f040 80a8 	bne.w	80066fa <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2202      	movs	r2, #2
 80065ae:	705a      	strb	r2, [r3, #1]

    }
    break;
 80065b0:	e0a3      	b.n	80066fa <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80065b2:	2101      	movs	r1, #1
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fa14 	bl	80069e2 <USBH_SetAddress>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f040 809e 	bne.w	80066fe <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 80065c2:	2002      	movs	r0, #2
 80065c4:	f002 f853 	bl	800866e <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2203      	movs	r2, #3
 80065d4:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	7919      	ldrb	r1, [r3, #4]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80065ea:	b292      	uxth	r2, r2
 80065ec:	9202      	str	r2, [sp, #8]
 80065ee:	2200      	movs	r2, #0
 80065f0:	9201      	str	r2, [sp, #4]
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	4603      	mov	r3, r0
 80065f6:	2280      	movs	r2, #128	; 0x80
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fe91 	bl	8007320 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	7959      	ldrb	r1, [r3, #5]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006612:	b292      	uxth	r2, r2
 8006614:	9202      	str	r2, [sp, #8]
 8006616:	2200      	movs	r2, #0
 8006618:	9201      	str	r2, [sp, #4]
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	4603      	mov	r3, r0
 800661e:	2200      	movs	r2, #0
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fe7d 	bl	8007320 <USBH_OpenPipe>
    }
    break;
 8006626:	e06a      	b.n	80066fe <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8006628:	2109      	movs	r1, #9
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f955 	bl	80068da <USBH_Get_CfgDesc>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d165      	bne.n	8006702 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2204      	movs	r2, #4
 800663a:	705a      	strb	r2, [r3, #1]
    }
    break;
 800663c:	e061      	b.n	8006702 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8006644:	4619      	mov	r1, r3
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f947 	bl	80068da <USBH_Get_CfgDesc>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d159      	bne.n	8006706 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2205      	movs	r2, #5
 8006656:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006658:	e055      	b.n	8006706 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8006660:	2b00      	cmp	r3, #0
 8006662:	d010      	beq.n	8006686 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006670:	23ff      	movs	r3, #255	; 0xff
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f955 	bl	8006922 <USBH_Get_StringDesc>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d145      	bne.n	800670a <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2206      	movs	r2, #6
 8006682:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006684:	e041      	b.n	800670a <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2206      	movs	r2, #6
 800668a:	705a      	strb	r2, [r3, #1]
    break;
 800668c:	e03d      	b.n	800670a <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8006694:	2b00      	cmp	r3, #0
 8006696:	d010      	beq.n	80066ba <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80066a4:	23ff      	movs	r3, #255	; 0xff
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f93b 	bl	8006922 <USBH_Get_StringDesc>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d12d      	bne.n	800670e <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2207      	movs	r2, #7
 80066b6:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80066b8:	e029      	b.n	800670e <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2207      	movs	r2, #7
 80066be:	705a      	strb	r2, [r3, #1]
    break;
 80066c0:	e025      	b.n	800670e <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00f      	beq.n	80066ec <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80066d8:	23ff      	movs	r3, #255	; 0xff
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f921 	bl	8006922 <USBH_Get_StringDesc>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d115      	bne.n	8006712 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80066ea:	e012      	b.n	8006712 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	73fb      	strb	r3, [r7, #15]
    break;
 80066f0:	e00f      	b.n	8006712 <USBH_HandleEnum+0x226>

  default:
    break;
 80066f2:	bf00      	nop
 80066f4:	e00e      	b.n	8006714 <USBH_HandleEnum+0x228>
    break;
 80066f6:	bf00      	nop
 80066f8:	e00c      	b.n	8006714 <USBH_HandleEnum+0x228>
    break;
 80066fa:	bf00      	nop
 80066fc:	e00a      	b.n	8006714 <USBH_HandleEnum+0x228>
    break;
 80066fe:	bf00      	nop
 8006700:	e008      	b.n	8006714 <USBH_HandleEnum+0x228>
    break;
 8006702:	bf00      	nop
 8006704:	e006      	b.n	8006714 <USBH_HandleEnum+0x228>
    break;
 8006706:	bf00      	nop
 8006708:	e004      	b.n	8006714 <USBH_HandleEnum+0x228>
    break;
 800670a:	bf00      	nop
 800670c:	e002      	b.n	8006714 <USBH_HandleEnum+0x228>
    break;
 800670e:	bf00      	nop
 8006710:	e000      	b.n	8006714 <USBH_HandleEnum+0x228>
    break;
 8006712:	bf00      	nop
  }
  return Status;
 8006714:	7bfb      	ldrb	r3, [r7, #15]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop

08006720 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	683a      	ldr	r2, [r7, #0]
 800672e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b082      	sub	sp, #8
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f804 	bl	8006762 <USBH_HandleSof>
}
 800675a:	bf00      	nop
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b0b      	cmp	r3, #11
 8006772:	d10a      	bne.n	800678a <USBH_HandleSof+0x28>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800677a:	2b00      	cmp	r3, #0
 800677c:	d005      	beq.n	800678a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	4798      	blx	r3
  }
}
 800678a:	bf00      	nop
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80067a2:	bf00      	nop
}
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80067be:	bf00      	nop
}
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80067d8:	4618      	mov	r0, r3
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10f      	bne.n	8006816 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00e      	beq.n	8006826 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800680e:	2104      	movs	r1, #4
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	4798      	blx	r3
 8006814:	e007      	b.n	8006826 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800681c:	2b01      	cmp	r3, #1
 800681e:	d102      	bne.n	8006826 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f001 fdce 	bl	80083da <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	791b      	ldrb	r3, [r3, #4]
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fdb8 	bl	80073ba <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	795b      	ldrb	r3, [r3, #5]
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fdb2 	bl	80073ba <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006864:	2b00      	cmp	r3, #0
 8006866:	d005      	beq.n	8006874 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800686e:	2105      	movs	r1, #5
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f001 fd95 	bl	80083a4 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2203      	movs	r2, #3
 800687e:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b086      	sub	sp, #24
 800688e:	af02      	add	r7, sp, #8
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	460b      	mov	r3, r1
 8006894:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800689c:	78fb      	ldrb	r3, [r7, #3]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	4613      	mov	r3, r2
 80068a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068a8:	2100      	movs	r1, #0
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f864 	bl	8006978 <USBH_GetDescriptor>
 80068b0:	4603      	mov	r3, r0
 80068b2:	73fb      	strb	r3, [r7, #15]
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10a      	bne.n	80068d0 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f203 3022 	addw	r0, r3, #802	; 0x322
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80068c6:	78fa      	ldrb	r2, [r7, #3]
 80068c8:	b292      	uxth	r2, r2
 80068ca:	4619      	mov	r1, r3
 80068cc:	f000 f918 	bl	8006b00 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b086      	sub	sp, #24
 80068de:	af02      	add	r7, sp, #8
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	460b      	mov	r3, r1
 80068e4:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	331c      	adds	r3, #28
 80068ea:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 80068ec:	887b      	ldrh	r3, [r7, #2]
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068f6:	2100      	movs	r1, #0
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f83d 	bl	8006978 <USBH_GetDescriptor>
 80068fe:	4603      	mov	r3, r0
 8006900:	72fb      	strb	r3, [r7, #11]
 8006902:	7afb      	ldrb	r3, [r7, #11]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d107      	bne.n	8006918 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800690e:	887a      	ldrh	r2, [r7, #2]
 8006910:	68f9      	ldr	r1, [r7, #12]
 8006912:	4618      	mov	r0, r3
 8006914:	f000 f964 	bl	8006be0 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8006918:	7afb      	ldrb	r3, [r7, #11]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b088      	sub	sp, #32
 8006926:	af02      	add	r7, sp, #8
 8006928:	60f8      	str	r0, [r7, #12]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	461a      	mov	r2, r3
 800692e:	460b      	mov	r3, r1
 8006930:	72fb      	strb	r3, [r7, #11]
 8006932:	4613      	mov	r3, r2
 8006934:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8006936:	7afb      	ldrb	r3, [r7, #11]
 8006938:	b29b      	uxth	r3, r3
 800693a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800693e:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006946:	893b      	ldrh	r3, [r7, #8]
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	460b      	mov	r3, r1
 800694c:	2100      	movs	r1, #0
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 f812 	bl	8006978 <USBH_GetDescriptor>
 8006954:	4603      	mov	r3, r0
 8006956:	75fb      	strb	r3, [r7, #23]
 8006958:	7dfb      	ldrb	r3, [r7, #23]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d107      	bne.n	800696e <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006964:	893a      	ldrh	r2, [r7, #8]
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	4618      	mov	r0, r3
 800696a:	f000 fa37 	bl	8006ddc <USBH_ParseStringDesc>
  }
  return status;
 800696e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3718      	adds	r7, #24
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	607b      	str	r3, [r7, #4]
 8006982:	460b      	mov	r3, r1
 8006984:	72fb      	strb	r3, [r7, #11]
 8006986:	4613      	mov	r3, r2
 8006988:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	789b      	ldrb	r3, [r3, #2]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d11c      	bne.n	80069cc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006992:	7afb      	ldrb	r3, [r7, #11]
 8006994:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006998:	b2da      	uxtb	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2206      	movs	r2, #6
 80069a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	893a      	ldrh	r2, [r7, #8]
 80069a8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80069aa:	893b      	ldrh	r3, [r7, #8]
 80069ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80069b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069b4:	d104      	bne.n	80069c0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f240 4209 	movw	r2, #1033	; 0x409
 80069bc:	829a      	strh	r2, [r3, #20]
 80069be:	e002      	b.n	80069c6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8b3a      	ldrh	r2, [r7, #24]
 80069ca:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 80069cc:	8b3b      	ldrh	r3, [r7, #24]
 80069ce:	461a      	mov	r2, r3
 80069d0:	6879      	ldr	r1, [r7, #4]
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 fa50 	bl	8006e78 <USBH_CtlReq>
 80069d8:	4603      	mov	r3, r0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b082      	sub	sp, #8
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	460b      	mov	r3, r1
 80069ec:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	789b      	ldrb	r3, [r3, #2]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d10f      	bne.n	8006a16 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2205      	movs	r2, #5
 8006a00:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006a02:	78fb      	ldrb	r3, [r7, #3]
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006a16:	2200      	movs	r2, #0
 8006a18:	2100      	movs	r1, #0
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa2c 	bl	8006e78 <USBH_CtlReq>
 8006a20:	4603      	mov	r3, r0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b082      	sub	sp, #8
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	460b      	mov	r3, r1
 8006a34:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	789b      	ldrb	r3, [r3, #2]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d10e      	bne.n	8006a5c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2209      	movs	r2, #9
 8006a48:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	887a      	ldrh	r2, [r7, #2]
 8006a4e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	2100      	movs	r1, #0
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fa09 	bl	8006e78 <USBH_CtlReq>
 8006a66:	4603      	mov	r3, r0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	789b      	ldrb	r3, [r3, #2]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d10f      	bne.n	8006aa4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2203      	movs	r2, #3
 8006a8e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006a90:	78fb      	ldrb	r3, [r7, #3]
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f9e5 	bl	8006e78 <USBH_CtlReq>
 8006aae:	4603      	mov	r3, r0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	789b      	ldrb	r3, [r3, #2]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d10f      	bne.n	8006aec <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006ade:	78fb      	ldrb	r3, [r7, #3]
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8006aec:	2200      	movs	r2, #0
 8006aee:	2100      	movs	r1, #0
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f9c1 	bl	8006e78 <USBH_CtlReq>
 8006af6:	4603      	mov	r3, r0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	781a      	ldrb	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	785a      	ldrb	r2, [r3, #1]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	3302      	adds	r3, #2
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	3303      	adds	r3, #3
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	021b      	lsls	r3, r3, #8
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	4313      	orrs	r3, r2
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	791a      	ldrb	r2, [r3, #4]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	795a      	ldrb	r2, [r3, #5]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	799a      	ldrb	r2, [r3, #6]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	79da      	ldrb	r2, [r3, #7]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006b5a:	88fb      	ldrh	r3, [r7, #6]
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d939      	bls.n	8006bd4 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	3308      	adds	r3, #8
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	3309      	adds	r3, #9
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	021b      	lsls	r3, r3, #8
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	4313      	orrs	r3, r2
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	330a      	adds	r3, #10
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	330b      	adds	r3, #11
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	021b      	lsls	r3, r3, #8
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	4313      	orrs	r3, r2
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	330c      	adds	r3, #12
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	330d      	adds	r3, #13
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	021b      	lsls	r3, r3, #8
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	4313      	orrs	r3, r2
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	7b9a      	ldrb	r2, [r3, #14]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	7bda      	ldrb	r2, [r3, #15]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	7c1a      	ldrb	r2, [r3, #16]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	7c5a      	ldrb	r2, [r3, #17]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	745a      	strb	r2, [r3, #17]
  }
}
 8006bd4:	bf00      	nop
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08a      	sub	sp, #40	; 0x28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	4613      	mov	r3, r2
 8006bec:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	781a      	ldrb	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	785a      	ldrb	r2, [r3, #1]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	3302      	adds	r3, #2
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	3303      	adds	r3, #3
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	021b      	lsls	r3, r3, #8
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	4313      	orrs	r3, r2
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	791a      	ldrb	r2, [r3, #4]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	795a      	ldrb	r2, [r3, #5]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	799a      	ldrb	r2, [r3, #6]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	79da      	ldrb	r2, [r3, #7]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	7a1a      	ldrb	r2, [r3, #8]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	2b09      	cmp	r3, #9
 8006c5a:	d95f      	bls.n	8006d1c <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006c5c:	2309      	movs	r3, #9
 8006c5e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006c60:	2300      	movs	r3, #0
 8006c62:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006c64:	e051      	b.n	8006d0a <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006c66:	f107 0316 	add.w	r3, r7, #22
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c6e:	f000 f8e8 	bl	8006e42 <USBH_GetNextDesc>
 8006c72:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	785b      	ldrb	r3, [r3, #1]
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	d146      	bne.n	8006d0a <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c80:	221a      	movs	r2, #26
 8006c82:	fb02 f303 	mul.w	r3, r2, r3
 8006c86:	3308      	adds	r3, #8
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	3302      	adds	r3, #2
 8006c8e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8006c90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c92:	69f8      	ldr	r0, [r7, #28]
 8006c94:	f000 f846 	bl	8006d24 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006ca2:	e022      	b.n	8006cea <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8006ca4:	f107 0316 	add.w	r3, r7, #22
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cac:	f000 f8c9 	bl	8006e42 <USBH_GetNextDesc>
 8006cb0:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	785b      	ldrb	r3, [r3, #1]
 8006cb6:	2b05      	cmp	r3, #5
 8006cb8:	d117      	bne.n	8006cea <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006cba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cbe:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006cc2:	3201      	adds	r2, #1
 8006cc4:	00d2      	lsls	r2, r2, #3
 8006cc6:	211a      	movs	r1, #26
 8006cc8:	fb01 f303 	mul.w	r3, r1, r3
 8006ccc:	4413      	add	r3, r2
 8006cce:	3308      	adds	r3, #8
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8006cd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cda:	69b8      	ldr	r0, [r7, #24]
 8006cdc:	f000 f851 	bl	8006d82 <USBH_ParseEPDesc>
            ep_ix++;
 8006ce0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	791b      	ldrb	r3, [r3, #4]
 8006cee:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d204      	bcs.n	8006d00 <USBH_ParseCfgDesc+0x120>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	885a      	ldrh	r2, [r3, #2]
 8006cfa:	8afb      	ldrh	r3, [r7, #22]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d8d1      	bhi.n	8006ca4 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006d00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d04:	3301      	adds	r3, #1
 8006d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006d0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d804      	bhi.n	8006d1c <USBH_ParseCfgDesc+0x13c>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	885a      	ldrh	r2, [r3, #2]
 8006d16:	8afb      	ldrh	r3, [r7, #22]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d8a4      	bhi.n	8006c66 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006d1c:	bf00      	nop
 8006d1e:	3728      	adds	r7, #40	; 0x28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	781a      	ldrb	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	785a      	ldrb	r2, [r3, #1]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	789a      	ldrb	r2, [r3, #2]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	78da      	ldrb	r2, [r3, #3]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	791a      	ldrb	r2, [r3, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	795a      	ldrb	r2, [r3, #5]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	799a      	ldrb	r2, [r3, #6]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	79da      	ldrb	r2, [r3, #7]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	7a1a      	ldrb	r2, [r3, #8]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	721a      	strb	r2, [r3, #8]
}
 8006d76:	bf00      	nop
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	781a      	ldrb	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	785a      	ldrb	r2, [r3, #1]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	789a      	ldrb	r2, [r3, #2]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	78da      	ldrb	r2, [r3, #3]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	3304      	adds	r3, #4
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	3305      	adds	r3, #5
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	021b      	lsls	r3, r3, #8
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	799a      	ldrb	r2, [r3, #6]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	719a      	strb	r2, [r3, #6]
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	4613      	mov	r3, r2
 8006de8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	3301      	adds	r3, #1
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	2b03      	cmp	r3, #3
 8006df2:	d120      	bne.n	8006e36 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	1e9a      	subs	r2, r3, #2
 8006dfa:	88fb      	ldrh	r3, [r7, #6]
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	bf28      	it	cs
 8006e00:	4613      	movcs	r3, r2
 8006e02:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	3302      	adds	r3, #2
 8006e08:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	82fb      	strh	r3, [r7, #22]
 8006e0e:	e00b      	b.n	8006e28 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006e10:	8afb      	ldrh	r3, [r7, #22]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4413      	add	r3, r2
 8006e16:	781a      	ldrb	r2, [r3, #0]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006e22:	8afb      	ldrh	r3, [r7, #22]
 8006e24:	3302      	adds	r3, #2
 8006e26:	82fb      	strh	r3, [r7, #22]
 8006e28:	8afa      	ldrh	r2, [r7, #22]
 8006e2a:	8abb      	ldrh	r3, [r7, #20]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d3ef      	bcc.n	8006e10 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2200      	movs	r2, #0
 8006e34:	701a      	strb	r2, [r3, #0]
  }
}
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b085      	sub	sp, #20
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	881a      	ldrh	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	4413      	add	r3, r2
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4413      	add	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	4613      	mov	r3, r2
 8006e84:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006e86:	2301      	movs	r3, #1
 8006e88:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	789b      	ldrb	r3, [r3, #2]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d002      	beq.n	8006e98 <USBH_CtlReq+0x20>
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d00f      	beq.n	8006eb6 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8006e96:	e034      	b.n	8006f02 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	88fa      	ldrh	r2, [r7, #6]
 8006ea2:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2202      	movs	r2, #2
 8006eae:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	75fb      	strb	r3, [r7, #23]
    break;
 8006eb4:	e025      	b.n	8006f02 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f000 f828 	bl	8006f0c <USBH_HandleControl>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8006ec0:	7dfb      	ldrb	r3, [r7, #23]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d108      	bne.n	8006ed8 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	75fb      	strb	r3, [r7, #23]
    break;
 8006ed6:	e013      	b.n	8006f00 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d108      	bne.n	8006ef0 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006eea:	2303      	movs	r3, #3
 8006eec:	75fb      	strb	r3, [r7, #23]
    break;
 8006eee:	e007      	b.n	8006f00 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8006ef0:	7dfb      	ldrb	r3, [r7, #23]
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d104      	bne.n	8006f00 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006efc:	2302      	movs	r3, #2
 8006efe:	75fb      	strb	r3, [r7, #23]
    break;
 8006f00:	bf00      	nop
  }
  return status;
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af02      	add	r7, sp, #8
 8006f12:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f14:	2301      	movs	r3, #1
 8006f16:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	7e1b      	ldrb	r3, [r3, #24]
 8006f20:	3b01      	subs	r3, #1
 8006f22:	2b0a      	cmp	r3, #10
 8006f24:	f200 814c 	bhi.w	80071c0 <USBH_HandleControl+0x2b4>
 8006f28:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <USBH_HandleControl+0x24>)
 8006f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2e:	bf00      	nop
 8006f30:	08006f5d 	.word	0x08006f5d
 8006f34:	08006f77 	.word	0x08006f77
 8006f38:	08006fe1 	.word	0x08006fe1
 8006f3c:	08007007 	.word	0x08007007
 8006f40:	0800703f 	.word	0x0800703f
 8006f44:	0800706b 	.word	0x0800706b
 8006f48:	080070bd 	.word	0x080070bd
 8006f4c:	080070df 	.word	0x080070df
 8006f50:	0800711b 	.word	0x0800711b
 8006f54:	08007143 	.word	0x08007143
 8006f58:	08007181 	.word	0x08007181
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f103 0110 	add.w	r1, r3, #16
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	795b      	ldrb	r3, [r3, #5]
 8006f66:	461a      	mov	r2, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f939 	bl	80071e0 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2202      	movs	r2, #2
 8006f72:	761a      	strb	r2, [r3, #24]
    break;
 8006f74:	e12f      	b.n	80071d6 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	795b      	ldrb	r3, [r3, #5]
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f001 fb19 	bl	80085b4 <USBH_LL_GetURBState>
 8006f82:	4603      	mov	r3, r0
 8006f84:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8006f86:	7bbb      	ldrb	r3, [r7, #14]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d11e      	bne.n	8006fca <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	7c1b      	ldrb	r3, [r3, #16]
 8006f90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f94:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	8adb      	ldrh	r3, [r3, #22]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00a      	beq.n	8006fb4 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8006f9e:	7b7b      	ldrb	r3, [r7, #13]
 8006fa0:	2b80      	cmp	r3, #128	; 0x80
 8006fa2:	d103      	bne.n	8006fac <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2203      	movs	r2, #3
 8006fa8:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006faa:	e10b      	b.n	80071c4 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2205      	movs	r2, #5
 8006fb0:	761a      	strb	r2, [r3, #24]
    break;
 8006fb2:	e107      	b.n	80071c4 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8006fb4:	7b7b      	ldrb	r3, [r7, #13]
 8006fb6:	2b80      	cmp	r3, #128	; 0x80
 8006fb8:	d103      	bne.n	8006fc2 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2209      	movs	r2, #9
 8006fbe:	761a      	strb	r2, [r3, #24]
    break;
 8006fc0:	e100      	b.n	80071c4 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2207      	movs	r2, #7
 8006fc6:	761a      	strb	r2, [r3, #24]
    break;
 8006fc8:	e0fc      	b.n	80071c4 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006fca:	7bbb      	ldrb	r3, [r7, #14]
 8006fcc:	2b04      	cmp	r3, #4
 8006fce:	d003      	beq.n	8006fd8 <USBH_HandleControl+0xcc>
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	f040 80f6 	bne.w	80071c4 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	220b      	movs	r2, #11
 8006fdc:	761a      	strb	r2, [r3, #24]
    break;
 8006fde:	e0f1      	b.n	80071c4 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6899      	ldr	r1, [r3, #8]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	899a      	ldrh	r2, [r3, #12]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	791b      	ldrb	r3, [r3, #4]
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f930 	bl	800725e <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2204      	movs	r2, #4
 8007002:	761a      	strb	r2, [r3, #24]
    break;
 8007004:	e0e7      	b.n	80071d6 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	791b      	ldrb	r3, [r3, #4]
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 fad1 	bl	80085b4 <USBH_LL_GetURBState>
 8007012:	4603      	mov	r3, r0
 8007014:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8007016:	7bbb      	ldrb	r3, [r7, #14]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d102      	bne.n	8007022 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2209      	movs	r2, #9
 8007020:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8007022:	7bbb      	ldrb	r3, [r7, #14]
 8007024:	2b05      	cmp	r3, #5
 8007026:	d102      	bne.n	800702e <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007028:	2303      	movs	r3, #3
 800702a:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800702c:	e0cc      	b.n	80071c8 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 800702e:	7bbb      	ldrb	r3, [r7, #14]
 8007030:	2b04      	cmp	r3, #4
 8007032:	f040 80c9 	bne.w	80071c8 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	220b      	movs	r2, #11
 800703a:	761a      	strb	r2, [r3, #24]
    break;
 800703c:	e0c4      	b.n	80071c8 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6899      	ldr	r1, [r3, #8]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	899a      	ldrh	r2, [r3, #12]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	7958      	ldrb	r0, [r3, #5]
 800704a:	2301      	movs	r3, #1
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	4603      	mov	r3, r0
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f8df 	bl	8007214 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800705c:	b29a      	uxth	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2206      	movs	r2, #6
 8007066:	761a      	strb	r2, [r3, #24]
    break;
 8007068:	e0b5      	b.n	80071d6 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	795b      	ldrb	r3, [r3, #5]
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f001 fa9f 	bl	80085b4 <USBH_LL_GetURBState>
 8007076:	4603      	mov	r3, r0
 8007078:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800707a:	7bbb      	ldrb	r3, [r7, #14]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d103      	bne.n	8007088 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2207      	movs	r2, #7
 8007084:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007086:	e0a1      	b.n	80071cc <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8007088:	7bbb      	ldrb	r3, [r7, #14]
 800708a:	2b05      	cmp	r3, #5
 800708c:	d105      	bne.n	800709a <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	220c      	movs	r2, #12
 8007092:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007094:	2303      	movs	r3, #3
 8007096:	73fb      	strb	r3, [r7, #15]
    break;
 8007098:	e098      	b.n	80071cc <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800709a:	7bbb      	ldrb	r3, [r7, #14]
 800709c:	2b02      	cmp	r3, #2
 800709e:	d103      	bne.n	80070a8 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2205      	movs	r2, #5
 80070a4:	761a      	strb	r2, [r3, #24]
    break;
 80070a6:	e091      	b.n	80071cc <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	f040 808e 	bne.w	80071cc <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	220b      	movs	r2, #11
 80070b4:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 80070b6:	2302      	movs	r3, #2
 80070b8:	73fb      	strb	r3, [r7, #15]
    break;
 80070ba:	e087      	b.n	80071cc <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	791b      	ldrb	r3, [r3, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	2100      	movs	r1, #0
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f8ca 	bl	800725e <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2208      	movs	r2, #8
 80070da:	761a      	strb	r2, [r3, #24]

    break;
 80070dc:	e07b      	b.n	80071d6 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	791b      	ldrb	r3, [r3, #4]
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f001 fa65 	bl	80085b4 <USBH_LL_GetURBState>
 80070ea:	4603      	mov	r3, r0
 80070ec:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80070ee:	7bbb      	ldrb	r3, [r7, #14]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d105      	bne.n	8007100 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	220d      	movs	r2, #13
 80070f8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80070fe:	e067      	b.n	80071d0 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	2b04      	cmp	r3, #4
 8007104:	d103      	bne.n	800710e <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	220b      	movs	r2, #11
 800710a:	761a      	strb	r2, [r3, #24]
    break;
 800710c:	e060      	b.n	80071d0 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	2b05      	cmp	r3, #5
 8007112:	d15d      	bne.n	80071d0 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8007114:	2303      	movs	r3, #3
 8007116:	73fb      	strb	r3, [r7, #15]
    break;
 8007118:	e05a      	b.n	80071d0 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	795a      	ldrb	r2, [r3, #5]
 800711e:	2301      	movs	r3, #1
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	4613      	mov	r3, r2
 8007124:	2200      	movs	r2, #0
 8007126:	2100      	movs	r1, #0
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f873 	bl	8007214 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007134:	b29a      	uxth	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	220a      	movs	r2, #10
 800713e:	761a      	strb	r2, [r3, #24]
    break;
 8007140:	e049      	b.n	80071d6 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	795b      	ldrb	r3, [r3, #5]
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f001 fa33 	bl	80085b4 <USBH_LL_GetURBState>
 800714e:	4603      	mov	r3, r0
 8007150:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007152:	7bbb      	ldrb	r3, [r7, #14]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d105      	bne.n	8007164 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8007158:	2300      	movs	r3, #0
 800715a:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	220d      	movs	r2, #13
 8007160:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8007162:	e037      	b.n	80071d4 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007164:	7bbb      	ldrb	r3, [r7, #14]
 8007166:	2b02      	cmp	r3, #2
 8007168:	d103      	bne.n	8007172 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2209      	movs	r2, #9
 800716e:	761a      	strb	r2, [r3, #24]
    break;
 8007170:	e030      	b.n	80071d4 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8007172:	7bbb      	ldrb	r3, [r7, #14]
 8007174:	2b04      	cmp	r3, #4
 8007176:	d12d      	bne.n	80071d4 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	220b      	movs	r2, #11
 800717c:	761a      	strb	r2, [r3, #24]
    break;
 800717e:	e029      	b.n	80071d4 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	7e5b      	ldrb	r3, [r3, #25]
 8007184:	3301      	adds	r3, #1
 8007186:	b2da      	uxtb	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	765a      	strb	r2, [r3, #25]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	7e5b      	ldrb	r3, [r3, #25]
 8007190:	2b02      	cmp	r3, #2
 8007192:	d809      	bhi.n	80071a8 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 f920 	bl	80083da <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80071a6:	e016      	b.n	80071d6 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071ae:	2106      	movs	r1, #6
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80071ba:	2302      	movs	r3, #2
 80071bc:	73fb      	strb	r3, [r7, #15]
    break;
 80071be:	e00a      	b.n	80071d6 <USBH_HandleControl+0x2ca>

  default:
    break;
 80071c0:	bf00      	nop
 80071c2:	e008      	b.n	80071d6 <USBH_HandleControl+0x2ca>
    break;
 80071c4:	bf00      	nop
 80071c6:	e006      	b.n	80071d6 <USBH_HandleControl+0x2ca>
    break;
 80071c8:	bf00      	nop
 80071ca:	e004      	b.n	80071d6 <USBH_HandleControl+0x2ca>
    break;
 80071cc:	bf00      	nop
 80071ce:	e002      	b.n	80071d6 <USBH_HandleControl+0x2ca>
    break;
 80071d0:	bf00      	nop
 80071d2:	e000      	b.n	80071d6 <USBH_HandleControl+0x2ca>
    break;
 80071d4:	bf00      	nop
  }
  return status;
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b088      	sub	sp, #32
 80071e4:	af04      	add	r7, sp, #16
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	4613      	mov	r3, r2
 80071ec:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80071ee:	79f9      	ldrb	r1, [r7, #7]
 80071f0:	2300      	movs	r3, #0
 80071f2:	9303      	str	r3, [sp, #12]
 80071f4:	2308      	movs	r3, #8
 80071f6:	9302      	str	r3, [sp, #8]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	2300      	movs	r3, #0
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	2300      	movs	r3, #0
 8007202:	2200      	movs	r2, #0
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f001 f9a4 	bl	8008552 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af04      	add	r7, sp, #16
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	4611      	mov	r1, r2
 8007220:	461a      	mov	r2, r3
 8007222:	460b      	mov	r3, r1
 8007224:	80fb      	strh	r3, [r7, #6]
 8007226:	4613      	mov	r3, r2
 8007228:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007234:	2300      	movs	r3, #0
 8007236:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007238:	7979      	ldrb	r1, [r7, #5]
 800723a:	7e3b      	ldrb	r3, [r7, #24]
 800723c:	9303      	str	r3, [sp, #12]
 800723e:	88fb      	ldrh	r3, [r7, #6]
 8007240:	9302      	str	r3, [sp, #8]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	2301      	movs	r3, #1
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	2300      	movs	r3, #0
 800724c:	2200      	movs	r2, #0
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f001 f97f 	bl	8008552 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b088      	sub	sp, #32
 8007262:	af04      	add	r7, sp, #16
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	60b9      	str	r1, [r7, #8]
 8007268:	4611      	mov	r1, r2
 800726a:	461a      	mov	r2, r3
 800726c:	460b      	mov	r3, r1
 800726e:	80fb      	strh	r3, [r7, #6]
 8007270:	4613      	mov	r3, r2
 8007272:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007274:	7979      	ldrb	r1, [r7, #5]
 8007276:	2300      	movs	r3, #0
 8007278:	9303      	str	r3, [sp, #12]
 800727a:	88fb      	ldrh	r3, [r7, #6]
 800727c:	9302      	str	r3, [sp, #8]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	9301      	str	r3, [sp, #4]
 8007282:	2301      	movs	r3, #1
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	2300      	movs	r3, #0
 8007288:	2201      	movs	r2, #1
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f001 f961 	bl	8008552 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007290:	2300      	movs	r3, #0

}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b088      	sub	sp, #32
 800729e:	af04      	add	r7, sp, #16
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	60b9      	str	r1, [r7, #8]
 80072a4:	4611      	mov	r1, r2
 80072a6:	461a      	mov	r2, r3
 80072a8:	460b      	mov	r3, r1
 80072aa:	80fb      	strh	r3, [r7, #6]
 80072ac:	4613      	mov	r3, r2
 80072ae:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80072be:	7979      	ldrb	r1, [r7, #5]
 80072c0:	7e3b      	ldrb	r3, [r7, #24]
 80072c2:	9303      	str	r3, [sp, #12]
 80072c4:	88fb      	ldrh	r3, [r7, #6]
 80072c6:	9302      	str	r3, [sp, #8]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	9301      	str	r3, [sp, #4]
 80072cc:	2301      	movs	r3, #1
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	2302      	movs	r3, #2
 80072d2:	2200      	movs	r2, #0
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f001 f93c 	bl	8008552 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b088      	sub	sp, #32
 80072e8:	af04      	add	r7, sp, #16
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	4611      	mov	r1, r2
 80072f0:	461a      	mov	r2, r3
 80072f2:	460b      	mov	r3, r1
 80072f4:	80fb      	strh	r3, [r7, #6]
 80072f6:	4613      	mov	r3, r2
 80072f8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80072fa:	7979      	ldrb	r1, [r7, #5]
 80072fc:	2300      	movs	r3, #0
 80072fe:	9303      	str	r3, [sp, #12]
 8007300:	88fb      	ldrh	r3, [r7, #6]
 8007302:	9302      	str	r3, [sp, #8]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	2301      	movs	r3, #1
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	2302      	movs	r3, #2
 800730e:	2201      	movs	r2, #1
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f001 f91e 	bl	8008552 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af04      	add	r7, sp, #16
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	4608      	mov	r0, r1
 800732a:	4611      	mov	r1, r2
 800732c:	461a      	mov	r2, r3
 800732e:	4603      	mov	r3, r0
 8007330:	70fb      	strb	r3, [r7, #3]
 8007332:	460b      	mov	r3, r1
 8007334:	70bb      	strb	r3, [r7, #2]
 8007336:	4613      	mov	r3, r2
 8007338:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800733a:	7878      	ldrb	r0, [r7, #1]
 800733c:	78ba      	ldrb	r2, [r7, #2]
 800733e:	78f9      	ldrb	r1, [r7, #3]
 8007340:	8b3b      	ldrh	r3, [r7, #24]
 8007342:	9302      	str	r3, [sp, #8]
 8007344:	7d3b      	ldrb	r3, [r7, #20]
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	7c3b      	ldrb	r3, [r7, #16]
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	4603      	mov	r3, r0
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f001 f8b1 	bl	80084b6 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007354:	2300      	movs	r3, #0

}
 8007356:	4618      	mov	r0, r3
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	460b      	mov	r3, r1
 8007368:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800736a:	78fb      	ldrb	r3, [r7, #3]
 800736c:	4619      	mov	r1, r3
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 f8d0 	bl	8008514 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007374:	2300      	movs	r3, #0

}
 8007376:	4618      	mov	r0, r3
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b084      	sub	sp, #16
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	460b      	mov	r3, r1
 8007388:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f831 	bl	80073f2 <USBH_GetFreePipe>
 8007390:	4603      	mov	r3, r0
 8007392:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007394:	89fb      	ldrh	r3, [r7, #14]
 8007396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800739a:	4293      	cmp	r3, r2
 800739c:	d007      	beq.n	80073ae <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800739e:	78fb      	ldrb	r3, [r7, #3]
 80073a0:	89fa      	ldrh	r2, [r7, #14]
 80073a2:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	32e0      	adds	r2, #224	; 0xe0
 80073aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 80073ae:	89fb      	ldrh	r3, [r7, #14]
 80073b0:	b2db      	uxtb	r3, r3
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b083      	sub	sp, #12
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	460b      	mov	r3, r1
 80073c4:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80073c6:	78fb      	ldrb	r3, [r7, #3]
 80073c8:	2b0a      	cmp	r3, #10
 80073ca:	d80b      	bhi.n	80073e4 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80073cc:	78fa      	ldrb	r2, [r7, #3]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	32e0      	adds	r2, #224	; 0xe0
 80073d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d6:	78fa      	ldrb	r2, [r7, #3]
 80073d8:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	32e0      	adds	r2, #224	; 0xe0
 80073e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b085      	sub	sp, #20
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80073fe:	2300      	movs	r3, #0
 8007400:	73fb      	strb	r3, [r7, #15]
 8007402:	e00e      	b.n	8007422 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007404:	7bfa      	ldrb	r2, [r7, #15]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	32e0      	adds	r2, #224	; 0xe0
 800740a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d102      	bne.n	800741c <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8007416:	7bfb      	ldrb	r3, [r7, #15]
 8007418:	b29b      	uxth	r3, r3
 800741a:	e007      	b.n	800742c <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800741c:	7bfb      	ldrb	r3, [r7, #15]
 800741e:	3301      	adds	r3, #1
 8007420:	73fb      	strb	r3, [r7, #15]
 8007422:	7bfb      	ldrb	r3, [r7, #15]
 8007424:	2b0a      	cmp	r3, #10
 8007426:	d9ed      	bls.n	8007404 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007428:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800742c:	4618      	mov	r0, r3
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007438:	b590      	push	{r4, r7, lr}
 800743a:	b097      	sub	sp, #92	; 0x5c
 800743c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800743e:	f7f9 f897 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007442:	f000 f8d1 	bl	80075e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007446:	f000 fa8b 	bl	8007960 <MX_GPIO_Init>
  MX_I2C1_Init();
 800744a:	f000 f9a1 	bl	8007790 <MX_I2C1_Init>
  MX_I2S3_Init();
 800744e:	f000 f9cd 	bl	80077ec <MX_I2S3_Init>
  MX_SPI1_Init();
 8007452:	f000 f9fb 	bl	800784c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8007456:	f000 fe55 	bl	8008104 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 800745a:	f000 fa2d 	bl	80078b8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800745e:	f000 f945 	bl	80076ec <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8007462:	f000 fa53 	bl	800790c <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int iter_ten = 0;
 8007466:	2300      	movs	r3, #0
 8007468:	657b      	str	r3, [r7, #84]	; 0x54
  int acc_ten = 0;
 800746a:	2300      	movs	r3, #0
 800746c:	653b      	str	r3, [r7, #80]	; 0x50
  int iter_fifty = 0;
 800746e:	2300      	movs	r3, #0
 8007470:	64fb      	str	r3, [r7, #76]	; 0x4c
  int acc_fifty = 0;
 8007472:	2300      	movs	r3, #0
 8007474:	64bb      	str	r3, [r7, #72]	; 0x48
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8007476:	f000 fe6b 	bl	8008150 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_ADC_Start(&hadc1);
 800747a:	4853      	ldr	r0, [pc, #332]	; (80075c8 <main+0x190>)
 800747c:	f7f9 f950 	bl	8000720 <HAL_ADC_Start>

    if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK){
 8007480:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007484:	4850      	ldr	r0, [pc, #320]	; (80075c8 <main+0x190>)
 8007486:	f7f9 fa11 	bl	80008ac <HAL_ADC_PollForConversion>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1f2      	bne.n	8007476 <main+0x3e>
    	int value = HAL_ADC_GetValue(&hadc1);
 8007490:	484d      	ldr	r0, [pc, #308]	; (80075c8 <main+0x190>)
 8007492:	f7f9 fa8f 	bl	80009b4 <HAL_ADC_GetValue>
 8007496:	4603      	mov	r3, r0
 8007498:	647b      	str	r3, [r7, #68]	; 0x44

    	if(iter_ten % 10 == 0){
 800749a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800749c:	4b4b      	ldr	r3, [pc, #300]	; (80075cc <main+0x194>)
 800749e:	fb83 2301 	smull	r2, r3, r3, r1
 80074a2:	109a      	asrs	r2, r3, #2
 80074a4:	17cb      	asrs	r3, r1, #31
 80074a6:	1ad2      	subs	r2, r2, r3
 80074a8:	4613      	mov	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	1aca      	subs	r2, r1, r3
 80074b2:	2a00      	cmp	r2, #0
 80074b4:	d129      	bne.n	800750a <main+0xd2>
    		// reset
    		char buffer[50];
    		acc_ten += value;
 80074b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ba:	4413      	add	r3, r2
 80074bc:	653b      	str	r3, [r7, #80]	; 0x50
    		float tmp = acc_ten / 10;
 80074be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074c0:	4a42      	ldr	r2, [pc, #264]	; (80075cc <main+0x194>)
 80074c2:	fb82 1203 	smull	r1, r2, r2, r3
 80074c6:	1092      	asrs	r2, r2, #2
 80074c8:	17db      	asrs	r3, r3, #31
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	ee07 3a90 	vmov	s15, r3
 80074d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074d4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    		acc_ten = (int)tmp;
 80074d8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80074dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074e0:	ee17 3a90 	vmov	r3, s15
 80074e4:	653b      	str	r3, [r7, #80]	; 0x50
    		int size = sprintf(buffer, "acc_ ten = %d\r\n", acc_ten);
 80074e6:	463b      	mov	r3, r7
 80074e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074ea:	4939      	ldr	r1, [pc, #228]	; (80075d0 <main+0x198>)
 80074ec:	4618      	mov	r0, r3
 80074ee:	f001 fa35 	bl	800895c <siprintf>
 80074f2:	63f8      	str	r0, [r7, #60]	; 0x3c
    		HAL_UART_Transmit(&huart2, buffer, size, 1000);
 80074f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	4639      	mov	r1, r7
 80074fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074fe:	4835      	ldr	r0, [pc, #212]	; (80075d4 <main+0x19c>)
 8007500:	f7fc ff97 	bl	8004432 <HAL_UART_Transmit>
    		acc_ten = 0;
 8007504:	2300      	movs	r3, #0
 8007506:	653b      	str	r3, [r7, #80]	; 0x50
 8007508:	e003      	b.n	8007512 <main+0xda>
    	}
    	else{
    		acc_ten += value;
 800750a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800750c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800750e:	4413      	add	r3, r2
 8007510:	653b      	str	r3, [r7, #80]	; 0x50
    	}
    	if(iter_fifty % 50 == 0){
 8007512:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007514:	4b30      	ldr	r3, [pc, #192]	; (80075d8 <main+0x1a0>)
 8007516:	fb83 1302 	smull	r1, r3, r3, r2
 800751a:	1119      	asrs	r1, r3, #4
 800751c:	17d3      	asrs	r3, r2, #31
 800751e:	1acb      	subs	r3, r1, r3
 8007520:	2132      	movs	r1, #50	; 0x32
 8007522:	fb01 f303 	mul.w	r3, r1, r3
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	d129      	bne.n	8007580 <main+0x148>
    	    		// reset
    		char buffer[50];
    		acc_fifty += value;
 800752c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800752e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007530:	4413      	add	r3, r2
 8007532:	64bb      	str	r3, [r7, #72]	; 0x48
    	    		float tmp = acc_fifty / 50;
 8007534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007536:	4a28      	ldr	r2, [pc, #160]	; (80075d8 <main+0x1a0>)
 8007538:	fb82 1203 	smull	r1, r2, r2, r3
 800753c:	1112      	asrs	r2, r2, #4
 800753e:	17db      	asrs	r3, r3, #31
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800754a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    	    		acc_fifty = (int)tmp;
 800754e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007552:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007556:	ee17 3a90 	vmov	r3, s15
 800755a:	64bb      	str	r3, [r7, #72]	; 0x48
    	    		int size = sprintf(buffer, ", acc_ fifty = %d\r\n", acc_fifty);
 800755c:	463b      	mov	r3, r7
 800755e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007560:	491e      	ldr	r1, [pc, #120]	; (80075dc <main+0x1a4>)
 8007562:	4618      	mov	r0, r3
 8007564:	f001 f9fa 	bl	800895c <siprintf>
 8007568:	6378      	str	r0, [r7, #52]	; 0x34
    	    		HAL_UART_Transmit(&huart2, buffer, size, 1000);
 800756a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800756c:	b29a      	uxth	r2, r3
 800756e:	4639      	mov	r1, r7
 8007570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007574:	4817      	ldr	r0, [pc, #92]	; (80075d4 <main+0x19c>)
 8007576:	f7fc ff5c 	bl	8004432 <HAL_UART_Transmit>
    	    		acc_fifty = 0;
 800757a:	2300      	movs	r3, #0
 800757c:	64bb      	str	r3, [r7, #72]	; 0x48
 800757e:	e003      	b.n	8007588 <main+0x150>
    	    	}
    	    	else{
    	    		acc_fifty += value;
 8007580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007584:	4413      	add	r3, r2
 8007586:	64bb      	str	r3, [r7, #72]	; 0x48
    	    	}
    	//int size = sprintf(result, "%d\n\r", value);
    	//HAL_UART_Transmit(&huart2, result, size, 1000);
    	char test[32] = "Hello world\n";
 8007588:	4b15      	ldr	r3, [pc, #84]	; (80075e0 <main+0x1a8>)
 800758a:	463c      	mov	r4, r7
 800758c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800758e:	c407      	stmia	r4!, {r0, r1, r2}
 8007590:	7023      	strb	r3, [r4, #0]
 8007592:	f107 030d 	add.w	r3, r7, #13
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	605a      	str	r2, [r3, #4]
 800759c:	609a      	str	r2, [r3, #8]
 800759e:	60da      	str	r2, [r3, #12]
 80075a0:	f8c3 200f 	str.w	r2, [r3, #15]
    	HAL_UART_Transmit(&huart3, test, 13, 1000);
 80075a4:	4639      	mov	r1, r7
 80075a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075aa:	220d      	movs	r2, #13
 80075ac:	480d      	ldr	r0, [pc, #52]	; (80075e4 <main+0x1ac>)
 80075ae:	f7fc ff40 	bl	8004432 <HAL_UART_Transmit>
    	iter_ten++;
 80075b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075b4:	3301      	adds	r3, #1
 80075b6:	657b      	str	r3, [r7, #84]	; 0x54
    	iter_fifty++;
 80075b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ba:	3301      	adds	r3, #1
 80075bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    	HAL_Delay(100);
 80075be:	2064      	movs	r0, #100	; 0x64
 80075c0:	f7f9 f848 	bl	8000654 <HAL_Delay>
    MX_USB_HOST_Process();
 80075c4:	e757      	b.n	8007476 <main+0x3e>
 80075c6:	bf00      	nop
 80075c8:	20000158 	.word	0x20000158
 80075cc:	66666667 	.word	0x66666667
 80075d0:	08009014 	.word	0x08009014
 80075d4:	20000208 	.word	0x20000208
 80075d8:	51eb851f 	.word	0x51eb851f
 80075dc:	08009024 	.word	0x08009024
 80075e0:	08009038 	.word	0x08009038
 80075e4:	200000c4 	.word	0x200000c4

080075e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b098      	sub	sp, #96	; 0x60
 80075ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075f2:	2230      	movs	r2, #48	; 0x30
 80075f4:	2100      	movs	r1, #0
 80075f6:	4618      	mov	r0, r3
 80075f8:	f001 f8f0 	bl	80087dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80075fc:	f107 031c 	add.w	r3, r7, #28
 8007600:	2200      	movs	r2, #0
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	605a      	str	r2, [r3, #4]
 8007606:	609a      	str	r2, [r3, #8]
 8007608:	60da      	str	r2, [r3, #12]
 800760a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800760c:	f107 030c 	add.w	r3, r7, #12
 8007610:	2200      	movs	r2, #0
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	605a      	str	r2, [r3, #4]
 8007616:	609a      	str	r2, [r3, #8]
 8007618:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800761a:	2300      	movs	r3, #0
 800761c:	60bb      	str	r3, [r7, #8]
 800761e:	4b31      	ldr	r3, [pc, #196]	; (80076e4 <SystemClock_Config+0xfc>)
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	4a30      	ldr	r2, [pc, #192]	; (80076e4 <SystemClock_Config+0xfc>)
 8007624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007628:	6413      	str	r3, [r2, #64]	; 0x40
 800762a:	4b2e      	ldr	r3, [pc, #184]	; (80076e4 <SystemClock_Config+0xfc>)
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007632:	60bb      	str	r3, [r7, #8]
 8007634:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007636:	2300      	movs	r3, #0
 8007638:	607b      	str	r3, [r7, #4]
 800763a:	4b2b      	ldr	r3, [pc, #172]	; (80076e8 <SystemClock_Config+0x100>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a2a      	ldr	r2, [pc, #168]	; (80076e8 <SystemClock_Config+0x100>)
 8007640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007644:	6013      	str	r3, [r2, #0]
 8007646:	4b28      	ldr	r3, [pc, #160]	; (80076e8 <SystemClock_Config+0x100>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800764e:	607b      	str	r3, [r7, #4]
 8007650:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007652:	2301      	movs	r3, #1
 8007654:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800765a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800765c:	2302      	movs	r3, #2
 800765e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007660:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007664:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007666:	2308      	movs	r3, #8
 8007668:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800766a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800766e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007670:	2302      	movs	r3, #2
 8007672:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007674:	2307      	movs	r3, #7
 8007676:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007678:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800767c:	4618      	mov	r0, r3
 800767e:	f7fc f8b9 	bl	80037f4 <HAL_RCC_OscConfig>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8007688:	f000 fa68 	bl	8007b5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800768c:	230f      	movs	r3, #15
 800768e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007690:	2302      	movs	r3, #2
 8007692:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007694:	2300      	movs	r3, #0
 8007696:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007698:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800769c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800769e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80076a4:	f107 031c 	add.w	r3, r7, #28
 80076a8:	2105      	movs	r1, #5
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fc fae4 	bl	8003c78 <HAL_RCC_ClockConfig>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80076b6:	f000 fa51 	bl	8007b5c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80076ba:	2301      	movs	r3, #1
 80076bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80076be:	23c0      	movs	r3, #192	; 0xc0
 80076c0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80076c2:	2302      	movs	r3, #2
 80076c4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80076c6:	f107 030c 	add.w	r3, r7, #12
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fc fcc2 	bl	8004054 <HAL_RCCEx_PeriphCLKConfig>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80076d6:	f000 fa41 	bl	8007b5c <Error_Handler>
  }
}
 80076da:	bf00      	nop
 80076dc:	3760      	adds	r7, #96	; 0x60
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	40023800 	.word	0x40023800
 80076e8:	40007000 	.word	0x40007000

080076ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80076f2:	463b      	mov	r3, r7
 80076f4:	2200      	movs	r2, #0
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	605a      	str	r2, [r3, #4]
 80076fa:	609a      	str	r2, [r3, #8]
 80076fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80076fe:	4b21      	ldr	r3, [pc, #132]	; (8007784 <MX_ADC1_Init+0x98>)
 8007700:	4a21      	ldr	r2, [pc, #132]	; (8007788 <MX_ADC1_Init+0x9c>)
 8007702:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007704:	4b1f      	ldr	r3, [pc, #124]	; (8007784 <MX_ADC1_Init+0x98>)
 8007706:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800770a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800770c:	4b1d      	ldr	r3, [pc, #116]	; (8007784 <MX_ADC1_Init+0x98>)
 800770e:	2200      	movs	r2, #0
 8007710:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8007712:	4b1c      	ldr	r3, [pc, #112]	; (8007784 <MX_ADC1_Init+0x98>)
 8007714:	2200      	movs	r2, #0
 8007716:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007718:	4b1a      	ldr	r3, [pc, #104]	; (8007784 <MX_ADC1_Init+0x98>)
 800771a:	2200      	movs	r2, #0
 800771c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800771e:	4b19      	ldr	r3, [pc, #100]	; (8007784 <MX_ADC1_Init+0x98>)
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007726:	4b17      	ldr	r3, [pc, #92]	; (8007784 <MX_ADC1_Init+0x98>)
 8007728:	2200      	movs	r2, #0
 800772a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800772c:	4b15      	ldr	r3, [pc, #84]	; (8007784 <MX_ADC1_Init+0x98>)
 800772e:	4a17      	ldr	r2, [pc, #92]	; (800778c <MX_ADC1_Init+0xa0>)
 8007730:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007732:	4b14      	ldr	r3, [pc, #80]	; (8007784 <MX_ADC1_Init+0x98>)
 8007734:	2200      	movs	r2, #0
 8007736:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007738:	4b12      	ldr	r3, [pc, #72]	; (8007784 <MX_ADC1_Init+0x98>)
 800773a:	2201      	movs	r2, #1
 800773c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800773e:	4b11      	ldr	r3, [pc, #68]	; (8007784 <MX_ADC1_Init+0x98>)
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007746:	4b0f      	ldr	r3, [pc, #60]	; (8007784 <MX_ADC1_Init+0x98>)
 8007748:	2201      	movs	r2, #1
 800774a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800774c:	480d      	ldr	r0, [pc, #52]	; (8007784 <MX_ADC1_Init+0x98>)
 800774e:	f7f8 ffa3 	bl	8000698 <HAL_ADC_Init>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8007758:	f000 fa00 	bl	8007b5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800775c:	2308      	movs	r3, #8
 800775e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007760:	2301      	movs	r3, #1
 8007762:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007764:	2300      	movs	r3, #0
 8007766:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007768:	463b      	mov	r3, r7
 800776a:	4619      	mov	r1, r3
 800776c:	4805      	ldr	r0, [pc, #20]	; (8007784 <MX_ADC1_Init+0x98>)
 800776e:	f7f9 f92f 	bl	80009d0 <HAL_ADC_ConfigChannel>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8007778:	f000 f9f0 	bl	8007b5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800777c:	bf00      	nop
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	20000158 	.word	0x20000158
 8007788:	40012000 	.word	0x40012000
 800778c:	0f000001 	.word	0x0f000001

08007790 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007794:	4b12      	ldr	r3, [pc, #72]	; (80077e0 <MX_I2C1_Init+0x50>)
 8007796:	4a13      	ldr	r2, [pc, #76]	; (80077e4 <MX_I2C1_Init+0x54>)
 8007798:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800779a:	4b11      	ldr	r3, [pc, #68]	; (80077e0 <MX_I2C1_Init+0x50>)
 800779c:	4a12      	ldr	r2, [pc, #72]	; (80077e8 <MX_I2C1_Init+0x58>)
 800779e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80077a0:	4b0f      	ldr	r3, [pc, #60]	; (80077e0 <MX_I2C1_Init+0x50>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80077a6:	4b0e      	ldr	r3, [pc, #56]	; (80077e0 <MX_I2C1_Init+0x50>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80077ac:	4b0c      	ldr	r3, [pc, #48]	; (80077e0 <MX_I2C1_Init+0x50>)
 80077ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80077b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80077b4:	4b0a      	ldr	r3, [pc, #40]	; (80077e0 <MX_I2C1_Init+0x50>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80077ba:	4b09      	ldr	r3, [pc, #36]	; (80077e0 <MX_I2C1_Init+0x50>)
 80077bc:	2200      	movs	r2, #0
 80077be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80077c0:	4b07      	ldr	r3, [pc, #28]	; (80077e0 <MX_I2C1_Init+0x50>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80077c6:	4b06      	ldr	r3, [pc, #24]	; (80077e0 <MX_I2C1_Init+0x50>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80077cc:	4804      	ldr	r0, [pc, #16]	; (80077e0 <MX_I2C1_Init+0x50>)
 80077ce:	f7fb fa49 	bl	8002c64 <HAL_I2C_Init>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80077d8:	f000 f9c0 	bl	8007b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80077dc:	bf00      	nop
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	20000104 	.word	0x20000104
 80077e4:	40005400 	.word	0x40005400
 80077e8:	000186a0 	.word	0x000186a0

080077ec <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80077f0:	4b13      	ldr	r3, [pc, #76]	; (8007840 <MX_I2S3_Init+0x54>)
 80077f2:	4a14      	ldr	r2, [pc, #80]	; (8007844 <MX_I2S3_Init+0x58>)
 80077f4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80077f6:	4b12      	ldr	r3, [pc, #72]	; (8007840 <MX_I2S3_Init+0x54>)
 80077f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077fc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80077fe:	4b10      	ldr	r3, [pc, #64]	; (8007840 <MX_I2S3_Init+0x54>)
 8007800:	2200      	movs	r2, #0
 8007802:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8007804:	4b0e      	ldr	r3, [pc, #56]	; (8007840 <MX_I2S3_Init+0x54>)
 8007806:	2200      	movs	r2, #0
 8007808:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800780a:	4b0d      	ldr	r3, [pc, #52]	; (8007840 <MX_I2S3_Init+0x54>)
 800780c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007810:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8007812:	4b0b      	ldr	r3, [pc, #44]	; (8007840 <MX_I2S3_Init+0x54>)
 8007814:	4a0c      	ldr	r2, [pc, #48]	; (8007848 <MX_I2S3_Init+0x5c>)
 8007816:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8007818:	4b09      	ldr	r3, [pc, #36]	; (8007840 <MX_I2S3_Init+0x54>)
 800781a:	2200      	movs	r2, #0
 800781c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800781e:	4b08      	ldr	r3, [pc, #32]	; (8007840 <MX_I2S3_Init+0x54>)
 8007820:	2200      	movs	r2, #0
 8007822:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8007824:	4b06      	ldr	r3, [pc, #24]	; (8007840 <MX_I2S3_Init+0x54>)
 8007826:	2200      	movs	r2, #0
 8007828:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800782a:	4805      	ldr	r0, [pc, #20]	; (8007840 <MX_I2S3_Init+0x54>)
 800782c:	f7fb fb42 	bl	8002eb4 <HAL_I2S_Init>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8007836:	f000 f991 	bl	8007b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800783a:	bf00      	nop
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	20000248 	.word	0x20000248
 8007844:	40003c00 	.word	0x40003c00
 8007848:	00017700 	.word	0x00017700

0800784c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007850:	4b17      	ldr	r3, [pc, #92]	; (80078b0 <MX_SPI1_Init+0x64>)
 8007852:	4a18      	ldr	r2, [pc, #96]	; (80078b4 <MX_SPI1_Init+0x68>)
 8007854:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007856:	4b16      	ldr	r3, [pc, #88]	; (80078b0 <MX_SPI1_Init+0x64>)
 8007858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800785c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800785e:	4b14      	ldr	r3, [pc, #80]	; (80078b0 <MX_SPI1_Init+0x64>)
 8007860:	2200      	movs	r2, #0
 8007862:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007864:	4b12      	ldr	r3, [pc, #72]	; (80078b0 <MX_SPI1_Init+0x64>)
 8007866:	2200      	movs	r2, #0
 8007868:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800786a:	4b11      	ldr	r3, [pc, #68]	; (80078b0 <MX_SPI1_Init+0x64>)
 800786c:	2200      	movs	r2, #0
 800786e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007870:	4b0f      	ldr	r3, [pc, #60]	; (80078b0 <MX_SPI1_Init+0x64>)
 8007872:	2200      	movs	r2, #0
 8007874:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007876:	4b0e      	ldr	r3, [pc, #56]	; (80078b0 <MX_SPI1_Init+0x64>)
 8007878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800787c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800787e:	4b0c      	ldr	r3, [pc, #48]	; (80078b0 <MX_SPI1_Init+0x64>)
 8007880:	2200      	movs	r2, #0
 8007882:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007884:	4b0a      	ldr	r3, [pc, #40]	; (80078b0 <MX_SPI1_Init+0x64>)
 8007886:	2200      	movs	r2, #0
 8007888:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800788a:	4b09      	ldr	r3, [pc, #36]	; (80078b0 <MX_SPI1_Init+0x64>)
 800788c:	2200      	movs	r2, #0
 800788e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007890:	4b07      	ldr	r3, [pc, #28]	; (80078b0 <MX_SPI1_Init+0x64>)
 8007892:	2200      	movs	r2, #0
 8007894:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007896:	4b06      	ldr	r3, [pc, #24]	; (80078b0 <MX_SPI1_Init+0x64>)
 8007898:	220a      	movs	r2, #10
 800789a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800789c:	4804      	ldr	r0, [pc, #16]	; (80078b0 <MX_SPI1_Init+0x64>)
 800789e:	f7fc fd17 	bl	80042d0 <HAL_SPI_Init>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80078a8:	f000 f958 	bl	8007b5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80078ac:	bf00      	nop
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	200001b0 	.word	0x200001b0
 80078b4:	40013000 	.word	0x40013000

080078b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80078bc:	4b11      	ldr	r3, [pc, #68]	; (8007904 <MX_USART2_UART_Init+0x4c>)
 80078be:	4a12      	ldr	r2, [pc, #72]	; (8007908 <MX_USART2_UART_Init+0x50>)
 80078c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80078c2:	4b10      	ldr	r3, [pc, #64]	; (8007904 <MX_USART2_UART_Init+0x4c>)
 80078c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80078c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80078ca:	4b0e      	ldr	r3, [pc, #56]	; (8007904 <MX_USART2_UART_Init+0x4c>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80078d0:	4b0c      	ldr	r3, [pc, #48]	; (8007904 <MX_USART2_UART_Init+0x4c>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80078d6:	4b0b      	ldr	r3, [pc, #44]	; (8007904 <MX_USART2_UART_Init+0x4c>)
 80078d8:	2200      	movs	r2, #0
 80078da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80078dc:	4b09      	ldr	r3, [pc, #36]	; (8007904 <MX_USART2_UART_Init+0x4c>)
 80078de:	220c      	movs	r2, #12
 80078e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80078e2:	4b08      	ldr	r3, [pc, #32]	; (8007904 <MX_USART2_UART_Init+0x4c>)
 80078e4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80078e8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80078ea:	4b06      	ldr	r3, [pc, #24]	; (8007904 <MX_USART2_UART_Init+0x4c>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80078f0:	4804      	ldr	r0, [pc, #16]	; (8007904 <MX_USART2_UART_Init+0x4c>)
 80078f2:	f7fc fd51 	bl	8004398 <HAL_UART_Init>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80078fc:	f000 f92e 	bl	8007b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007900:	bf00      	nop
 8007902:	bd80      	pop	{r7, pc}
 8007904:	20000208 	.word	0x20000208
 8007908:	40004400 	.word	0x40004400

0800790c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007910:	4b11      	ldr	r3, [pc, #68]	; (8007958 <MX_USART3_UART_Init+0x4c>)
 8007912:	4a12      	ldr	r2, [pc, #72]	; (800795c <MX_USART3_UART_Init+0x50>)
 8007914:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007916:	4b10      	ldr	r3, [pc, #64]	; (8007958 <MX_USART3_UART_Init+0x4c>)
 8007918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800791c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800791e:	4b0e      	ldr	r3, [pc, #56]	; (8007958 <MX_USART3_UART_Init+0x4c>)
 8007920:	2200      	movs	r2, #0
 8007922:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007924:	4b0c      	ldr	r3, [pc, #48]	; (8007958 <MX_USART3_UART_Init+0x4c>)
 8007926:	2200      	movs	r2, #0
 8007928:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800792a:	4b0b      	ldr	r3, [pc, #44]	; (8007958 <MX_USART3_UART_Init+0x4c>)
 800792c:	2200      	movs	r2, #0
 800792e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007930:	4b09      	ldr	r3, [pc, #36]	; (8007958 <MX_USART3_UART_Init+0x4c>)
 8007932:	220c      	movs	r2, #12
 8007934:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007936:	4b08      	ldr	r3, [pc, #32]	; (8007958 <MX_USART3_UART_Init+0x4c>)
 8007938:	2200      	movs	r2, #0
 800793a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800793c:	4b06      	ldr	r3, [pc, #24]	; (8007958 <MX_USART3_UART_Init+0x4c>)
 800793e:	2200      	movs	r2, #0
 8007940:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007942:	4805      	ldr	r0, [pc, #20]	; (8007958 <MX_USART3_UART_Init+0x4c>)
 8007944:	f7fc fd28 	bl	8004398 <HAL_UART_Init>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800794e:	f000 f905 	bl	8007b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007952:	bf00      	nop
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	200000c4 	.word	0x200000c4
 800795c:	40004800 	.word	0x40004800

08007960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b08c      	sub	sp, #48	; 0x30
 8007964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007966:	f107 031c 	add.w	r3, r7, #28
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	605a      	str	r2, [r3, #4]
 8007970:	609a      	str	r2, [r3, #8]
 8007972:	60da      	str	r2, [r3, #12]
 8007974:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007976:	2300      	movs	r3, #0
 8007978:	61bb      	str	r3, [r7, #24]
 800797a:	4b71      	ldr	r3, [pc, #452]	; (8007b40 <MX_GPIO_Init+0x1e0>)
 800797c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797e:	4a70      	ldr	r2, [pc, #448]	; (8007b40 <MX_GPIO_Init+0x1e0>)
 8007980:	f043 0310 	orr.w	r3, r3, #16
 8007984:	6313      	str	r3, [r2, #48]	; 0x30
 8007986:	4b6e      	ldr	r3, [pc, #440]	; (8007b40 <MX_GPIO_Init+0x1e0>)
 8007988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798a:	f003 0310 	and.w	r3, r3, #16
 800798e:	61bb      	str	r3, [r7, #24]
 8007990:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007992:	2300      	movs	r3, #0
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	4b6a      	ldr	r3, [pc, #424]	; (8007b40 <MX_GPIO_Init+0x1e0>)
 8007998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799a:	4a69      	ldr	r2, [pc, #420]	; (8007b40 <MX_GPIO_Init+0x1e0>)
 800799c:	f043 0304 	orr.w	r3, r3, #4
 80079a0:	6313      	str	r3, [r2, #48]	; 0x30
 80079a2:	4b67      	ldr	r3, [pc, #412]	; (8007b40 <MX_GPIO_Init+0x1e0>)
 80079a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a6:	f003 0304 	and.w	r3, r3, #4
 80079aa:	617b      	str	r3, [r7, #20]
 80079ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80079ae:	2300      	movs	r3, #0
 80079b0:	613b      	str	r3, [r7, #16]
 80079b2:	4b63      	ldr	r3, [pc, #396]	; (8007b40 <MX_GPIO_Init+0x1e0>)
 80079b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b6:	4a62      	ldr	r2, [pc, #392]	; (8007b40 <MX_GPIO_Init+0x1e0>)
 80079b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079bc:	6313      	str	r3, [r2, #48]	; 0x30
 80079be:	4b60      	ldr	r3, [pc, #384]	; (8007b40 <MX_GPIO_Init+0x1e0>)
 80079c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c6:	613b      	str	r3, [r7, #16]
 80079c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80079ca:	2300      	movs	r3, #0
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	4b5c      	ldr	r3, [pc, #368]	; (8007b40 <MX_GPIO_Init+0x1e0>)
 80079d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d2:	4a5b      	ldr	r2, [pc, #364]	; (8007b40 <MX_GPIO_Init+0x1e0>)
 80079d4:	f043 0301 	orr.w	r3, r3, #1
 80079d8:	6313      	str	r3, [r2, #48]	; 0x30
 80079da:	4b59      	ldr	r3, [pc, #356]	; (8007b40 <MX_GPIO_Init+0x1e0>)
 80079dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	60fb      	str	r3, [r7, #12]
 80079e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80079e6:	2300      	movs	r3, #0
 80079e8:	60bb      	str	r3, [r7, #8]
 80079ea:	4b55      	ldr	r3, [pc, #340]	; (8007b40 <MX_GPIO_Init+0x1e0>)
 80079ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ee:	4a54      	ldr	r2, [pc, #336]	; (8007b40 <MX_GPIO_Init+0x1e0>)
 80079f0:	f043 0302 	orr.w	r3, r3, #2
 80079f4:	6313      	str	r3, [r2, #48]	; 0x30
 80079f6:	4b52      	ldr	r3, [pc, #328]	; (8007b40 <MX_GPIO_Init+0x1e0>)
 80079f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	60bb      	str	r3, [r7, #8]
 8007a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007a02:	2300      	movs	r3, #0
 8007a04:	607b      	str	r3, [r7, #4]
 8007a06:	4b4e      	ldr	r3, [pc, #312]	; (8007b40 <MX_GPIO_Init+0x1e0>)
 8007a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0a:	4a4d      	ldr	r2, [pc, #308]	; (8007b40 <MX_GPIO_Init+0x1e0>)
 8007a0c:	f043 0308 	orr.w	r3, r3, #8
 8007a10:	6313      	str	r3, [r2, #48]	; 0x30
 8007a12:	4b4b      	ldr	r3, [pc, #300]	; (8007b40 <MX_GPIO_Init+0x1e0>)
 8007a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a16:	f003 0308 	and.w	r3, r3, #8
 8007a1a:	607b      	str	r3, [r7, #4]
 8007a1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8007a1e:	2200      	movs	r2, #0
 8007a20:	2108      	movs	r1, #8
 8007a22:	4848      	ldr	r0, [pc, #288]	; (8007b44 <MX_GPIO_Init+0x1e4>)
 8007a24:	f7f9 fc9e 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8007a28:	2201      	movs	r2, #1
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	4846      	ldr	r0, [pc, #280]	; (8007b48 <MX_GPIO_Init+0x1e8>)
 8007a2e:	f7f9 fc99 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8007a32:	2200      	movs	r2, #0
 8007a34:	f24f 0110 	movw	r1, #61456	; 0xf010
 8007a38:	4844      	ldr	r0, [pc, #272]	; (8007b4c <MX_GPIO_Init+0x1ec>)
 8007a3a:	f7f9 fc93 	bl	8001364 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8007a3e:	2308      	movs	r3, #8
 8007a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a42:	2301      	movs	r3, #1
 8007a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a46:	2300      	movs	r3, #0
 8007a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8007a4e:	f107 031c 	add.w	r3, r7, #28
 8007a52:	4619      	mov	r1, r3
 8007a54:	483b      	ldr	r0, [pc, #236]	; (8007b44 <MX_GPIO_Init+0x1e4>)
 8007a56:	f7f9 faeb 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a62:	2300      	movs	r3, #0
 8007a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a66:	2300      	movs	r3, #0
 8007a68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8007a6a:	f107 031c 	add.w	r3, r7, #28
 8007a6e:	4619      	mov	r1, r3
 8007a70:	4835      	ldr	r0, [pc, #212]	; (8007b48 <MX_GPIO_Init+0x1e8>)
 8007a72:	f7f9 fadd 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8007a76:	2308      	movs	r3, #8
 8007a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a82:	2300      	movs	r3, #0
 8007a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007a86:	2305      	movs	r3, #5
 8007a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8007a8a:	f107 031c 	add.w	r3, r7, #28
 8007a8e:	4619      	mov	r1, r3
 8007a90:	482d      	ldr	r0, [pc, #180]	; (8007b48 <MX_GPIO_Init+0x1e8>)
 8007a92:	f7f9 facd 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8007a96:	2301      	movs	r3, #1
 8007a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007a9a:	4b2d      	ldr	r3, [pc, #180]	; (8007b50 <MX_GPIO_Init+0x1f0>)
 8007a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007aa2:	f107 031c 	add.w	r3, r7, #28
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	482a      	ldr	r0, [pc, #168]	; (8007b54 <MX_GPIO_Init+0x1f4>)
 8007aaa:	f7f9 fac1 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8007aae:	2304      	movs	r3, #4
 8007ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8007aba:	f107 031c 	add.w	r3, r7, #28
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4825      	ldr	r0, [pc, #148]	; (8007b58 <MX_GPIO_Init+0x1f8>)
 8007ac2:	f7f9 fab5 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8007ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007acc:	2302      	movs	r3, #2
 8007ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007ad8:	2305      	movs	r3, #5
 8007ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8007adc:	f107 031c 	add.w	r3, r7, #28
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	481d      	ldr	r0, [pc, #116]	; (8007b58 <MX_GPIO_Init+0x1f8>)
 8007ae4:	f7f9 faa4 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|OTG_FS_OverCurrent_Pin;
 8007ae8:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8007aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007aee:	2300      	movs	r3, #0
 8007af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007af2:	2300      	movs	r3, #0
 8007af4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007af6:	f107 031c 	add.w	r3, r7, #28
 8007afa:	4619      	mov	r1, r3
 8007afc:	4813      	ldr	r0, [pc, #76]	; (8007b4c <MX_GPIO_Init+0x1ec>)
 8007afe:	f7f9 fa97 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8007b02:	f24f 0310 	movw	r3, #61456	; 0xf010
 8007b06:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b10:	2300      	movs	r3, #0
 8007b12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007b14:	f107 031c 	add.w	r3, r7, #28
 8007b18:	4619      	mov	r1, r3
 8007b1a:	480c      	ldr	r0, [pc, #48]	; (8007b4c <MX_GPIO_Init+0x1ec>)
 8007b1c:	f7f9 fa88 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8007b20:	2302      	movs	r3, #2
 8007b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007b24:	4b0a      	ldr	r3, [pc, #40]	; (8007b50 <MX_GPIO_Init+0x1f0>)
 8007b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8007b2c:	f107 031c 	add.w	r3, r7, #28
 8007b30:	4619      	mov	r1, r3
 8007b32:	4804      	ldr	r0, [pc, #16]	; (8007b44 <MX_GPIO_Init+0x1e4>)
 8007b34:	f7f9 fa7c 	bl	8001030 <HAL_GPIO_Init>

}
 8007b38:	bf00      	nop
 8007b3a:	3730      	adds	r7, #48	; 0x30
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	40023800 	.word	0x40023800
 8007b44:	40021000 	.word	0x40021000
 8007b48:	40020800 	.word	0x40020800
 8007b4c:	40020c00 	.word	0x40020c00
 8007b50:	10120000 	.word	0x10120000
 8007b54:	40020000 	.word	0x40020000
 8007b58:	40020400 	.word	0x40020400

08007b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007b60:	bf00      	nop
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
	...

08007b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b72:	2300      	movs	r3, #0
 8007b74:	607b      	str	r3, [r7, #4]
 8007b76:	4b10      	ldr	r3, [pc, #64]	; (8007bb8 <HAL_MspInit+0x4c>)
 8007b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b7a:	4a0f      	ldr	r2, [pc, #60]	; (8007bb8 <HAL_MspInit+0x4c>)
 8007b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b80:	6453      	str	r3, [r2, #68]	; 0x44
 8007b82:	4b0d      	ldr	r3, [pc, #52]	; (8007bb8 <HAL_MspInit+0x4c>)
 8007b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b8a:	607b      	str	r3, [r7, #4]
 8007b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b8e:	2300      	movs	r3, #0
 8007b90:	603b      	str	r3, [r7, #0]
 8007b92:	4b09      	ldr	r3, [pc, #36]	; (8007bb8 <HAL_MspInit+0x4c>)
 8007b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b96:	4a08      	ldr	r2, [pc, #32]	; (8007bb8 <HAL_MspInit+0x4c>)
 8007b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8007b9e:	4b06      	ldr	r3, [pc, #24]	; (8007bb8 <HAL_MspInit+0x4c>)
 8007ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ba6:	603b      	str	r3, [r7, #0]
 8007ba8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007baa:	2007      	movs	r0, #7
 8007bac:	f7f9 f9fe 	bl	8000fac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007bb0:	bf00      	nop
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	40023800 	.word	0x40023800

08007bbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b08a      	sub	sp, #40	; 0x28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bc4:	f107 0314 	add.w	r3, r7, #20
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	605a      	str	r2, [r3, #4]
 8007bce:	609a      	str	r2, [r3, #8]
 8007bd0:	60da      	str	r2, [r3, #12]
 8007bd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a17      	ldr	r2, [pc, #92]	; (8007c38 <HAL_ADC_MspInit+0x7c>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d127      	bne.n	8007c2e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007bde:	2300      	movs	r3, #0
 8007be0:	613b      	str	r3, [r7, #16]
 8007be2:	4b16      	ldr	r3, [pc, #88]	; (8007c3c <HAL_ADC_MspInit+0x80>)
 8007be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be6:	4a15      	ldr	r2, [pc, #84]	; (8007c3c <HAL_ADC_MspInit+0x80>)
 8007be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bec:	6453      	str	r3, [r2, #68]	; 0x44
 8007bee:	4b13      	ldr	r3, [pc, #76]	; (8007c3c <HAL_ADC_MspInit+0x80>)
 8007bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf6:	613b      	str	r3, [r7, #16]
 8007bf8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	4b0f      	ldr	r3, [pc, #60]	; (8007c3c <HAL_ADC_MspInit+0x80>)
 8007c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c02:	4a0e      	ldr	r2, [pc, #56]	; (8007c3c <HAL_ADC_MspInit+0x80>)
 8007c04:	f043 0302 	orr.w	r3, r3, #2
 8007c08:	6313      	str	r3, [r2, #48]	; 0x30
 8007c0a:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <HAL_ADC_MspInit+0x80>)
 8007c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0e:	f003 0302 	and.w	r3, r3, #2
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007c16:	2301      	movs	r3, #1
 8007c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c22:	f107 0314 	add.w	r3, r7, #20
 8007c26:	4619      	mov	r1, r3
 8007c28:	4805      	ldr	r0, [pc, #20]	; (8007c40 <HAL_ADC_MspInit+0x84>)
 8007c2a:	f7f9 fa01 	bl	8001030 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007c2e:	bf00      	nop
 8007c30:	3728      	adds	r7, #40	; 0x28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	40012000 	.word	0x40012000
 8007c3c:	40023800 	.word	0x40023800
 8007c40:	40020400 	.word	0x40020400

08007c44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b08a      	sub	sp, #40	; 0x28
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c4c:	f107 0314 	add.w	r3, r7, #20
 8007c50:	2200      	movs	r2, #0
 8007c52:	601a      	str	r2, [r3, #0]
 8007c54:	605a      	str	r2, [r3, #4]
 8007c56:	609a      	str	r2, [r3, #8]
 8007c58:	60da      	str	r2, [r3, #12]
 8007c5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a19      	ldr	r2, [pc, #100]	; (8007cc8 <HAL_I2C_MspInit+0x84>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d12c      	bne.n	8007cc0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c66:	2300      	movs	r3, #0
 8007c68:	613b      	str	r3, [r7, #16]
 8007c6a:	4b18      	ldr	r3, [pc, #96]	; (8007ccc <HAL_I2C_MspInit+0x88>)
 8007c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6e:	4a17      	ldr	r2, [pc, #92]	; (8007ccc <HAL_I2C_MspInit+0x88>)
 8007c70:	f043 0302 	orr.w	r3, r3, #2
 8007c74:	6313      	str	r3, [r2, #48]	; 0x30
 8007c76:	4b15      	ldr	r3, [pc, #84]	; (8007ccc <HAL_I2C_MspInit+0x88>)
 8007c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7a:	f003 0302 	and.w	r3, r3, #2
 8007c7e:	613b      	str	r3, [r7, #16]
 8007c80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8007c82:	f44f 7310 	mov.w	r3, #576	; 0x240
 8007c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007c88:	2312      	movs	r3, #18
 8007c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c90:	2300      	movs	r3, #0
 8007c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007c94:	2304      	movs	r3, #4
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c98:	f107 0314 	add.w	r3, r7, #20
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	480c      	ldr	r0, [pc, #48]	; (8007cd0 <HAL_I2C_MspInit+0x8c>)
 8007ca0:	f7f9 f9c6 	bl	8001030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]
 8007ca8:	4b08      	ldr	r3, [pc, #32]	; (8007ccc <HAL_I2C_MspInit+0x88>)
 8007caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cac:	4a07      	ldr	r2, [pc, #28]	; (8007ccc <HAL_I2C_MspInit+0x88>)
 8007cae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8007cb4:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <HAL_I2C_MspInit+0x88>)
 8007cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cbc:	60fb      	str	r3, [r7, #12]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007cc0:	bf00      	nop
 8007cc2:	3728      	adds	r7, #40	; 0x28
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	40005400 	.word	0x40005400
 8007ccc:	40023800 	.word	0x40023800
 8007cd0:	40020400 	.word	0x40020400

08007cd4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b08a      	sub	sp, #40	; 0x28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cdc:	f107 0314 	add.w	r3, r7, #20
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	605a      	str	r2, [r3, #4]
 8007ce6:	609a      	str	r2, [r3, #8]
 8007ce8:	60da      	str	r2, [r3, #12]
 8007cea:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a28      	ldr	r2, [pc, #160]	; (8007d94 <HAL_I2S_MspInit+0xc0>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d14a      	bne.n	8007d8c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	613b      	str	r3, [r7, #16]
 8007cfa:	4b27      	ldr	r3, [pc, #156]	; (8007d98 <HAL_I2S_MspInit+0xc4>)
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfe:	4a26      	ldr	r2, [pc, #152]	; (8007d98 <HAL_I2S_MspInit+0xc4>)
 8007d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d04:	6413      	str	r3, [r2, #64]	; 0x40
 8007d06:	4b24      	ldr	r3, [pc, #144]	; (8007d98 <HAL_I2S_MspInit+0xc4>)
 8007d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d0e:	613b      	str	r3, [r7, #16]
 8007d10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d12:	2300      	movs	r3, #0
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	4b20      	ldr	r3, [pc, #128]	; (8007d98 <HAL_I2S_MspInit+0xc4>)
 8007d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1a:	4a1f      	ldr	r2, [pc, #124]	; (8007d98 <HAL_I2S_MspInit+0xc4>)
 8007d1c:	f043 0301 	orr.w	r3, r3, #1
 8007d20:	6313      	str	r3, [r2, #48]	; 0x30
 8007d22:	4b1d      	ldr	r3, [pc, #116]	; (8007d98 <HAL_I2S_MspInit+0xc4>)
 8007d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60bb      	str	r3, [r7, #8]
 8007d32:	4b19      	ldr	r3, [pc, #100]	; (8007d98 <HAL_I2S_MspInit+0xc4>)
 8007d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d36:	4a18      	ldr	r2, [pc, #96]	; (8007d98 <HAL_I2S_MspInit+0xc4>)
 8007d38:	f043 0304 	orr.w	r3, r3, #4
 8007d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8007d3e:	4b16      	ldr	r3, [pc, #88]	; (8007d98 <HAL_I2S_MspInit+0xc4>)
 8007d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d42:	f003 0304 	and.w	r3, r3, #4
 8007d46:	60bb      	str	r3, [r7, #8]
 8007d48:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8007d4a:	2310      	movs	r3, #16
 8007d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d4e:	2302      	movs	r3, #2
 8007d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d52:	2300      	movs	r3, #0
 8007d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d56:	2300      	movs	r3, #0
 8007d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007d5a:	2306      	movs	r3, #6
 8007d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8007d5e:	f107 0314 	add.w	r3, r7, #20
 8007d62:	4619      	mov	r1, r3
 8007d64:	480d      	ldr	r0, [pc, #52]	; (8007d9c <HAL_I2S_MspInit+0xc8>)
 8007d66:	f7f9 f963 	bl	8001030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8007d6a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8007d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d70:	2302      	movs	r3, #2
 8007d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d74:	2300      	movs	r3, #0
 8007d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007d7c:	2306      	movs	r3, #6
 8007d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d80:	f107 0314 	add.w	r3, r7, #20
 8007d84:	4619      	mov	r1, r3
 8007d86:	4806      	ldr	r0, [pc, #24]	; (8007da0 <HAL_I2S_MspInit+0xcc>)
 8007d88:	f7f9 f952 	bl	8001030 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007d8c:	bf00      	nop
 8007d8e:	3728      	adds	r7, #40	; 0x28
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	40003c00 	.word	0x40003c00
 8007d98:	40023800 	.word	0x40023800
 8007d9c:	40020000 	.word	0x40020000
 8007da0:	40020800 	.word	0x40020800

08007da4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08a      	sub	sp, #40	; 0x28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dac:	f107 0314 	add.w	r3, r7, #20
 8007db0:	2200      	movs	r2, #0
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	605a      	str	r2, [r3, #4]
 8007db6:	609a      	str	r2, [r3, #8]
 8007db8:	60da      	str	r2, [r3, #12]
 8007dba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a19      	ldr	r2, [pc, #100]	; (8007e28 <HAL_SPI_MspInit+0x84>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d12b      	bne.n	8007e1e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	613b      	str	r3, [r7, #16]
 8007dca:	4b18      	ldr	r3, [pc, #96]	; (8007e2c <HAL_SPI_MspInit+0x88>)
 8007dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dce:	4a17      	ldr	r2, [pc, #92]	; (8007e2c <HAL_SPI_MspInit+0x88>)
 8007dd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8007dd6:	4b15      	ldr	r3, [pc, #84]	; (8007e2c <HAL_SPI_MspInit+0x88>)
 8007dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007dde:	613b      	str	r3, [r7, #16]
 8007de0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007de2:	2300      	movs	r3, #0
 8007de4:	60fb      	str	r3, [r7, #12]
 8007de6:	4b11      	ldr	r3, [pc, #68]	; (8007e2c <HAL_SPI_MspInit+0x88>)
 8007de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dea:	4a10      	ldr	r2, [pc, #64]	; (8007e2c <HAL_SPI_MspInit+0x88>)
 8007dec:	f043 0301 	orr.w	r3, r3, #1
 8007df0:	6313      	str	r3, [r2, #48]	; 0x30
 8007df2:	4b0e      	ldr	r3, [pc, #56]	; (8007e2c <HAL_SPI_MspInit+0x88>)
 8007df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	60fb      	str	r3, [r7, #12]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8007dfe:	23e0      	movs	r3, #224	; 0xe0
 8007e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e02:	2302      	movs	r3, #2
 8007e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e06:	2300      	movs	r3, #0
 8007e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007e0e:	2305      	movs	r3, #5
 8007e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e12:	f107 0314 	add.w	r3, r7, #20
 8007e16:	4619      	mov	r1, r3
 8007e18:	4805      	ldr	r0, [pc, #20]	; (8007e30 <HAL_SPI_MspInit+0x8c>)
 8007e1a:	f7f9 f909 	bl	8001030 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007e1e:	bf00      	nop
 8007e20:	3728      	adds	r7, #40	; 0x28
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	40013000 	.word	0x40013000
 8007e2c:	40023800 	.word	0x40023800
 8007e30:	40020000 	.word	0x40020000

08007e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b08e      	sub	sp, #56	; 0x38
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e40:	2200      	movs	r2, #0
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	605a      	str	r2, [r3, #4]
 8007e46:	609a      	str	r2, [r3, #8]
 8007e48:	60da      	str	r2, [r3, #12]
 8007e4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a59      	ldr	r2, [pc, #356]	; (8007fb8 <HAL_UART_MspInit+0x184>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d15a      	bne.n	8007f0c <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007e56:	2300      	movs	r3, #0
 8007e58:	623b      	str	r3, [r7, #32]
 8007e5a:	4b58      	ldr	r3, [pc, #352]	; (8007fbc <HAL_UART_MspInit+0x188>)
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5e:	4a57      	ldr	r2, [pc, #348]	; (8007fbc <HAL_UART_MspInit+0x188>)
 8007e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e64:	6413      	str	r3, [r2, #64]	; 0x40
 8007e66:	4b55      	ldr	r3, [pc, #340]	; (8007fbc <HAL_UART_MspInit+0x188>)
 8007e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e6e:	623b      	str	r3, [r7, #32]
 8007e70:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e72:	2300      	movs	r3, #0
 8007e74:	61fb      	str	r3, [r7, #28]
 8007e76:	4b51      	ldr	r3, [pc, #324]	; (8007fbc <HAL_UART_MspInit+0x188>)
 8007e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7a:	4a50      	ldr	r2, [pc, #320]	; (8007fbc <HAL_UART_MspInit+0x188>)
 8007e7c:	f043 0301 	orr.w	r3, r3, #1
 8007e80:	6313      	str	r3, [r2, #48]	; 0x30
 8007e82:	4b4e      	ldr	r3, [pc, #312]	; (8007fbc <HAL_UART_MspInit+0x188>)
 8007e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	61fb      	str	r3, [r7, #28]
 8007e8c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61bb      	str	r3, [r7, #24]
 8007e92:	4b4a      	ldr	r3, [pc, #296]	; (8007fbc <HAL_UART_MspInit+0x188>)
 8007e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e96:	4a49      	ldr	r2, [pc, #292]	; (8007fbc <HAL_UART_MspInit+0x188>)
 8007e98:	f043 0308 	orr.w	r3, r3, #8
 8007e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8007e9e:	4b47      	ldr	r3, [pc, #284]	; (8007fbc <HAL_UART_MspInit+0x188>)
 8007ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea2:	f003 0308 	and.w	r3, r3, #8
 8007ea6:	61bb      	str	r3, [r7, #24]
 8007ea8:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PD3     ------> USART2_CTS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007eaa:	2302      	movs	r3, #2
 8007eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eae:	2302      	movs	r3, #2
 8007eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007eba:	2307      	movs	r3, #7
 8007ebc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	483e      	ldr	r0, [pc, #248]	; (8007fc0 <HAL_UART_MspInit+0x18c>)
 8007ec6:	f7f9 f8b3 	bl	8001030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007eca:	230c      	movs	r3, #12
 8007ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ece:	2302      	movs	r3, #2
 8007ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007eda:	2307      	movs	r3, #7
 8007edc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	4836      	ldr	r0, [pc, #216]	; (8007fc0 <HAL_UART_MspInit+0x18c>)
 8007ee6:	f7f9 f8a3 	bl	8001030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007eea:	2308      	movs	r3, #8
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eee:	2302      	movs	r3, #2
 8007ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007efa:	2307      	movs	r3, #7
 8007efc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f02:	4619      	mov	r1, r3
 8007f04:	482f      	ldr	r0, [pc, #188]	; (8007fc4 <HAL_UART_MspInit+0x190>)
 8007f06:	f7f9 f893 	bl	8001030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007f0a:	e050      	b.n	8007fae <HAL_UART_MspInit+0x17a>
  else if(huart->Instance==USART3)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a2d      	ldr	r2, [pc, #180]	; (8007fc8 <HAL_UART_MspInit+0x194>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d14b      	bne.n	8007fae <HAL_UART_MspInit+0x17a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007f16:	2300      	movs	r3, #0
 8007f18:	617b      	str	r3, [r7, #20]
 8007f1a:	4b28      	ldr	r3, [pc, #160]	; (8007fbc <HAL_UART_MspInit+0x188>)
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	4a27      	ldr	r2, [pc, #156]	; (8007fbc <HAL_UART_MspInit+0x188>)
 8007f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f24:	6413      	str	r3, [r2, #64]	; 0x40
 8007f26:	4b25      	ldr	r3, [pc, #148]	; (8007fbc <HAL_UART_MspInit+0x188>)
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f2e:	617b      	str	r3, [r7, #20]
 8007f30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f32:	2300      	movs	r3, #0
 8007f34:	613b      	str	r3, [r7, #16]
 8007f36:	4b21      	ldr	r3, [pc, #132]	; (8007fbc <HAL_UART_MspInit+0x188>)
 8007f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3a:	4a20      	ldr	r2, [pc, #128]	; (8007fbc <HAL_UART_MspInit+0x188>)
 8007f3c:	f043 0302 	orr.w	r3, r3, #2
 8007f40:	6313      	str	r3, [r2, #48]	; 0x30
 8007f42:	4b1e      	ldr	r3, [pc, #120]	; (8007fbc <HAL_UART_MspInit+0x188>)
 8007f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f46:	f003 0302 	and.w	r3, r3, #2
 8007f4a:	613b      	str	r3, [r7, #16]
 8007f4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f4e:	2300      	movs	r3, #0
 8007f50:	60fb      	str	r3, [r7, #12]
 8007f52:	4b1a      	ldr	r3, [pc, #104]	; (8007fbc <HAL_UART_MspInit+0x188>)
 8007f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f56:	4a19      	ldr	r2, [pc, #100]	; (8007fbc <HAL_UART_MspInit+0x188>)
 8007f58:	f043 0308 	orr.w	r3, r3, #8
 8007f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8007f5e:	4b17      	ldr	r3, [pc, #92]	; (8007fbc <HAL_UART_MspInit+0x188>)
 8007f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f62:	f003 0308 	and.w	r3, r3, #8
 8007f66:	60fb      	str	r3, [r7, #12]
 8007f68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007f6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f70:	2302      	movs	r3, #2
 8007f72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007f74:	2301      	movs	r3, #1
 8007f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007f7c:	2307      	movs	r3, #7
 8007f7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f84:	4619      	mov	r1, r3
 8007f86:	4811      	ldr	r0, [pc, #68]	; (8007fcc <HAL_UART_MspInit+0x198>)
 8007f88:	f7f9 f852 	bl	8001030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f92:	2302      	movs	r3, #2
 8007f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007f96:	2301      	movs	r3, #1
 8007f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007f9e:	2307      	movs	r3, #7
 8007fa0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	4806      	ldr	r0, [pc, #24]	; (8007fc4 <HAL_UART_MspInit+0x190>)
 8007faa:	f7f9 f841 	bl	8001030 <HAL_GPIO_Init>
}
 8007fae:	bf00      	nop
 8007fb0:	3738      	adds	r7, #56	; 0x38
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	40004400 	.word	0x40004400
 8007fbc:	40023800 	.word	0x40023800
 8007fc0:	40020000 	.word	0x40020000
 8007fc4:	40020c00 	.word	0x40020c00
 8007fc8:	40004800 	.word	0x40004800
 8007fcc:	40020400 	.word	0x40020400

08007fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007fd4:	bf00      	nop
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007fe2:	e7fe      	b.n	8007fe2 <HardFault_Handler+0x4>

08007fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007fe8:	e7fe      	b.n	8007fe8 <MemManage_Handler+0x4>

08007fea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007fea:	b480      	push	{r7}
 8007fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007fee:	e7fe      	b.n	8007fee <BusFault_Handler+0x4>

08007ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007ff4:	e7fe      	b.n	8007ff4 <UsageFault_Handler+0x4>

08007ff6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007ffa:	bf00      	nop
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008004:	b480      	push	{r7}
 8008006:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008008:	bf00      	nop
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008012:	b480      	push	{r7}
 8008014:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008016:	bf00      	nop
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008024:	f7f8 faf6 	bl	8000614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008028:	bf00      	nop
 800802a:	bd80      	pop	{r7, pc}

0800802c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8008030:	4802      	ldr	r0, [pc, #8]	; (800803c <OTG_FS_IRQHandler+0x10>)
 8008032:	f7f9 fc35 	bl	80018a0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008036:	bf00      	nop
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	2000065c 	.word	0x2000065c

08008040 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008048:	4b11      	ldr	r3, [pc, #68]	; (8008090 <_sbrk+0x50>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d102      	bne.n	8008056 <_sbrk+0x16>
		heap_end = &end;
 8008050:	4b0f      	ldr	r3, [pc, #60]	; (8008090 <_sbrk+0x50>)
 8008052:	4a10      	ldr	r2, [pc, #64]	; (8008094 <_sbrk+0x54>)
 8008054:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008056:	4b0e      	ldr	r3, [pc, #56]	; (8008090 <_sbrk+0x50>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800805c:	4b0c      	ldr	r3, [pc, #48]	; (8008090 <_sbrk+0x50>)
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4413      	add	r3, r2
 8008064:	466a      	mov	r2, sp
 8008066:	4293      	cmp	r3, r2
 8008068:	d907      	bls.n	800807a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800806a:	f000 fb7d 	bl	8008768 <__errno>
 800806e:	4602      	mov	r2, r0
 8008070:	230c      	movs	r3, #12
 8008072:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008074:	f04f 33ff 	mov.w	r3, #4294967295
 8008078:	e006      	b.n	8008088 <_sbrk+0x48>
	}

	heap_end += incr;
 800807a:	4b05      	ldr	r3, [pc, #20]	; (8008090 <_sbrk+0x50>)
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4413      	add	r3, r2
 8008082:	4a03      	ldr	r2, [pc, #12]	; (8008090 <_sbrk+0x50>)
 8008084:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008086:	68fb      	ldr	r3, [r7, #12]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	200000b0 	.word	0x200000b0
 8008094:	20000928 	.word	0x20000928

08008098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008098:	b480      	push	{r7}
 800809a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800809c:	4b16      	ldr	r3, [pc, #88]	; (80080f8 <SystemInit+0x60>)
 800809e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a2:	4a15      	ldr	r2, [pc, #84]	; (80080f8 <SystemInit+0x60>)
 80080a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80080a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80080ac:	4b13      	ldr	r3, [pc, #76]	; (80080fc <SystemInit+0x64>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a12      	ldr	r2, [pc, #72]	; (80080fc <SystemInit+0x64>)
 80080b2:	f043 0301 	orr.w	r3, r3, #1
 80080b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80080b8:	4b10      	ldr	r3, [pc, #64]	; (80080fc <SystemInit+0x64>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80080be:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <SystemInit+0x64>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a0e      	ldr	r2, [pc, #56]	; (80080fc <SystemInit+0x64>)
 80080c4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80080c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80080ce:	4b0b      	ldr	r3, [pc, #44]	; (80080fc <SystemInit+0x64>)
 80080d0:	4a0b      	ldr	r2, [pc, #44]	; (8008100 <SystemInit+0x68>)
 80080d2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80080d4:	4b09      	ldr	r3, [pc, #36]	; (80080fc <SystemInit+0x64>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a08      	ldr	r2, [pc, #32]	; (80080fc <SystemInit+0x64>)
 80080da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80080e0:	4b06      	ldr	r3, [pc, #24]	; (80080fc <SystemInit+0x64>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80080e6:	4b04      	ldr	r3, [pc, #16]	; (80080f8 <SystemInit+0x60>)
 80080e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80080ec:	609a      	str	r2, [r3, #8]
#endif
}
 80080ee:	bf00      	nop
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr
 80080f8:	e000ed00 	.word	0xe000ed00
 80080fc:	40023800 	.word	0x40023800
 8008100:	24003010 	.word	0x24003010

08008104 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008108:	2201      	movs	r2, #1
 800810a:	490e      	ldr	r1, [pc, #56]	; (8008144 <MX_USB_HOST_Init+0x40>)
 800810c:	480e      	ldr	r0, [pc, #56]	; (8008148 <MX_USB_HOST_Init+0x44>)
 800810e:	f7fd ff55 	bl	8005fbc <USBH_Init>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008118:	f7ff fd20 	bl	8007b5c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800811c:	490b      	ldr	r1, [pc, #44]	; (800814c <MX_USB_HOST_Init+0x48>)
 800811e:	480a      	ldr	r0, [pc, #40]	; (8008148 <MX_USB_HOST_Init+0x44>)
 8008120:	f7fd ffbf 	bl	80060a2 <USBH_RegisterClass>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800812a:	f7ff fd17 	bl	8007b5c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800812e:	4806      	ldr	r0, [pc, #24]	; (8008148 <MX_USB_HOST_Init+0x44>)
 8008130:	f7fe f844 	bl	80061bc <USBH_Start>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800813a:	f7ff fd0f 	bl	8007b5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800813e:	bf00      	nop
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	08008165 	.word	0x08008165
 8008148:	20000290 	.word	0x20000290
 800814c:	20000008 	.word	0x20000008

08008150 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008154:	4802      	ldr	r0, [pc, #8]	; (8008160 <MX_USB_HOST_Process+0x10>)
 8008156:	f7fe f841 	bl	80061dc <USBH_Process>
}
 800815a:	bf00      	nop
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	20000290 	.word	0x20000290

08008164 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	460b      	mov	r3, r1
 800816e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008170:	78fb      	ldrb	r3, [r7, #3]
 8008172:	3b01      	subs	r3, #1
 8008174:	2b04      	cmp	r3, #4
 8008176:	d819      	bhi.n	80081ac <USBH_UserProcess+0x48>
 8008178:	a201      	add	r2, pc, #4	; (adr r2, 8008180 <USBH_UserProcess+0x1c>)
 800817a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817e:	bf00      	nop
 8008180:	080081ad 	.word	0x080081ad
 8008184:	0800819d 	.word	0x0800819d
 8008188:	080081ad 	.word	0x080081ad
 800818c:	080081a5 	.word	0x080081a5
 8008190:	08008195 	.word	0x08008195
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008194:	4b09      	ldr	r3, [pc, #36]	; (80081bc <USBH_UserProcess+0x58>)
 8008196:	2203      	movs	r2, #3
 8008198:	701a      	strb	r2, [r3, #0]
  break;
 800819a:	e008      	b.n	80081ae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800819c:	4b07      	ldr	r3, [pc, #28]	; (80081bc <USBH_UserProcess+0x58>)
 800819e:	2202      	movs	r2, #2
 80081a0:	701a      	strb	r2, [r3, #0]
  break;
 80081a2:	e004      	b.n	80081ae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80081a4:	4b05      	ldr	r3, [pc, #20]	; (80081bc <USBH_UserProcess+0x58>)
 80081a6:	2201      	movs	r2, #1
 80081a8:	701a      	strb	r2, [r3, #0]
  break;
 80081aa:	e000      	b.n	80081ae <USBH_UserProcess+0x4a>

  default:
  break;
 80081ac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80081ae:	bf00      	nop
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	200000b4 	.word	0x200000b4

080081c0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b08a      	sub	sp, #40	; 0x28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081c8:	f107 0314 	add.w	r3, r7, #20
 80081cc:	2200      	movs	r2, #0
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	605a      	str	r2, [r3, #4]
 80081d2:	609a      	str	r2, [r3, #8]
 80081d4:	60da      	str	r2, [r3, #12]
 80081d6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081e0:	d147      	bne.n	8008272 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081e2:	2300      	movs	r3, #0
 80081e4:	613b      	str	r3, [r7, #16]
 80081e6:	4b25      	ldr	r3, [pc, #148]	; (800827c <HAL_HCD_MspInit+0xbc>)
 80081e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ea:	4a24      	ldr	r2, [pc, #144]	; (800827c <HAL_HCD_MspInit+0xbc>)
 80081ec:	f043 0301 	orr.w	r3, r3, #1
 80081f0:	6313      	str	r3, [r2, #48]	; 0x30
 80081f2:	4b22      	ldr	r3, [pc, #136]	; (800827c <HAL_HCD_MspInit+0xbc>)
 80081f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	613b      	str	r3, [r7, #16]
 80081fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80081fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008204:	2300      	movs	r3, #0
 8008206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008208:	2300      	movs	r3, #0
 800820a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800820c:	f107 0314 	add.w	r3, r7, #20
 8008210:	4619      	mov	r1, r3
 8008212:	481b      	ldr	r0, [pc, #108]	; (8008280 <HAL_HCD_MspInit+0xc0>)
 8008214:	f7f8 ff0c 	bl	8001030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008218:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800821c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800821e:	2302      	movs	r3, #2
 8008220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008222:	2300      	movs	r3, #0
 8008224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008226:	2300      	movs	r3, #0
 8008228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800822a:	230a      	movs	r3, #10
 800822c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800822e:	f107 0314 	add.w	r3, r7, #20
 8008232:	4619      	mov	r1, r3
 8008234:	4812      	ldr	r0, [pc, #72]	; (8008280 <HAL_HCD_MspInit+0xc0>)
 8008236:	f7f8 fefb 	bl	8001030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800823a:	4b10      	ldr	r3, [pc, #64]	; (800827c <HAL_HCD_MspInit+0xbc>)
 800823c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800823e:	4a0f      	ldr	r2, [pc, #60]	; (800827c <HAL_HCD_MspInit+0xbc>)
 8008240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008244:	6353      	str	r3, [r2, #52]	; 0x34
 8008246:	2300      	movs	r3, #0
 8008248:	60fb      	str	r3, [r7, #12]
 800824a:	4b0c      	ldr	r3, [pc, #48]	; (800827c <HAL_HCD_MspInit+0xbc>)
 800824c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800824e:	4a0b      	ldr	r2, [pc, #44]	; (800827c <HAL_HCD_MspInit+0xbc>)
 8008250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008254:	6453      	str	r3, [r2, #68]	; 0x44
 8008256:	4b09      	ldr	r3, [pc, #36]	; (800827c <HAL_HCD_MspInit+0xbc>)
 8008258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800825a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008262:	2200      	movs	r2, #0
 8008264:	2100      	movs	r1, #0
 8008266:	2043      	movs	r0, #67	; 0x43
 8008268:	f7f8 feab 	bl	8000fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800826c:	2043      	movs	r0, #67	; 0x43
 800826e:	f7f8 fec4 	bl	8000ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008272:	bf00      	nop
 8008274:	3728      	adds	r7, #40	; 0x28
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	40023800 	.word	0x40023800
 8008280:	40020000 	.word	0x40020000

08008284 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe fa53 	bl	800673e <USBH_LL_IncTimer>
}
 8008298:	bf00      	nop
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fe fa98 	bl	80067e4 <USBH_LL_Connect>
}
 80082b4:	bf00      	nop
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fe fab0 	bl	8006830 <USBH_LL_Disconnect>
}
 80082d0:	bf00      	nop
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	70fb      	strb	r3, [r7, #3]
 80082e4:	4613      	mov	r3, r2
 80082e6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008302:	4618      	mov	r0, r3
 8008304:	f7fe fa45 	bl	8006792 <USBH_LL_PortEnabled>
} 
 8008308:	bf00      	nop
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800831e:	4618      	mov	r0, r3
 8008320:	f7fe fa45 	bl	80067ae <USBH_LL_PortDisabled>
} 
 8008324:	bf00      	nop
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800833a:	2b01      	cmp	r3, #1
 800833c:	d12a      	bne.n	8008394 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800833e:	4a18      	ldr	r2, [pc, #96]	; (80083a0 <USBH_LL_Init+0x74>)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a15      	ldr	r2, [pc, #84]	; (80083a0 <USBH_LL_Init+0x74>)
 800834a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800834e:	4b14      	ldr	r3, [pc, #80]	; (80083a0 <USBH_LL_Init+0x74>)
 8008350:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008354:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008356:	4b12      	ldr	r3, [pc, #72]	; (80083a0 <USBH_LL_Init+0x74>)
 8008358:	2208      	movs	r2, #8
 800835a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800835c:	4b10      	ldr	r3, [pc, #64]	; (80083a0 <USBH_LL_Init+0x74>)
 800835e:	2201      	movs	r2, #1
 8008360:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008362:	4b0f      	ldr	r3, [pc, #60]	; (80083a0 <USBH_LL_Init+0x74>)
 8008364:	2200      	movs	r2, #0
 8008366:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008368:	4b0d      	ldr	r3, [pc, #52]	; (80083a0 <USBH_LL_Init+0x74>)
 800836a:	2202      	movs	r2, #2
 800836c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800836e:	4b0c      	ldr	r3, [pc, #48]	; (80083a0 <USBH_LL_Init+0x74>)
 8008370:	2200      	movs	r2, #0
 8008372:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008374:	480a      	ldr	r0, [pc, #40]	; (80083a0 <USBH_LL_Init+0x74>)
 8008376:	f7f9 f80e 	bl	8001396 <HAL_HCD_Init>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008380:	f7ff fbec 	bl	8007b5c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008384:	4806      	ldr	r0, [pc, #24]	; (80083a0 <USBH_LL_Init+0x74>)
 8008386:	f7f9 fc09 	bl	8001b9c <HAL_HCD_GetCurrentFrame>
 800838a:	4603      	mov	r3, r0
 800838c:	4619      	mov	r1, r3
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f7fe f9c6 	bl	8006720 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	2000065c 	.word	0x2000065c

080083a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7f9 fb76 	bl	8001aac <HAL_HCD_Start>
 80083c0:	4603      	mov	r3, r0
 80083c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 f95c 	bl	8008684 <USBH_Get_USB_Status>
 80083cc:	4603      	mov	r3, r0
 80083ce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80083d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b084      	sub	sp, #16
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7f9 fb7e 	bl	8001af2 <HAL_HCD_Stop>
 80083f6:	4603      	mov	r3, r0
 80083f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 f941 	bl	8008684 <USBH_Get_USB_Status>
 8008402:	4603      	mov	r3, r0
 8008404:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8008406:	7bbb      	ldrb	r3, [r7, #14]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008418:	2301      	movs	r3, #1
 800841a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008422:	4618      	mov	r0, r3
 8008424:	f7f9 fbc8 	bl	8001bb8 <HAL_HCD_GetCurrentSpeed>
 8008428:	4603      	mov	r3, r0
 800842a:	2b01      	cmp	r3, #1
 800842c:	d007      	beq.n	800843e <USBH_LL_GetSpeed+0x2e>
 800842e:	2b01      	cmp	r3, #1
 8008430:	d302      	bcc.n	8008438 <USBH_LL_GetSpeed+0x28>
 8008432:	2b02      	cmp	r3, #2
 8008434:	d006      	beq.n	8008444 <USBH_LL_GetSpeed+0x34>
 8008436:	e008      	b.n	800844a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008438:	2300      	movs	r3, #0
 800843a:	73fb      	strb	r3, [r7, #15]
    break;
 800843c:	e008      	b.n	8008450 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800843e:	2301      	movs	r3, #1
 8008440:	73fb      	strb	r3, [r7, #15]
    break;
 8008442:	e005      	b.n	8008450 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008444:	2302      	movs	r3, #2
 8008446:	73fb      	strb	r3, [r7, #15]
    break;
 8008448:	e002      	b.n	8008450 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800844a:	2301      	movs	r3, #1
 800844c:	73fb      	strb	r3, [r7, #15]
    break;
 800844e:	bf00      	nop
  }
  return  speed;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008470:	4618      	mov	r0, r3
 8008472:	f7f9 fb5b 	bl	8001b2c <HAL_HCD_ResetPort>
 8008476:	4603      	mov	r3, r0
 8008478:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800847a:	7bfb      	ldrb	r3, [r7, #15]
 800847c:	4618      	mov	r0, r3
 800847e:	f000 f901 	bl	8008684 <USBH_Get_USB_Status>
 8008482:	4603      	mov	r3, r0
 8008484:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008486:	7bbb      	ldrb	r3, [r7, #14]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084a2:	78fa      	ldrb	r2, [r7, #3]
 80084a4:	4611      	mov	r1, r2
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7f9 fb63 	bl	8001b72 <HAL_HCD_HC_GetXferCount>
 80084ac:	4603      	mov	r3, r0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80084b6:	b590      	push	{r4, r7, lr}
 80084b8:	b089      	sub	sp, #36	; 0x24
 80084ba:	af04      	add	r7, sp, #16
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	4608      	mov	r0, r1
 80084c0:	4611      	mov	r1, r2
 80084c2:	461a      	mov	r2, r3
 80084c4:	4603      	mov	r3, r0
 80084c6:	70fb      	strb	r3, [r7, #3]
 80084c8:	460b      	mov	r3, r1
 80084ca:	70bb      	strb	r3, [r7, #2]
 80084cc:	4613      	mov	r3, r2
 80084ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80084de:	787c      	ldrb	r4, [r7, #1]
 80084e0:	78ba      	ldrb	r2, [r7, #2]
 80084e2:	78f9      	ldrb	r1, [r7, #3]
 80084e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084e6:	9302      	str	r3, [sp, #8]
 80084e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80084ec:	9301      	str	r3, [sp, #4]
 80084ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	4623      	mov	r3, r4
 80084f6:	f7f8 ffb0 	bl	800145a <HAL_HCD_HC_Init>
 80084fa:	4603      	mov	r3, r0
 80084fc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80084fe:	7bfb      	ldrb	r3, [r7, #15]
 8008500:	4618      	mov	r0, r3
 8008502:	f000 f8bf 	bl	8008684 <USBH_Get_USB_Status>
 8008506:	4603      	mov	r3, r0
 8008508:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800850a:	7bbb      	ldrb	r3, [r7, #14]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	bd90      	pop	{r4, r7, pc}

08008514 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008524:	2300      	movs	r3, #0
 8008526:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800852e:	78fa      	ldrb	r2, [r7, #3]
 8008530:	4611      	mov	r1, r2
 8008532:	4618      	mov	r0, r3
 8008534:	f7f9 f829 	bl	800158a <HAL_HCD_HC_Halt>
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	4618      	mov	r0, r3
 8008540:	f000 f8a0 	bl	8008684 <USBH_Get_USB_Status>
 8008544:	4603      	mov	r3, r0
 8008546:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008548:	7bbb      	ldrb	r3, [r7, #14]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008552:	b590      	push	{r4, r7, lr}
 8008554:	b089      	sub	sp, #36	; 0x24
 8008556:	af04      	add	r7, sp, #16
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	4608      	mov	r0, r1
 800855c:	4611      	mov	r1, r2
 800855e:	461a      	mov	r2, r3
 8008560:	4603      	mov	r3, r0
 8008562:	70fb      	strb	r3, [r7, #3]
 8008564:	460b      	mov	r3, r1
 8008566:	70bb      	strb	r3, [r7, #2]
 8008568:	4613      	mov	r3, r2
 800856a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800857a:	787c      	ldrb	r4, [r7, #1]
 800857c:	78ba      	ldrb	r2, [r7, #2]
 800857e:	78f9      	ldrb	r1, [r7, #3]
 8008580:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008584:	9303      	str	r3, [sp, #12]
 8008586:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008588:	9302      	str	r3, [sp, #8]
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	9301      	str	r3, [sp, #4]
 800858e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	4623      	mov	r3, r4
 8008596:	f7f9 f81b 	bl	80015d0 <HAL_HCD_HC_SubmitRequest>
 800859a:	4603      	mov	r3, r0
 800859c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f000 f86f 	bl	8008684 <USBH_Get_USB_Status>
 80085a6:	4603      	mov	r3, r0
 80085a8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80085aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd90      	pop	{r4, r7, pc}

080085b4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	460b      	mov	r3, r1
 80085be:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085c6:	78fa      	ldrb	r2, [r7, #3]
 80085c8:	4611      	mov	r1, r2
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7f9 fabc 	bl	8001b48 <HAL_HCD_HC_GetURBState>
 80085d0:	4603      	mov	r3, r0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	460b      	mov	r3, r1
 80085e4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d103      	bne.n	80085f8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80085f0:	78fb      	ldrb	r3, [r7, #3]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 f872 	bl	80086dc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80085f8:	20c8      	movs	r0, #200	; 0xc8
 80085fa:	f7f8 f82b 	bl	8000654 <HAL_Delay>
  return USBH_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	460b      	mov	r3, r1
 8008612:	70fb      	strb	r3, [r7, #3]
 8008614:	4613      	mov	r3, r2
 8008616:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800861e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008620:	78fa      	ldrb	r2, [r7, #3]
 8008622:	68f9      	ldr	r1, [r7, #12]
 8008624:	4613      	mov	r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	00db      	lsls	r3, r3, #3
 800862c:	440b      	add	r3, r1
 800862e:	333b      	adds	r3, #59	; 0x3b
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008636:	78fa      	ldrb	r2, [r7, #3]
 8008638:	68f9      	ldr	r1, [r7, #12]
 800863a:	4613      	mov	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4413      	add	r3, r2
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	440b      	add	r3, r1
 8008644:	3350      	adds	r3, #80	; 0x50
 8008646:	78ba      	ldrb	r2, [r7, #2]
 8008648:	701a      	strb	r2, [r3, #0]
 800864a:	e009      	b.n	8008660 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800864c:	78fa      	ldrb	r2, [r7, #3]
 800864e:	68f9      	ldr	r1, [r7, #12]
 8008650:	4613      	mov	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4413      	add	r3, r2
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	440b      	add	r3, r1
 800865a:	3351      	adds	r3, #81	; 0x51
 800865c:	78ba      	ldrb	r2, [r7, #2]
 800865e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3714      	adds	r7, #20
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b082      	sub	sp, #8
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7f7 ffec 	bl	8000654 <HAL_Delay>
}
 800867c:	bf00      	nop
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	4603      	mov	r3, r0
 800868c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008692:	79fb      	ldrb	r3, [r7, #7]
 8008694:	2b03      	cmp	r3, #3
 8008696:	d817      	bhi.n	80086c8 <USBH_Get_USB_Status+0x44>
 8008698:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <USBH_Get_USB_Status+0x1c>)
 800869a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869e:	bf00      	nop
 80086a0:	080086b1 	.word	0x080086b1
 80086a4:	080086b7 	.word	0x080086b7
 80086a8:	080086bd 	.word	0x080086bd
 80086ac:	080086c3 	.word	0x080086c3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	73fb      	strb	r3, [r7, #15]
    break;
 80086b4:	e00b      	b.n	80086ce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80086b6:	2302      	movs	r3, #2
 80086b8:	73fb      	strb	r3, [r7, #15]
    break;
 80086ba:	e008      	b.n	80086ce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80086bc:	2301      	movs	r3, #1
 80086be:	73fb      	strb	r3, [r7, #15]
    break;
 80086c0:	e005      	b.n	80086ce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80086c2:	2302      	movs	r3, #2
 80086c4:	73fb      	strb	r3, [r7, #15]
    break;
 80086c6:	e002      	b.n	80086ce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80086c8:	2302      	movs	r3, #2
 80086ca:	73fb      	strb	r3, [r7, #15]
    break;
 80086cc:	bf00      	nop
  }
  return usb_status;
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	4603      	mov	r3, r0
 80086e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80086e6:	79fb      	ldrb	r3, [r7, #7]
 80086e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80086ea:	79fb      	ldrb	r3, [r7, #7]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d102      	bne.n	80086f6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80086f0:	2301      	movs	r3, #1
 80086f2:	73fb      	strb	r3, [r7, #15]
 80086f4:	e001      	b.n	80086fa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80086fa:	7bfb      	ldrb	r3, [r7, #15]
 80086fc:	461a      	mov	r2, r3
 80086fe:	2101      	movs	r1, #1
 8008700:	4803      	ldr	r0, [pc, #12]	; (8008710 <MX_DriverVbusFS+0x34>)
 8008702:	f7f8 fe2f 	bl	8001364 <HAL_GPIO_WritePin>
}
 8008706:	bf00      	nop
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	40020800 	.word	0x40020800

08008714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800874c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008718:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800871a:	e003      	b.n	8008724 <LoopCopyDataInit>

0800871c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800871c:	4b0c      	ldr	r3, [pc, #48]	; (8008750 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800871e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008720:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008722:	3104      	adds	r1, #4

08008724 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008724:	480b      	ldr	r0, [pc, #44]	; (8008754 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008726:	4b0c      	ldr	r3, [pc, #48]	; (8008758 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008728:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800872a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800872c:	d3f6      	bcc.n	800871c <CopyDataInit>
  ldr  r2, =_sbss
 800872e:	4a0b      	ldr	r2, [pc, #44]	; (800875c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008730:	e002      	b.n	8008738 <LoopFillZerobss>

08008732 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008732:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008734:	f842 3b04 	str.w	r3, [r2], #4

08008738 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008738:	4b09      	ldr	r3, [pc, #36]	; (8008760 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800873a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800873c:	d3f9      	bcc.n	8008732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800873e:	f7ff fcab 	bl	8008098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008742:	f000 f817 	bl	8008774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008746:	f7fe fe77 	bl	8007438 <main>
  bx  lr    
 800874a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800874c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008750:	080090b4 	.word	0x080090b4
  ldr  r0, =_sdata
 8008754:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008758:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 800875c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8008760:	20000924 	.word	0x20000924

08008764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008764:	e7fe      	b.n	8008764 <ADC_IRQHandler>
	...

08008768 <__errno>:
 8008768:	4b01      	ldr	r3, [pc, #4]	; (8008770 <__errno+0x8>)
 800876a:	6818      	ldr	r0, [r3, #0]
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	2000002c 	.word	0x2000002c

08008774 <__libc_init_array>:
 8008774:	b570      	push	{r4, r5, r6, lr}
 8008776:	4e0d      	ldr	r6, [pc, #52]	; (80087ac <__libc_init_array+0x38>)
 8008778:	4c0d      	ldr	r4, [pc, #52]	; (80087b0 <__libc_init_array+0x3c>)
 800877a:	1ba4      	subs	r4, r4, r6
 800877c:	10a4      	asrs	r4, r4, #2
 800877e:	2500      	movs	r5, #0
 8008780:	42a5      	cmp	r5, r4
 8008782:	d109      	bne.n	8008798 <__libc_init_array+0x24>
 8008784:	4e0b      	ldr	r6, [pc, #44]	; (80087b4 <__libc_init_array+0x40>)
 8008786:	4c0c      	ldr	r4, [pc, #48]	; (80087b8 <__libc_init_array+0x44>)
 8008788:	f000 fc36 	bl	8008ff8 <_init>
 800878c:	1ba4      	subs	r4, r4, r6
 800878e:	10a4      	asrs	r4, r4, #2
 8008790:	2500      	movs	r5, #0
 8008792:	42a5      	cmp	r5, r4
 8008794:	d105      	bne.n	80087a2 <__libc_init_array+0x2e>
 8008796:	bd70      	pop	{r4, r5, r6, pc}
 8008798:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800879c:	4798      	blx	r3
 800879e:	3501      	adds	r5, #1
 80087a0:	e7ee      	b.n	8008780 <__libc_init_array+0xc>
 80087a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087a6:	4798      	blx	r3
 80087a8:	3501      	adds	r5, #1
 80087aa:	e7f2      	b.n	8008792 <__libc_init_array+0x1e>
 80087ac:	080090ac 	.word	0x080090ac
 80087b0:	080090ac 	.word	0x080090ac
 80087b4:	080090ac 	.word	0x080090ac
 80087b8:	080090b0 	.word	0x080090b0

080087bc <malloc>:
 80087bc:	4b02      	ldr	r3, [pc, #8]	; (80087c8 <malloc+0xc>)
 80087be:	4601      	mov	r1, r0
 80087c0:	6818      	ldr	r0, [r3, #0]
 80087c2:	f000 b861 	b.w	8008888 <_malloc_r>
 80087c6:	bf00      	nop
 80087c8:	2000002c 	.word	0x2000002c

080087cc <free>:
 80087cc:	4b02      	ldr	r3, [pc, #8]	; (80087d8 <free+0xc>)
 80087ce:	4601      	mov	r1, r0
 80087d0:	6818      	ldr	r0, [r3, #0]
 80087d2:	f000 b80b 	b.w	80087ec <_free_r>
 80087d6:	bf00      	nop
 80087d8:	2000002c 	.word	0x2000002c

080087dc <memset>:
 80087dc:	4402      	add	r2, r0
 80087de:	4603      	mov	r3, r0
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d100      	bne.n	80087e6 <memset+0xa>
 80087e4:	4770      	bx	lr
 80087e6:	f803 1b01 	strb.w	r1, [r3], #1
 80087ea:	e7f9      	b.n	80087e0 <memset+0x4>

080087ec <_free_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	4605      	mov	r5, r0
 80087f0:	2900      	cmp	r1, #0
 80087f2:	d045      	beq.n	8008880 <_free_r+0x94>
 80087f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087f8:	1f0c      	subs	r4, r1, #4
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	bfb8      	it	lt
 80087fe:	18e4      	addlt	r4, r4, r3
 8008800:	f000 f8cc 	bl	800899c <__malloc_lock>
 8008804:	4a1f      	ldr	r2, [pc, #124]	; (8008884 <_free_r+0x98>)
 8008806:	6813      	ldr	r3, [r2, #0]
 8008808:	4610      	mov	r0, r2
 800880a:	b933      	cbnz	r3, 800881a <_free_r+0x2e>
 800880c:	6063      	str	r3, [r4, #4]
 800880e:	6014      	str	r4, [r2, #0]
 8008810:	4628      	mov	r0, r5
 8008812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008816:	f000 b8c2 	b.w	800899e <__malloc_unlock>
 800881a:	42a3      	cmp	r3, r4
 800881c:	d90c      	bls.n	8008838 <_free_r+0x4c>
 800881e:	6821      	ldr	r1, [r4, #0]
 8008820:	1862      	adds	r2, r4, r1
 8008822:	4293      	cmp	r3, r2
 8008824:	bf04      	itt	eq
 8008826:	681a      	ldreq	r2, [r3, #0]
 8008828:	685b      	ldreq	r3, [r3, #4]
 800882a:	6063      	str	r3, [r4, #4]
 800882c:	bf04      	itt	eq
 800882e:	1852      	addeq	r2, r2, r1
 8008830:	6022      	streq	r2, [r4, #0]
 8008832:	6004      	str	r4, [r0, #0]
 8008834:	e7ec      	b.n	8008810 <_free_r+0x24>
 8008836:	4613      	mov	r3, r2
 8008838:	685a      	ldr	r2, [r3, #4]
 800883a:	b10a      	cbz	r2, 8008840 <_free_r+0x54>
 800883c:	42a2      	cmp	r2, r4
 800883e:	d9fa      	bls.n	8008836 <_free_r+0x4a>
 8008840:	6819      	ldr	r1, [r3, #0]
 8008842:	1858      	adds	r0, r3, r1
 8008844:	42a0      	cmp	r0, r4
 8008846:	d10b      	bne.n	8008860 <_free_r+0x74>
 8008848:	6820      	ldr	r0, [r4, #0]
 800884a:	4401      	add	r1, r0
 800884c:	1858      	adds	r0, r3, r1
 800884e:	4282      	cmp	r2, r0
 8008850:	6019      	str	r1, [r3, #0]
 8008852:	d1dd      	bne.n	8008810 <_free_r+0x24>
 8008854:	6810      	ldr	r0, [r2, #0]
 8008856:	6852      	ldr	r2, [r2, #4]
 8008858:	605a      	str	r2, [r3, #4]
 800885a:	4401      	add	r1, r0
 800885c:	6019      	str	r1, [r3, #0]
 800885e:	e7d7      	b.n	8008810 <_free_r+0x24>
 8008860:	d902      	bls.n	8008868 <_free_r+0x7c>
 8008862:	230c      	movs	r3, #12
 8008864:	602b      	str	r3, [r5, #0]
 8008866:	e7d3      	b.n	8008810 <_free_r+0x24>
 8008868:	6820      	ldr	r0, [r4, #0]
 800886a:	1821      	adds	r1, r4, r0
 800886c:	428a      	cmp	r2, r1
 800886e:	bf04      	itt	eq
 8008870:	6811      	ldreq	r1, [r2, #0]
 8008872:	6852      	ldreq	r2, [r2, #4]
 8008874:	6062      	str	r2, [r4, #4]
 8008876:	bf04      	itt	eq
 8008878:	1809      	addeq	r1, r1, r0
 800887a:	6021      	streq	r1, [r4, #0]
 800887c:	605c      	str	r4, [r3, #4]
 800887e:	e7c7      	b.n	8008810 <_free_r+0x24>
 8008880:	bd38      	pop	{r3, r4, r5, pc}
 8008882:	bf00      	nop
 8008884:	200000b8 	.word	0x200000b8

08008888 <_malloc_r>:
 8008888:	b570      	push	{r4, r5, r6, lr}
 800888a:	1ccd      	adds	r5, r1, #3
 800888c:	f025 0503 	bic.w	r5, r5, #3
 8008890:	3508      	adds	r5, #8
 8008892:	2d0c      	cmp	r5, #12
 8008894:	bf38      	it	cc
 8008896:	250c      	movcc	r5, #12
 8008898:	2d00      	cmp	r5, #0
 800889a:	4606      	mov	r6, r0
 800889c:	db01      	blt.n	80088a2 <_malloc_r+0x1a>
 800889e:	42a9      	cmp	r1, r5
 80088a0:	d903      	bls.n	80088aa <_malloc_r+0x22>
 80088a2:	230c      	movs	r3, #12
 80088a4:	6033      	str	r3, [r6, #0]
 80088a6:	2000      	movs	r0, #0
 80088a8:	bd70      	pop	{r4, r5, r6, pc}
 80088aa:	f000 f877 	bl	800899c <__malloc_lock>
 80088ae:	4a21      	ldr	r2, [pc, #132]	; (8008934 <_malloc_r+0xac>)
 80088b0:	6814      	ldr	r4, [r2, #0]
 80088b2:	4621      	mov	r1, r4
 80088b4:	b991      	cbnz	r1, 80088dc <_malloc_r+0x54>
 80088b6:	4c20      	ldr	r4, [pc, #128]	; (8008938 <_malloc_r+0xb0>)
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	b91b      	cbnz	r3, 80088c4 <_malloc_r+0x3c>
 80088bc:	4630      	mov	r0, r6
 80088be:	f000 f83d 	bl	800893c <_sbrk_r>
 80088c2:	6020      	str	r0, [r4, #0]
 80088c4:	4629      	mov	r1, r5
 80088c6:	4630      	mov	r0, r6
 80088c8:	f000 f838 	bl	800893c <_sbrk_r>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d124      	bne.n	800891a <_malloc_r+0x92>
 80088d0:	230c      	movs	r3, #12
 80088d2:	6033      	str	r3, [r6, #0]
 80088d4:	4630      	mov	r0, r6
 80088d6:	f000 f862 	bl	800899e <__malloc_unlock>
 80088da:	e7e4      	b.n	80088a6 <_malloc_r+0x1e>
 80088dc:	680b      	ldr	r3, [r1, #0]
 80088de:	1b5b      	subs	r3, r3, r5
 80088e0:	d418      	bmi.n	8008914 <_malloc_r+0x8c>
 80088e2:	2b0b      	cmp	r3, #11
 80088e4:	d90f      	bls.n	8008906 <_malloc_r+0x7e>
 80088e6:	600b      	str	r3, [r1, #0]
 80088e8:	50cd      	str	r5, [r1, r3]
 80088ea:	18cc      	adds	r4, r1, r3
 80088ec:	4630      	mov	r0, r6
 80088ee:	f000 f856 	bl	800899e <__malloc_unlock>
 80088f2:	f104 000b 	add.w	r0, r4, #11
 80088f6:	1d23      	adds	r3, r4, #4
 80088f8:	f020 0007 	bic.w	r0, r0, #7
 80088fc:	1ac3      	subs	r3, r0, r3
 80088fe:	d0d3      	beq.n	80088a8 <_malloc_r+0x20>
 8008900:	425a      	negs	r2, r3
 8008902:	50e2      	str	r2, [r4, r3]
 8008904:	e7d0      	b.n	80088a8 <_malloc_r+0x20>
 8008906:	428c      	cmp	r4, r1
 8008908:	684b      	ldr	r3, [r1, #4]
 800890a:	bf16      	itet	ne
 800890c:	6063      	strne	r3, [r4, #4]
 800890e:	6013      	streq	r3, [r2, #0]
 8008910:	460c      	movne	r4, r1
 8008912:	e7eb      	b.n	80088ec <_malloc_r+0x64>
 8008914:	460c      	mov	r4, r1
 8008916:	6849      	ldr	r1, [r1, #4]
 8008918:	e7cc      	b.n	80088b4 <_malloc_r+0x2c>
 800891a:	1cc4      	adds	r4, r0, #3
 800891c:	f024 0403 	bic.w	r4, r4, #3
 8008920:	42a0      	cmp	r0, r4
 8008922:	d005      	beq.n	8008930 <_malloc_r+0xa8>
 8008924:	1a21      	subs	r1, r4, r0
 8008926:	4630      	mov	r0, r6
 8008928:	f000 f808 	bl	800893c <_sbrk_r>
 800892c:	3001      	adds	r0, #1
 800892e:	d0cf      	beq.n	80088d0 <_malloc_r+0x48>
 8008930:	6025      	str	r5, [r4, #0]
 8008932:	e7db      	b.n	80088ec <_malloc_r+0x64>
 8008934:	200000b8 	.word	0x200000b8
 8008938:	200000bc 	.word	0x200000bc

0800893c <_sbrk_r>:
 800893c:	b538      	push	{r3, r4, r5, lr}
 800893e:	4c06      	ldr	r4, [pc, #24]	; (8008958 <_sbrk_r+0x1c>)
 8008940:	2300      	movs	r3, #0
 8008942:	4605      	mov	r5, r0
 8008944:	4608      	mov	r0, r1
 8008946:	6023      	str	r3, [r4, #0]
 8008948:	f7ff fb7a 	bl	8008040 <_sbrk>
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d102      	bne.n	8008956 <_sbrk_r+0x1a>
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	b103      	cbz	r3, 8008956 <_sbrk_r+0x1a>
 8008954:	602b      	str	r3, [r5, #0]
 8008956:	bd38      	pop	{r3, r4, r5, pc}
 8008958:	20000920 	.word	0x20000920

0800895c <siprintf>:
 800895c:	b40e      	push	{r1, r2, r3}
 800895e:	b500      	push	{lr}
 8008960:	b09c      	sub	sp, #112	; 0x70
 8008962:	ab1d      	add	r3, sp, #116	; 0x74
 8008964:	9002      	str	r0, [sp, #8]
 8008966:	9006      	str	r0, [sp, #24]
 8008968:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800896c:	4809      	ldr	r0, [pc, #36]	; (8008994 <siprintf+0x38>)
 800896e:	9107      	str	r1, [sp, #28]
 8008970:	9104      	str	r1, [sp, #16]
 8008972:	4909      	ldr	r1, [pc, #36]	; (8008998 <siprintf+0x3c>)
 8008974:	f853 2b04 	ldr.w	r2, [r3], #4
 8008978:	9105      	str	r1, [sp, #20]
 800897a:	6800      	ldr	r0, [r0, #0]
 800897c:	9301      	str	r3, [sp, #4]
 800897e:	a902      	add	r1, sp, #8
 8008980:	f000 f868 	bl	8008a54 <_svfiprintf_r>
 8008984:	9b02      	ldr	r3, [sp, #8]
 8008986:	2200      	movs	r2, #0
 8008988:	701a      	strb	r2, [r3, #0]
 800898a:	b01c      	add	sp, #112	; 0x70
 800898c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008990:	b003      	add	sp, #12
 8008992:	4770      	bx	lr
 8008994:	2000002c 	.word	0x2000002c
 8008998:	ffff0208 	.word	0xffff0208

0800899c <__malloc_lock>:
 800899c:	4770      	bx	lr

0800899e <__malloc_unlock>:
 800899e:	4770      	bx	lr

080089a0 <__ssputs_r>:
 80089a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a4:	688e      	ldr	r6, [r1, #8]
 80089a6:	429e      	cmp	r6, r3
 80089a8:	4682      	mov	sl, r0
 80089aa:	460c      	mov	r4, r1
 80089ac:	4690      	mov	r8, r2
 80089ae:	4699      	mov	r9, r3
 80089b0:	d837      	bhi.n	8008a22 <__ssputs_r+0x82>
 80089b2:	898a      	ldrh	r2, [r1, #12]
 80089b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089b8:	d031      	beq.n	8008a1e <__ssputs_r+0x7e>
 80089ba:	6825      	ldr	r5, [r4, #0]
 80089bc:	6909      	ldr	r1, [r1, #16]
 80089be:	1a6f      	subs	r7, r5, r1
 80089c0:	6965      	ldr	r5, [r4, #20]
 80089c2:	2302      	movs	r3, #2
 80089c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80089cc:	f109 0301 	add.w	r3, r9, #1
 80089d0:	443b      	add	r3, r7
 80089d2:	429d      	cmp	r5, r3
 80089d4:	bf38      	it	cc
 80089d6:	461d      	movcc	r5, r3
 80089d8:	0553      	lsls	r3, r2, #21
 80089da:	d530      	bpl.n	8008a3e <__ssputs_r+0x9e>
 80089dc:	4629      	mov	r1, r5
 80089de:	f7ff ff53 	bl	8008888 <_malloc_r>
 80089e2:	4606      	mov	r6, r0
 80089e4:	b950      	cbnz	r0, 80089fc <__ssputs_r+0x5c>
 80089e6:	230c      	movs	r3, #12
 80089e8:	f8ca 3000 	str.w	r3, [sl]
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089f2:	81a3      	strh	r3, [r4, #12]
 80089f4:	f04f 30ff 	mov.w	r0, #4294967295
 80089f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fc:	463a      	mov	r2, r7
 80089fe:	6921      	ldr	r1, [r4, #16]
 8008a00:	f000 faa8 	bl	8008f54 <memcpy>
 8008a04:	89a3      	ldrh	r3, [r4, #12]
 8008a06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a0e:	81a3      	strh	r3, [r4, #12]
 8008a10:	6126      	str	r6, [r4, #16]
 8008a12:	6165      	str	r5, [r4, #20]
 8008a14:	443e      	add	r6, r7
 8008a16:	1bed      	subs	r5, r5, r7
 8008a18:	6026      	str	r6, [r4, #0]
 8008a1a:	60a5      	str	r5, [r4, #8]
 8008a1c:	464e      	mov	r6, r9
 8008a1e:	454e      	cmp	r6, r9
 8008a20:	d900      	bls.n	8008a24 <__ssputs_r+0x84>
 8008a22:	464e      	mov	r6, r9
 8008a24:	4632      	mov	r2, r6
 8008a26:	4641      	mov	r1, r8
 8008a28:	6820      	ldr	r0, [r4, #0]
 8008a2a:	f000 fa9e 	bl	8008f6a <memmove>
 8008a2e:	68a3      	ldr	r3, [r4, #8]
 8008a30:	1b9b      	subs	r3, r3, r6
 8008a32:	60a3      	str	r3, [r4, #8]
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	441e      	add	r6, r3
 8008a38:	6026      	str	r6, [r4, #0]
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	e7dc      	b.n	80089f8 <__ssputs_r+0x58>
 8008a3e:	462a      	mov	r2, r5
 8008a40:	f000 faac 	bl	8008f9c <_realloc_r>
 8008a44:	4606      	mov	r6, r0
 8008a46:	2800      	cmp	r0, #0
 8008a48:	d1e2      	bne.n	8008a10 <__ssputs_r+0x70>
 8008a4a:	6921      	ldr	r1, [r4, #16]
 8008a4c:	4650      	mov	r0, sl
 8008a4e:	f7ff fecd 	bl	80087ec <_free_r>
 8008a52:	e7c8      	b.n	80089e6 <__ssputs_r+0x46>

08008a54 <_svfiprintf_r>:
 8008a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a58:	461d      	mov	r5, r3
 8008a5a:	898b      	ldrh	r3, [r1, #12]
 8008a5c:	061f      	lsls	r7, r3, #24
 8008a5e:	b09d      	sub	sp, #116	; 0x74
 8008a60:	4680      	mov	r8, r0
 8008a62:	460c      	mov	r4, r1
 8008a64:	4616      	mov	r6, r2
 8008a66:	d50f      	bpl.n	8008a88 <_svfiprintf_r+0x34>
 8008a68:	690b      	ldr	r3, [r1, #16]
 8008a6a:	b96b      	cbnz	r3, 8008a88 <_svfiprintf_r+0x34>
 8008a6c:	2140      	movs	r1, #64	; 0x40
 8008a6e:	f7ff ff0b 	bl	8008888 <_malloc_r>
 8008a72:	6020      	str	r0, [r4, #0]
 8008a74:	6120      	str	r0, [r4, #16]
 8008a76:	b928      	cbnz	r0, 8008a84 <_svfiprintf_r+0x30>
 8008a78:	230c      	movs	r3, #12
 8008a7a:	f8c8 3000 	str.w	r3, [r8]
 8008a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a82:	e0c8      	b.n	8008c16 <_svfiprintf_r+0x1c2>
 8008a84:	2340      	movs	r3, #64	; 0x40
 8008a86:	6163      	str	r3, [r4, #20]
 8008a88:	2300      	movs	r3, #0
 8008a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a8c:	2320      	movs	r3, #32
 8008a8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a92:	2330      	movs	r3, #48	; 0x30
 8008a94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a98:	9503      	str	r5, [sp, #12]
 8008a9a:	f04f 0b01 	mov.w	fp, #1
 8008a9e:	4637      	mov	r7, r6
 8008aa0:	463d      	mov	r5, r7
 8008aa2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008aa6:	b10b      	cbz	r3, 8008aac <_svfiprintf_r+0x58>
 8008aa8:	2b25      	cmp	r3, #37	; 0x25
 8008aaa:	d13e      	bne.n	8008b2a <_svfiprintf_r+0xd6>
 8008aac:	ebb7 0a06 	subs.w	sl, r7, r6
 8008ab0:	d00b      	beq.n	8008aca <_svfiprintf_r+0x76>
 8008ab2:	4653      	mov	r3, sl
 8008ab4:	4632      	mov	r2, r6
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	4640      	mov	r0, r8
 8008aba:	f7ff ff71 	bl	80089a0 <__ssputs_r>
 8008abe:	3001      	adds	r0, #1
 8008ac0:	f000 80a4 	beq.w	8008c0c <_svfiprintf_r+0x1b8>
 8008ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ac6:	4453      	add	r3, sl
 8008ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8008aca:	783b      	ldrb	r3, [r7, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 809d 	beq.w	8008c0c <_svfiprintf_r+0x1b8>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008adc:	9304      	str	r3, [sp, #16]
 8008ade:	9307      	str	r3, [sp, #28]
 8008ae0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ae4:	931a      	str	r3, [sp, #104]	; 0x68
 8008ae6:	462f      	mov	r7, r5
 8008ae8:	2205      	movs	r2, #5
 8008aea:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008aee:	4850      	ldr	r0, [pc, #320]	; (8008c30 <_svfiprintf_r+0x1dc>)
 8008af0:	f7f7 fb6e 	bl	80001d0 <memchr>
 8008af4:	9b04      	ldr	r3, [sp, #16]
 8008af6:	b9d0      	cbnz	r0, 8008b2e <_svfiprintf_r+0xda>
 8008af8:	06d9      	lsls	r1, r3, #27
 8008afa:	bf44      	itt	mi
 8008afc:	2220      	movmi	r2, #32
 8008afe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b02:	071a      	lsls	r2, r3, #28
 8008b04:	bf44      	itt	mi
 8008b06:	222b      	movmi	r2, #43	; 0x2b
 8008b08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b0c:	782a      	ldrb	r2, [r5, #0]
 8008b0e:	2a2a      	cmp	r2, #42	; 0x2a
 8008b10:	d015      	beq.n	8008b3e <_svfiprintf_r+0xea>
 8008b12:	9a07      	ldr	r2, [sp, #28]
 8008b14:	462f      	mov	r7, r5
 8008b16:	2000      	movs	r0, #0
 8008b18:	250a      	movs	r5, #10
 8008b1a:	4639      	mov	r1, r7
 8008b1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b20:	3b30      	subs	r3, #48	; 0x30
 8008b22:	2b09      	cmp	r3, #9
 8008b24:	d94d      	bls.n	8008bc2 <_svfiprintf_r+0x16e>
 8008b26:	b1b8      	cbz	r0, 8008b58 <_svfiprintf_r+0x104>
 8008b28:	e00f      	b.n	8008b4a <_svfiprintf_r+0xf6>
 8008b2a:	462f      	mov	r7, r5
 8008b2c:	e7b8      	b.n	8008aa0 <_svfiprintf_r+0x4c>
 8008b2e:	4a40      	ldr	r2, [pc, #256]	; (8008c30 <_svfiprintf_r+0x1dc>)
 8008b30:	1a80      	subs	r0, r0, r2
 8008b32:	fa0b f000 	lsl.w	r0, fp, r0
 8008b36:	4318      	orrs	r0, r3
 8008b38:	9004      	str	r0, [sp, #16]
 8008b3a:	463d      	mov	r5, r7
 8008b3c:	e7d3      	b.n	8008ae6 <_svfiprintf_r+0x92>
 8008b3e:	9a03      	ldr	r2, [sp, #12]
 8008b40:	1d11      	adds	r1, r2, #4
 8008b42:	6812      	ldr	r2, [r2, #0]
 8008b44:	9103      	str	r1, [sp, #12]
 8008b46:	2a00      	cmp	r2, #0
 8008b48:	db01      	blt.n	8008b4e <_svfiprintf_r+0xfa>
 8008b4a:	9207      	str	r2, [sp, #28]
 8008b4c:	e004      	b.n	8008b58 <_svfiprintf_r+0x104>
 8008b4e:	4252      	negs	r2, r2
 8008b50:	f043 0302 	orr.w	r3, r3, #2
 8008b54:	9207      	str	r2, [sp, #28]
 8008b56:	9304      	str	r3, [sp, #16]
 8008b58:	783b      	ldrb	r3, [r7, #0]
 8008b5a:	2b2e      	cmp	r3, #46	; 0x2e
 8008b5c:	d10c      	bne.n	8008b78 <_svfiprintf_r+0x124>
 8008b5e:	787b      	ldrb	r3, [r7, #1]
 8008b60:	2b2a      	cmp	r3, #42	; 0x2a
 8008b62:	d133      	bne.n	8008bcc <_svfiprintf_r+0x178>
 8008b64:	9b03      	ldr	r3, [sp, #12]
 8008b66:	1d1a      	adds	r2, r3, #4
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	9203      	str	r2, [sp, #12]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	bfb8      	it	lt
 8008b70:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b74:	3702      	adds	r7, #2
 8008b76:	9305      	str	r3, [sp, #20]
 8008b78:	4d2e      	ldr	r5, [pc, #184]	; (8008c34 <_svfiprintf_r+0x1e0>)
 8008b7a:	7839      	ldrb	r1, [r7, #0]
 8008b7c:	2203      	movs	r2, #3
 8008b7e:	4628      	mov	r0, r5
 8008b80:	f7f7 fb26 	bl	80001d0 <memchr>
 8008b84:	b138      	cbz	r0, 8008b96 <_svfiprintf_r+0x142>
 8008b86:	2340      	movs	r3, #64	; 0x40
 8008b88:	1b40      	subs	r0, r0, r5
 8008b8a:	fa03 f000 	lsl.w	r0, r3, r0
 8008b8e:	9b04      	ldr	r3, [sp, #16]
 8008b90:	4303      	orrs	r3, r0
 8008b92:	3701      	adds	r7, #1
 8008b94:	9304      	str	r3, [sp, #16]
 8008b96:	7839      	ldrb	r1, [r7, #0]
 8008b98:	4827      	ldr	r0, [pc, #156]	; (8008c38 <_svfiprintf_r+0x1e4>)
 8008b9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b9e:	2206      	movs	r2, #6
 8008ba0:	1c7e      	adds	r6, r7, #1
 8008ba2:	f7f7 fb15 	bl	80001d0 <memchr>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d038      	beq.n	8008c1c <_svfiprintf_r+0x1c8>
 8008baa:	4b24      	ldr	r3, [pc, #144]	; (8008c3c <_svfiprintf_r+0x1e8>)
 8008bac:	bb13      	cbnz	r3, 8008bf4 <_svfiprintf_r+0x1a0>
 8008bae:	9b03      	ldr	r3, [sp, #12]
 8008bb0:	3307      	adds	r3, #7
 8008bb2:	f023 0307 	bic.w	r3, r3, #7
 8008bb6:	3308      	adds	r3, #8
 8008bb8:	9303      	str	r3, [sp, #12]
 8008bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bbc:	444b      	add	r3, r9
 8008bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc0:	e76d      	b.n	8008a9e <_svfiprintf_r+0x4a>
 8008bc2:	fb05 3202 	mla	r2, r5, r2, r3
 8008bc6:	2001      	movs	r0, #1
 8008bc8:	460f      	mov	r7, r1
 8008bca:	e7a6      	b.n	8008b1a <_svfiprintf_r+0xc6>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	3701      	adds	r7, #1
 8008bd0:	9305      	str	r3, [sp, #20]
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	250a      	movs	r5, #10
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bdc:	3a30      	subs	r2, #48	; 0x30
 8008bde:	2a09      	cmp	r2, #9
 8008be0:	d903      	bls.n	8008bea <_svfiprintf_r+0x196>
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d0c8      	beq.n	8008b78 <_svfiprintf_r+0x124>
 8008be6:	9105      	str	r1, [sp, #20]
 8008be8:	e7c6      	b.n	8008b78 <_svfiprintf_r+0x124>
 8008bea:	fb05 2101 	mla	r1, r5, r1, r2
 8008bee:	2301      	movs	r3, #1
 8008bf0:	4607      	mov	r7, r0
 8008bf2:	e7f0      	b.n	8008bd6 <_svfiprintf_r+0x182>
 8008bf4:	ab03      	add	r3, sp, #12
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	4622      	mov	r2, r4
 8008bfa:	4b11      	ldr	r3, [pc, #68]	; (8008c40 <_svfiprintf_r+0x1ec>)
 8008bfc:	a904      	add	r1, sp, #16
 8008bfe:	4640      	mov	r0, r8
 8008c00:	f3af 8000 	nop.w
 8008c04:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008c08:	4681      	mov	r9, r0
 8008c0a:	d1d6      	bne.n	8008bba <_svfiprintf_r+0x166>
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	065b      	lsls	r3, r3, #25
 8008c10:	f53f af35 	bmi.w	8008a7e <_svfiprintf_r+0x2a>
 8008c14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c16:	b01d      	add	sp, #116	; 0x74
 8008c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1c:	ab03      	add	r3, sp, #12
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	4622      	mov	r2, r4
 8008c22:	4b07      	ldr	r3, [pc, #28]	; (8008c40 <_svfiprintf_r+0x1ec>)
 8008c24:	a904      	add	r1, sp, #16
 8008c26:	4640      	mov	r0, r8
 8008c28:	f000 f882 	bl	8008d30 <_printf_i>
 8008c2c:	e7ea      	b.n	8008c04 <_svfiprintf_r+0x1b0>
 8008c2e:	bf00      	nop
 8008c30:	08009070 	.word	0x08009070
 8008c34:	08009076 	.word	0x08009076
 8008c38:	0800907a 	.word	0x0800907a
 8008c3c:	00000000 	.word	0x00000000
 8008c40:	080089a1 	.word	0x080089a1

08008c44 <_printf_common>:
 8008c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c48:	4691      	mov	r9, r2
 8008c4a:	461f      	mov	r7, r3
 8008c4c:	688a      	ldr	r2, [r1, #8]
 8008c4e:	690b      	ldr	r3, [r1, #16]
 8008c50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c54:	4293      	cmp	r3, r2
 8008c56:	bfb8      	it	lt
 8008c58:	4613      	movlt	r3, r2
 8008c5a:	f8c9 3000 	str.w	r3, [r9]
 8008c5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c62:	4606      	mov	r6, r0
 8008c64:	460c      	mov	r4, r1
 8008c66:	b112      	cbz	r2, 8008c6e <_printf_common+0x2a>
 8008c68:	3301      	adds	r3, #1
 8008c6a:	f8c9 3000 	str.w	r3, [r9]
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	0699      	lsls	r1, r3, #26
 8008c72:	bf42      	ittt	mi
 8008c74:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008c78:	3302      	addmi	r3, #2
 8008c7a:	f8c9 3000 	strmi.w	r3, [r9]
 8008c7e:	6825      	ldr	r5, [r4, #0]
 8008c80:	f015 0506 	ands.w	r5, r5, #6
 8008c84:	d107      	bne.n	8008c96 <_printf_common+0x52>
 8008c86:	f104 0a19 	add.w	sl, r4, #25
 8008c8a:	68e3      	ldr	r3, [r4, #12]
 8008c8c:	f8d9 2000 	ldr.w	r2, [r9]
 8008c90:	1a9b      	subs	r3, r3, r2
 8008c92:	42ab      	cmp	r3, r5
 8008c94:	dc28      	bgt.n	8008ce8 <_printf_common+0xa4>
 8008c96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008c9a:	6822      	ldr	r2, [r4, #0]
 8008c9c:	3300      	adds	r3, #0
 8008c9e:	bf18      	it	ne
 8008ca0:	2301      	movne	r3, #1
 8008ca2:	0692      	lsls	r2, r2, #26
 8008ca4:	d42d      	bmi.n	8008d02 <_printf_common+0xbe>
 8008ca6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008caa:	4639      	mov	r1, r7
 8008cac:	4630      	mov	r0, r6
 8008cae:	47c0      	blx	r8
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	d020      	beq.n	8008cf6 <_printf_common+0xb2>
 8008cb4:	6823      	ldr	r3, [r4, #0]
 8008cb6:	68e5      	ldr	r5, [r4, #12]
 8008cb8:	f8d9 2000 	ldr.w	r2, [r9]
 8008cbc:	f003 0306 	and.w	r3, r3, #6
 8008cc0:	2b04      	cmp	r3, #4
 8008cc2:	bf08      	it	eq
 8008cc4:	1aad      	subeq	r5, r5, r2
 8008cc6:	68a3      	ldr	r3, [r4, #8]
 8008cc8:	6922      	ldr	r2, [r4, #16]
 8008cca:	bf0c      	ite	eq
 8008ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cd0:	2500      	movne	r5, #0
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	bfc4      	itt	gt
 8008cd6:	1a9b      	subgt	r3, r3, r2
 8008cd8:	18ed      	addgt	r5, r5, r3
 8008cda:	f04f 0900 	mov.w	r9, #0
 8008cde:	341a      	adds	r4, #26
 8008ce0:	454d      	cmp	r5, r9
 8008ce2:	d11a      	bne.n	8008d1a <_printf_common+0xd6>
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	e008      	b.n	8008cfa <_printf_common+0xb6>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	4652      	mov	r2, sl
 8008cec:	4639      	mov	r1, r7
 8008cee:	4630      	mov	r0, r6
 8008cf0:	47c0      	blx	r8
 8008cf2:	3001      	adds	r0, #1
 8008cf4:	d103      	bne.n	8008cfe <_printf_common+0xba>
 8008cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cfe:	3501      	adds	r5, #1
 8008d00:	e7c3      	b.n	8008c8a <_printf_common+0x46>
 8008d02:	18e1      	adds	r1, r4, r3
 8008d04:	1c5a      	adds	r2, r3, #1
 8008d06:	2030      	movs	r0, #48	; 0x30
 8008d08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d0c:	4422      	add	r2, r4
 8008d0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d16:	3302      	adds	r3, #2
 8008d18:	e7c5      	b.n	8008ca6 <_printf_common+0x62>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	4622      	mov	r2, r4
 8008d1e:	4639      	mov	r1, r7
 8008d20:	4630      	mov	r0, r6
 8008d22:	47c0      	blx	r8
 8008d24:	3001      	adds	r0, #1
 8008d26:	d0e6      	beq.n	8008cf6 <_printf_common+0xb2>
 8008d28:	f109 0901 	add.w	r9, r9, #1
 8008d2c:	e7d8      	b.n	8008ce0 <_printf_common+0x9c>
	...

08008d30 <_printf_i>:
 8008d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d34:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008d38:	460c      	mov	r4, r1
 8008d3a:	7e09      	ldrb	r1, [r1, #24]
 8008d3c:	b085      	sub	sp, #20
 8008d3e:	296e      	cmp	r1, #110	; 0x6e
 8008d40:	4617      	mov	r7, r2
 8008d42:	4606      	mov	r6, r0
 8008d44:	4698      	mov	r8, r3
 8008d46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d48:	f000 80b3 	beq.w	8008eb2 <_printf_i+0x182>
 8008d4c:	d822      	bhi.n	8008d94 <_printf_i+0x64>
 8008d4e:	2963      	cmp	r1, #99	; 0x63
 8008d50:	d036      	beq.n	8008dc0 <_printf_i+0x90>
 8008d52:	d80a      	bhi.n	8008d6a <_printf_i+0x3a>
 8008d54:	2900      	cmp	r1, #0
 8008d56:	f000 80b9 	beq.w	8008ecc <_printf_i+0x19c>
 8008d5a:	2958      	cmp	r1, #88	; 0x58
 8008d5c:	f000 8083 	beq.w	8008e66 <_printf_i+0x136>
 8008d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008d68:	e032      	b.n	8008dd0 <_printf_i+0xa0>
 8008d6a:	2964      	cmp	r1, #100	; 0x64
 8008d6c:	d001      	beq.n	8008d72 <_printf_i+0x42>
 8008d6e:	2969      	cmp	r1, #105	; 0x69
 8008d70:	d1f6      	bne.n	8008d60 <_printf_i+0x30>
 8008d72:	6820      	ldr	r0, [r4, #0]
 8008d74:	6813      	ldr	r3, [r2, #0]
 8008d76:	0605      	lsls	r5, r0, #24
 8008d78:	f103 0104 	add.w	r1, r3, #4
 8008d7c:	d52a      	bpl.n	8008dd4 <_printf_i+0xa4>
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6011      	str	r1, [r2, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	da03      	bge.n	8008d8e <_printf_i+0x5e>
 8008d86:	222d      	movs	r2, #45	; 0x2d
 8008d88:	425b      	negs	r3, r3
 8008d8a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008d8e:	486f      	ldr	r0, [pc, #444]	; (8008f4c <_printf_i+0x21c>)
 8008d90:	220a      	movs	r2, #10
 8008d92:	e039      	b.n	8008e08 <_printf_i+0xd8>
 8008d94:	2973      	cmp	r1, #115	; 0x73
 8008d96:	f000 809d 	beq.w	8008ed4 <_printf_i+0x1a4>
 8008d9a:	d808      	bhi.n	8008dae <_printf_i+0x7e>
 8008d9c:	296f      	cmp	r1, #111	; 0x6f
 8008d9e:	d020      	beq.n	8008de2 <_printf_i+0xb2>
 8008da0:	2970      	cmp	r1, #112	; 0x70
 8008da2:	d1dd      	bne.n	8008d60 <_printf_i+0x30>
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	f043 0320 	orr.w	r3, r3, #32
 8008daa:	6023      	str	r3, [r4, #0]
 8008dac:	e003      	b.n	8008db6 <_printf_i+0x86>
 8008dae:	2975      	cmp	r1, #117	; 0x75
 8008db0:	d017      	beq.n	8008de2 <_printf_i+0xb2>
 8008db2:	2978      	cmp	r1, #120	; 0x78
 8008db4:	d1d4      	bne.n	8008d60 <_printf_i+0x30>
 8008db6:	2378      	movs	r3, #120	; 0x78
 8008db8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dbc:	4864      	ldr	r0, [pc, #400]	; (8008f50 <_printf_i+0x220>)
 8008dbe:	e055      	b.n	8008e6c <_printf_i+0x13c>
 8008dc0:	6813      	ldr	r3, [r2, #0]
 8008dc2:	1d19      	adds	r1, r3, #4
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6011      	str	r1, [r2, #0]
 8008dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e08c      	b.n	8008eee <_printf_i+0x1be>
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6011      	str	r1, [r2, #0]
 8008dd8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ddc:	bf18      	it	ne
 8008dde:	b21b      	sxthne	r3, r3
 8008de0:	e7cf      	b.n	8008d82 <_printf_i+0x52>
 8008de2:	6813      	ldr	r3, [r2, #0]
 8008de4:	6825      	ldr	r5, [r4, #0]
 8008de6:	1d18      	adds	r0, r3, #4
 8008de8:	6010      	str	r0, [r2, #0]
 8008dea:	0628      	lsls	r0, r5, #24
 8008dec:	d501      	bpl.n	8008df2 <_printf_i+0xc2>
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	e002      	b.n	8008df8 <_printf_i+0xc8>
 8008df2:	0668      	lsls	r0, r5, #25
 8008df4:	d5fb      	bpl.n	8008dee <_printf_i+0xbe>
 8008df6:	881b      	ldrh	r3, [r3, #0]
 8008df8:	4854      	ldr	r0, [pc, #336]	; (8008f4c <_printf_i+0x21c>)
 8008dfa:	296f      	cmp	r1, #111	; 0x6f
 8008dfc:	bf14      	ite	ne
 8008dfe:	220a      	movne	r2, #10
 8008e00:	2208      	moveq	r2, #8
 8008e02:	2100      	movs	r1, #0
 8008e04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e08:	6865      	ldr	r5, [r4, #4]
 8008e0a:	60a5      	str	r5, [r4, #8]
 8008e0c:	2d00      	cmp	r5, #0
 8008e0e:	f2c0 8095 	blt.w	8008f3c <_printf_i+0x20c>
 8008e12:	6821      	ldr	r1, [r4, #0]
 8008e14:	f021 0104 	bic.w	r1, r1, #4
 8008e18:	6021      	str	r1, [r4, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d13d      	bne.n	8008e9a <_printf_i+0x16a>
 8008e1e:	2d00      	cmp	r5, #0
 8008e20:	f040 808e 	bne.w	8008f40 <_printf_i+0x210>
 8008e24:	4665      	mov	r5, ip
 8008e26:	2a08      	cmp	r2, #8
 8008e28:	d10b      	bne.n	8008e42 <_printf_i+0x112>
 8008e2a:	6823      	ldr	r3, [r4, #0]
 8008e2c:	07db      	lsls	r3, r3, #31
 8008e2e:	d508      	bpl.n	8008e42 <_printf_i+0x112>
 8008e30:	6923      	ldr	r3, [r4, #16]
 8008e32:	6862      	ldr	r2, [r4, #4]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	bfde      	ittt	le
 8008e38:	2330      	movle	r3, #48	; 0x30
 8008e3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e42:	ebac 0305 	sub.w	r3, ip, r5
 8008e46:	6123      	str	r3, [r4, #16]
 8008e48:	f8cd 8000 	str.w	r8, [sp]
 8008e4c:	463b      	mov	r3, r7
 8008e4e:	aa03      	add	r2, sp, #12
 8008e50:	4621      	mov	r1, r4
 8008e52:	4630      	mov	r0, r6
 8008e54:	f7ff fef6 	bl	8008c44 <_printf_common>
 8008e58:	3001      	adds	r0, #1
 8008e5a:	d14d      	bne.n	8008ef8 <_printf_i+0x1c8>
 8008e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e60:	b005      	add	sp, #20
 8008e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e66:	4839      	ldr	r0, [pc, #228]	; (8008f4c <_printf_i+0x21c>)
 8008e68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008e6c:	6813      	ldr	r3, [r2, #0]
 8008e6e:	6821      	ldr	r1, [r4, #0]
 8008e70:	1d1d      	adds	r5, r3, #4
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6015      	str	r5, [r2, #0]
 8008e76:	060a      	lsls	r2, r1, #24
 8008e78:	d50b      	bpl.n	8008e92 <_printf_i+0x162>
 8008e7a:	07ca      	lsls	r2, r1, #31
 8008e7c:	bf44      	itt	mi
 8008e7e:	f041 0120 	orrmi.w	r1, r1, #32
 8008e82:	6021      	strmi	r1, [r4, #0]
 8008e84:	b91b      	cbnz	r3, 8008e8e <_printf_i+0x15e>
 8008e86:	6822      	ldr	r2, [r4, #0]
 8008e88:	f022 0220 	bic.w	r2, r2, #32
 8008e8c:	6022      	str	r2, [r4, #0]
 8008e8e:	2210      	movs	r2, #16
 8008e90:	e7b7      	b.n	8008e02 <_printf_i+0xd2>
 8008e92:	064d      	lsls	r5, r1, #25
 8008e94:	bf48      	it	mi
 8008e96:	b29b      	uxthmi	r3, r3
 8008e98:	e7ef      	b.n	8008e7a <_printf_i+0x14a>
 8008e9a:	4665      	mov	r5, ip
 8008e9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ea0:	fb02 3311 	mls	r3, r2, r1, r3
 8008ea4:	5cc3      	ldrb	r3, [r0, r3]
 8008ea6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008eaa:	460b      	mov	r3, r1
 8008eac:	2900      	cmp	r1, #0
 8008eae:	d1f5      	bne.n	8008e9c <_printf_i+0x16c>
 8008eb0:	e7b9      	b.n	8008e26 <_printf_i+0xf6>
 8008eb2:	6813      	ldr	r3, [r2, #0]
 8008eb4:	6825      	ldr	r5, [r4, #0]
 8008eb6:	6961      	ldr	r1, [r4, #20]
 8008eb8:	1d18      	adds	r0, r3, #4
 8008eba:	6010      	str	r0, [r2, #0]
 8008ebc:	0628      	lsls	r0, r5, #24
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	d501      	bpl.n	8008ec6 <_printf_i+0x196>
 8008ec2:	6019      	str	r1, [r3, #0]
 8008ec4:	e002      	b.n	8008ecc <_printf_i+0x19c>
 8008ec6:	066a      	lsls	r2, r5, #25
 8008ec8:	d5fb      	bpl.n	8008ec2 <_printf_i+0x192>
 8008eca:	8019      	strh	r1, [r3, #0]
 8008ecc:	2300      	movs	r3, #0
 8008ece:	6123      	str	r3, [r4, #16]
 8008ed0:	4665      	mov	r5, ip
 8008ed2:	e7b9      	b.n	8008e48 <_printf_i+0x118>
 8008ed4:	6813      	ldr	r3, [r2, #0]
 8008ed6:	1d19      	adds	r1, r3, #4
 8008ed8:	6011      	str	r1, [r2, #0]
 8008eda:	681d      	ldr	r5, [r3, #0]
 8008edc:	6862      	ldr	r2, [r4, #4]
 8008ede:	2100      	movs	r1, #0
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	f7f7 f975 	bl	80001d0 <memchr>
 8008ee6:	b108      	cbz	r0, 8008eec <_printf_i+0x1bc>
 8008ee8:	1b40      	subs	r0, r0, r5
 8008eea:	6060      	str	r0, [r4, #4]
 8008eec:	6863      	ldr	r3, [r4, #4]
 8008eee:	6123      	str	r3, [r4, #16]
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ef6:	e7a7      	b.n	8008e48 <_printf_i+0x118>
 8008ef8:	6923      	ldr	r3, [r4, #16]
 8008efa:	462a      	mov	r2, r5
 8008efc:	4639      	mov	r1, r7
 8008efe:	4630      	mov	r0, r6
 8008f00:	47c0      	blx	r8
 8008f02:	3001      	adds	r0, #1
 8008f04:	d0aa      	beq.n	8008e5c <_printf_i+0x12c>
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	079b      	lsls	r3, r3, #30
 8008f0a:	d413      	bmi.n	8008f34 <_printf_i+0x204>
 8008f0c:	68e0      	ldr	r0, [r4, #12]
 8008f0e:	9b03      	ldr	r3, [sp, #12]
 8008f10:	4298      	cmp	r0, r3
 8008f12:	bfb8      	it	lt
 8008f14:	4618      	movlt	r0, r3
 8008f16:	e7a3      	b.n	8008e60 <_printf_i+0x130>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	464a      	mov	r2, r9
 8008f1c:	4639      	mov	r1, r7
 8008f1e:	4630      	mov	r0, r6
 8008f20:	47c0      	blx	r8
 8008f22:	3001      	adds	r0, #1
 8008f24:	d09a      	beq.n	8008e5c <_printf_i+0x12c>
 8008f26:	3501      	adds	r5, #1
 8008f28:	68e3      	ldr	r3, [r4, #12]
 8008f2a:	9a03      	ldr	r2, [sp, #12]
 8008f2c:	1a9b      	subs	r3, r3, r2
 8008f2e:	42ab      	cmp	r3, r5
 8008f30:	dcf2      	bgt.n	8008f18 <_printf_i+0x1e8>
 8008f32:	e7eb      	b.n	8008f0c <_printf_i+0x1dc>
 8008f34:	2500      	movs	r5, #0
 8008f36:	f104 0919 	add.w	r9, r4, #25
 8008f3a:	e7f5      	b.n	8008f28 <_printf_i+0x1f8>
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1ac      	bne.n	8008e9a <_printf_i+0x16a>
 8008f40:	7803      	ldrb	r3, [r0, #0]
 8008f42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f4a:	e76c      	b.n	8008e26 <_printf_i+0xf6>
 8008f4c:	08009081 	.word	0x08009081
 8008f50:	08009092 	.word	0x08009092

08008f54 <memcpy>:
 8008f54:	b510      	push	{r4, lr}
 8008f56:	1e43      	subs	r3, r0, #1
 8008f58:	440a      	add	r2, r1
 8008f5a:	4291      	cmp	r1, r2
 8008f5c:	d100      	bne.n	8008f60 <memcpy+0xc>
 8008f5e:	bd10      	pop	{r4, pc}
 8008f60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f68:	e7f7      	b.n	8008f5a <memcpy+0x6>

08008f6a <memmove>:
 8008f6a:	4288      	cmp	r0, r1
 8008f6c:	b510      	push	{r4, lr}
 8008f6e:	eb01 0302 	add.w	r3, r1, r2
 8008f72:	d807      	bhi.n	8008f84 <memmove+0x1a>
 8008f74:	1e42      	subs	r2, r0, #1
 8008f76:	4299      	cmp	r1, r3
 8008f78:	d00a      	beq.n	8008f90 <memmove+0x26>
 8008f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f7e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008f82:	e7f8      	b.n	8008f76 <memmove+0xc>
 8008f84:	4283      	cmp	r3, r0
 8008f86:	d9f5      	bls.n	8008f74 <memmove+0xa>
 8008f88:	1881      	adds	r1, r0, r2
 8008f8a:	1ad2      	subs	r2, r2, r3
 8008f8c:	42d3      	cmn	r3, r2
 8008f8e:	d100      	bne.n	8008f92 <memmove+0x28>
 8008f90:	bd10      	pop	{r4, pc}
 8008f92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f96:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008f9a:	e7f7      	b.n	8008f8c <memmove+0x22>

08008f9c <_realloc_r>:
 8008f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9e:	4607      	mov	r7, r0
 8008fa0:	4614      	mov	r4, r2
 8008fa2:	460e      	mov	r6, r1
 8008fa4:	b921      	cbnz	r1, 8008fb0 <_realloc_r+0x14>
 8008fa6:	4611      	mov	r1, r2
 8008fa8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008fac:	f7ff bc6c 	b.w	8008888 <_malloc_r>
 8008fb0:	b922      	cbnz	r2, 8008fbc <_realloc_r+0x20>
 8008fb2:	f7ff fc1b 	bl	80087ec <_free_r>
 8008fb6:	4625      	mov	r5, r4
 8008fb8:	4628      	mov	r0, r5
 8008fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fbc:	f000 f814 	bl	8008fe8 <_malloc_usable_size_r>
 8008fc0:	42a0      	cmp	r0, r4
 8008fc2:	d20f      	bcs.n	8008fe4 <_realloc_r+0x48>
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	4638      	mov	r0, r7
 8008fc8:	f7ff fc5e 	bl	8008888 <_malloc_r>
 8008fcc:	4605      	mov	r5, r0
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	d0f2      	beq.n	8008fb8 <_realloc_r+0x1c>
 8008fd2:	4631      	mov	r1, r6
 8008fd4:	4622      	mov	r2, r4
 8008fd6:	f7ff ffbd 	bl	8008f54 <memcpy>
 8008fda:	4631      	mov	r1, r6
 8008fdc:	4638      	mov	r0, r7
 8008fde:	f7ff fc05 	bl	80087ec <_free_r>
 8008fe2:	e7e9      	b.n	8008fb8 <_realloc_r+0x1c>
 8008fe4:	4635      	mov	r5, r6
 8008fe6:	e7e7      	b.n	8008fb8 <_realloc_r+0x1c>

08008fe8 <_malloc_usable_size_r>:
 8008fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fec:	1f18      	subs	r0, r3, #4
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	bfbc      	itt	lt
 8008ff2:	580b      	ldrlt	r3, [r1, r0]
 8008ff4:	18c0      	addlt	r0, r0, r3
 8008ff6:	4770      	bx	lr

08008ff8 <_init>:
 8008ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffa:	bf00      	nop
 8008ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ffe:	bc08      	pop	{r3}
 8009000:	469e      	mov	lr, r3
 8009002:	4770      	bx	lr

08009004 <_fini>:
 8009004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009006:	bf00      	nop
 8009008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800900a:	bc08      	pop	{r3}
 800900c:	469e      	mov	lr, r3
 800900e:	4770      	bx	lr
